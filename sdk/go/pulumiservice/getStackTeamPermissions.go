// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get all teams that have access to a specific stack.
func GetStackTeamPermissions(ctx *pulumi.Context, args *GetStackTeamPermissionsArgs, opts ...pulumi.InvokeOption) (*GetStackTeamPermissionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStackTeamPermissionsResult
	err := ctx.Invoke("pulumiservice:index:getStackTeamPermissions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetStackTeamPermissionsArgs struct {
	// The name of the Pulumi organization.
	OrganizationName string `pulumi:"organizationName"`
	// The name of the project.
	ProjectName string `pulumi:"projectName"`
	// The name of the stack.
	StackName string `pulumi:"stackName"`
}

type GetStackTeamPermissionsResult struct {
	// List of teams with permissions on this stack.
	Teams []map[string]string `pulumi:"teams"`
}

func GetStackTeamPermissionsOutput(ctx *pulumi.Context, args GetStackTeamPermissionsOutputArgs, opts ...pulumi.InvokeOption) GetStackTeamPermissionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetStackTeamPermissionsResultOutput, error) {
			args := v.(GetStackTeamPermissionsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetStackTeamPermissionsResult
			secret, err := ctx.InvokePackageRaw("pulumiservice:index:getStackTeamPermissions", args, &rv, "", opts...)
			if err != nil {
				return GetStackTeamPermissionsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetStackTeamPermissionsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetStackTeamPermissionsResultOutput), nil
			}
			return output, nil
		}).(GetStackTeamPermissionsResultOutput)
}

type GetStackTeamPermissionsOutputArgs struct {
	// The name of the Pulumi organization.
	OrganizationName pulumi.StringInput `pulumi:"organizationName"`
	// The name of the project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The name of the stack.
	StackName pulumi.StringInput `pulumi:"stackName"`
}

func (GetStackTeamPermissionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackTeamPermissionsArgs)(nil)).Elem()
}

type GetStackTeamPermissionsResultOutput struct{ *pulumi.OutputState }

func (GetStackTeamPermissionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackTeamPermissionsResult)(nil)).Elem()
}

func (o GetStackTeamPermissionsResultOutput) ToGetStackTeamPermissionsResultOutput() GetStackTeamPermissionsResultOutput {
	return o
}

func (o GetStackTeamPermissionsResultOutput) ToGetStackTeamPermissionsResultOutputWithContext(ctx context.Context) GetStackTeamPermissionsResultOutput {
	return o
}

// List of teams with permissions on this stack.
func (o GetStackTeamPermissionsResultOutput) Teams() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetStackTeamPermissionsResult) []map[string]string { return v.Teams }).(pulumi.StringMapArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStackTeamPermissionsResultOutput{})
}
