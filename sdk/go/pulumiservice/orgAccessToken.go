// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Pulumi Cloud allows users to create access tokens scoped to orgs. Org access tokens is a resource to create them and assign them to an org
type OrgAccessToken struct {
	pulumi.CustomResourceState

	// Optional. True if this is an admin token. Defaults to false.
	Admin pulumi.BoolPtrOutput `pulumi:"admin"`
	// Optional. Description for the token.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name for the token.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization's name.
	OrganizationName pulumi.StringOutput `pulumi:"organizationName"`
	// The token's value.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewOrgAccessToken registers a new resource with the given unique name, arguments, and options.
func NewOrgAccessToken(ctx *pulumi.Context,
	name string, args *OrgAccessTokenArgs, opts ...pulumi.ResourceOption) (*OrgAccessToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.OrganizationName == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationName'")
	}
	if args.Admin == nil {
		args.Admin = pulumi.BoolPtr(false)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgAccessToken
	err := ctx.RegisterResource("pulumiservice:index:OrgAccessToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgAccessToken gets an existing OrgAccessToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgAccessToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgAccessTokenState, opts ...pulumi.ResourceOption) (*OrgAccessToken, error) {
	var resource OrgAccessToken
	err := ctx.ReadResource("pulumiservice:index:OrgAccessToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgAccessToken resources.
type orgAccessTokenState struct {
}

type OrgAccessTokenState struct {
}

func (OrgAccessTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgAccessTokenState)(nil)).Elem()
}

type orgAccessTokenArgs struct {
	// Optional. True if this is an admin token. Defaults to false.
	Admin *bool `pulumi:"admin"`
	// Optional. Team description.
	Description *string `pulumi:"description"`
	// The name for the token.
	Name string `pulumi:"name"`
	// The organization's name.
	OrganizationName string `pulumi:"organizationName"`
}

// The set of arguments for constructing a OrgAccessToken resource.
type OrgAccessTokenArgs struct {
	// Optional. True if this is an admin token. Defaults to false.
	Admin pulumi.BoolPtrInput
	// Optional. Team description.
	Description pulumi.StringPtrInput
	// The name for the token.
	Name pulumi.StringInput
	// The organization's name.
	OrganizationName pulumi.StringInput
}

func (OrgAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgAccessTokenArgs)(nil)).Elem()
}

type OrgAccessTokenInput interface {
	pulumi.Input

	ToOrgAccessTokenOutput() OrgAccessTokenOutput
	ToOrgAccessTokenOutputWithContext(ctx context.Context) OrgAccessTokenOutput
}

func (*OrgAccessToken) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgAccessToken)(nil)).Elem()
}

func (i *OrgAccessToken) ToOrgAccessTokenOutput() OrgAccessTokenOutput {
	return i.ToOrgAccessTokenOutputWithContext(context.Background())
}

func (i *OrgAccessToken) ToOrgAccessTokenOutputWithContext(ctx context.Context) OrgAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgAccessTokenOutput)
}

// OrgAccessTokenArrayInput is an input type that accepts OrgAccessTokenArray and OrgAccessTokenArrayOutput values.
// You can construct a concrete instance of `OrgAccessTokenArrayInput` via:
//
//	OrgAccessTokenArray{ OrgAccessTokenArgs{...} }
type OrgAccessTokenArrayInput interface {
	pulumi.Input

	ToOrgAccessTokenArrayOutput() OrgAccessTokenArrayOutput
	ToOrgAccessTokenArrayOutputWithContext(context.Context) OrgAccessTokenArrayOutput
}

type OrgAccessTokenArray []OrgAccessTokenInput

func (OrgAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgAccessToken)(nil)).Elem()
}

func (i OrgAccessTokenArray) ToOrgAccessTokenArrayOutput() OrgAccessTokenArrayOutput {
	return i.ToOrgAccessTokenArrayOutputWithContext(context.Background())
}

func (i OrgAccessTokenArray) ToOrgAccessTokenArrayOutputWithContext(ctx context.Context) OrgAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgAccessTokenArrayOutput)
}

// OrgAccessTokenMapInput is an input type that accepts OrgAccessTokenMap and OrgAccessTokenMapOutput values.
// You can construct a concrete instance of `OrgAccessTokenMapInput` via:
//
//	OrgAccessTokenMap{ "key": OrgAccessTokenArgs{...} }
type OrgAccessTokenMapInput interface {
	pulumi.Input

	ToOrgAccessTokenMapOutput() OrgAccessTokenMapOutput
	ToOrgAccessTokenMapOutputWithContext(context.Context) OrgAccessTokenMapOutput
}

type OrgAccessTokenMap map[string]OrgAccessTokenInput

func (OrgAccessTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgAccessToken)(nil)).Elem()
}

func (i OrgAccessTokenMap) ToOrgAccessTokenMapOutput() OrgAccessTokenMapOutput {
	return i.ToOrgAccessTokenMapOutputWithContext(context.Background())
}

func (i OrgAccessTokenMap) ToOrgAccessTokenMapOutputWithContext(ctx context.Context) OrgAccessTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgAccessTokenMapOutput)
}

type OrgAccessTokenOutput struct{ *pulumi.OutputState }

func (OrgAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgAccessToken)(nil)).Elem()
}

func (o OrgAccessTokenOutput) ToOrgAccessTokenOutput() OrgAccessTokenOutput {
	return o
}

func (o OrgAccessTokenOutput) ToOrgAccessTokenOutputWithContext(ctx context.Context) OrgAccessTokenOutput {
	return o
}

// Optional. True if this is an admin token. Defaults to false.
func (o OrgAccessTokenOutput) Admin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgAccessToken) pulumi.BoolPtrOutput { return v.Admin }).(pulumi.BoolPtrOutput)
}

// Optional. Description for the token.
func (o OrgAccessTokenOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgAccessToken) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name for the token.
func (o OrgAccessTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgAccessToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization's name.
func (o OrgAccessTokenOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgAccessToken) pulumi.StringOutput { return v.OrganizationName }).(pulumi.StringOutput)
}

// The token's value.
func (o OrgAccessTokenOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgAccessToken) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type OrgAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (OrgAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgAccessToken)(nil)).Elem()
}

func (o OrgAccessTokenArrayOutput) ToOrgAccessTokenArrayOutput() OrgAccessTokenArrayOutput {
	return o
}

func (o OrgAccessTokenArrayOutput) ToOrgAccessTokenArrayOutputWithContext(ctx context.Context) OrgAccessTokenArrayOutput {
	return o
}

func (o OrgAccessTokenArrayOutput) Index(i pulumi.IntInput) OrgAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgAccessToken {
		return vs[0].([]*OrgAccessToken)[vs[1].(int)]
	}).(OrgAccessTokenOutput)
}

type OrgAccessTokenMapOutput struct{ *pulumi.OutputState }

func (OrgAccessTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgAccessToken)(nil)).Elem()
}

func (o OrgAccessTokenMapOutput) ToOrgAccessTokenMapOutput() OrgAccessTokenMapOutput {
	return o
}

func (o OrgAccessTokenMapOutput) ToOrgAccessTokenMapOutputWithContext(ctx context.Context) OrgAccessTokenMapOutput {
	return o
}

func (o OrgAccessTokenMapOutput) MapIndex(k pulumi.StringInput) OrgAccessTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgAccessToken {
		return vs[0].(map[string]*OrgAccessToken)[vs[1].(string)]
	}).(OrgAccessTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgAccessTokenInput)(nil)).Elem(), &OrgAccessToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgAccessTokenArrayInput)(nil)).Elem(), OrgAccessTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgAccessTokenMapInput)(nil)).Elem(), OrgAccessTokenMap{})
	pulumi.RegisterOutputType(OrgAccessTokenOutput{})
	pulumi.RegisterOutputType(OrgAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(OrgAccessTokenMapOutput{})
}
