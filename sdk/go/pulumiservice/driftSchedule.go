// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A cron schedule to run drift detection.
//
// ### Import
//
// Drift schedules can be imported using the `id`, which for drift schedules is `{org}/{project}/{stack}/drift/{scheduleId}` e.g.,
//
// ```sh
//
//	$ pulumi import pulumiservice:index:DriftSchedule my_drift_schedule my-org/my-project/my-stack/drift/sched-456
//
// ```
type DriftSchedule struct {
	pulumi.CustomResourceState

	// Whether any drift detected should be remediated after a drift run.
	AutoRemediate pulumi.BoolPtrOutput `pulumi:"autoRemediate"`
	// Organization name.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Project name.
	Project pulumi.StringOutput `pulumi:"project"`
	// Cron expression for when to run drift detection.
	ScheduleCron pulumi.StringOutput `pulumi:"scheduleCron"`
	// Schedule ID of the created schedule, assigned by Pulumi Cloud.
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
	// Stack name.
	Stack pulumi.StringOutput `pulumi:"stack"`
}

// NewDriftSchedule registers a new resource with the given unique name, arguments, and options.
func NewDriftSchedule(ctx *pulumi.Context,
	name string, args *DriftScheduleArgs, opts ...pulumi.ResourceOption) (*DriftSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ScheduleCron == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleCron'")
	}
	if args.Stack == nil {
		return nil, errors.New("invalid value for required argument 'Stack'")
	}
	if args.AutoRemediate == nil {
		args.AutoRemediate = pulumi.BoolPtr(false)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DriftSchedule
	err := ctx.RegisterResource("pulumiservice:index:DriftSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDriftSchedule gets an existing DriftSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDriftSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DriftScheduleState, opts ...pulumi.ResourceOption) (*DriftSchedule, error) {
	var resource DriftSchedule
	err := ctx.ReadResource("pulumiservice:index:DriftSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DriftSchedule resources.
type driftScheduleState struct {
}

type DriftScheduleState struct {
}

func (DriftScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*driftScheduleState)(nil)).Elem()
}

type driftScheduleArgs struct {
	// Whether any drift detected should be remediated after a drift run.
	AutoRemediate *bool `pulumi:"autoRemediate"`
	// Organization name.
	Organization string `pulumi:"organization"`
	// Project name.
	Project string `pulumi:"project"`
	// Cron expression for when to run drift detection.
	ScheduleCron string `pulumi:"scheduleCron"`
	// Stack name.
	Stack string `pulumi:"stack"`
}

// The set of arguments for constructing a DriftSchedule resource.
type DriftScheduleArgs struct {
	// Whether any drift detected should be remediated after a drift run.
	AutoRemediate pulumi.BoolPtrInput
	// Organization name.
	Organization pulumi.StringInput
	// Project name.
	Project pulumi.StringInput
	// Cron expression for when to run drift detection.
	ScheduleCron pulumi.StringInput
	// Stack name.
	Stack pulumi.StringInput
}

func (DriftScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*driftScheduleArgs)(nil)).Elem()
}

type DriftScheduleInput interface {
	pulumi.Input

	ToDriftScheduleOutput() DriftScheduleOutput
	ToDriftScheduleOutputWithContext(ctx context.Context) DriftScheduleOutput
}

func (*DriftSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**DriftSchedule)(nil)).Elem()
}

func (i *DriftSchedule) ToDriftScheduleOutput() DriftScheduleOutput {
	return i.ToDriftScheduleOutputWithContext(context.Background())
}

func (i *DriftSchedule) ToDriftScheduleOutputWithContext(ctx context.Context) DriftScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriftScheduleOutput)
}

// DriftScheduleArrayInput is an input type that accepts DriftScheduleArray and DriftScheduleArrayOutput values.
// You can construct a concrete instance of `DriftScheduleArrayInput` via:
//
//	DriftScheduleArray{ DriftScheduleArgs{...} }
type DriftScheduleArrayInput interface {
	pulumi.Input

	ToDriftScheduleArrayOutput() DriftScheduleArrayOutput
	ToDriftScheduleArrayOutputWithContext(context.Context) DriftScheduleArrayOutput
}

type DriftScheduleArray []DriftScheduleInput

func (DriftScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DriftSchedule)(nil)).Elem()
}

func (i DriftScheduleArray) ToDriftScheduleArrayOutput() DriftScheduleArrayOutput {
	return i.ToDriftScheduleArrayOutputWithContext(context.Background())
}

func (i DriftScheduleArray) ToDriftScheduleArrayOutputWithContext(ctx context.Context) DriftScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriftScheduleArrayOutput)
}

// DriftScheduleMapInput is an input type that accepts DriftScheduleMap and DriftScheduleMapOutput values.
// You can construct a concrete instance of `DriftScheduleMapInput` via:
//
//	DriftScheduleMap{ "key": DriftScheduleArgs{...} }
type DriftScheduleMapInput interface {
	pulumi.Input

	ToDriftScheduleMapOutput() DriftScheduleMapOutput
	ToDriftScheduleMapOutputWithContext(context.Context) DriftScheduleMapOutput
}

type DriftScheduleMap map[string]DriftScheduleInput

func (DriftScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DriftSchedule)(nil)).Elem()
}

func (i DriftScheduleMap) ToDriftScheduleMapOutput() DriftScheduleMapOutput {
	return i.ToDriftScheduleMapOutputWithContext(context.Background())
}

func (i DriftScheduleMap) ToDriftScheduleMapOutputWithContext(ctx context.Context) DriftScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriftScheduleMapOutput)
}

type DriftScheduleOutput struct{ *pulumi.OutputState }

func (DriftScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DriftSchedule)(nil)).Elem()
}

func (o DriftScheduleOutput) ToDriftScheduleOutput() DriftScheduleOutput {
	return o
}

func (o DriftScheduleOutput) ToDriftScheduleOutputWithContext(ctx context.Context) DriftScheduleOutput {
	return o
}

// Whether any drift detected should be remediated after a drift run.
func (o DriftScheduleOutput) AutoRemediate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DriftSchedule) pulumi.BoolPtrOutput { return v.AutoRemediate }).(pulumi.BoolPtrOutput)
}

// Organization name.
func (o DriftScheduleOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *DriftSchedule) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Project name.
func (o DriftScheduleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DriftSchedule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Cron expression for when to run drift detection.
func (o DriftScheduleOutput) ScheduleCron() pulumi.StringOutput {
	return o.ApplyT(func(v *DriftSchedule) pulumi.StringOutput { return v.ScheduleCron }).(pulumi.StringOutput)
}

// Schedule ID of the created schedule, assigned by Pulumi Cloud.
func (o DriftScheduleOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *DriftSchedule) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

// Stack name.
func (o DriftScheduleOutput) Stack() pulumi.StringOutput {
	return o.ApplyT(func(v *DriftSchedule) pulumi.StringOutput { return v.Stack }).(pulumi.StringOutput)
}

type DriftScheduleArrayOutput struct{ *pulumi.OutputState }

func (DriftScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DriftSchedule)(nil)).Elem()
}

func (o DriftScheduleArrayOutput) ToDriftScheduleArrayOutput() DriftScheduleArrayOutput {
	return o
}

func (o DriftScheduleArrayOutput) ToDriftScheduleArrayOutputWithContext(ctx context.Context) DriftScheduleArrayOutput {
	return o
}

func (o DriftScheduleArrayOutput) Index(i pulumi.IntInput) DriftScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DriftSchedule {
		return vs[0].([]*DriftSchedule)[vs[1].(int)]
	}).(DriftScheduleOutput)
}

type DriftScheduleMapOutput struct{ *pulumi.OutputState }

func (DriftScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DriftSchedule)(nil)).Elem()
}

func (o DriftScheduleMapOutput) ToDriftScheduleMapOutput() DriftScheduleMapOutput {
	return o
}

func (o DriftScheduleMapOutput) ToDriftScheduleMapOutputWithContext(ctx context.Context) DriftScheduleMapOutput {
	return o
}

func (o DriftScheduleMapOutput) MapIndex(k pulumi.StringInput) DriftScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DriftSchedule {
		return vs[0].(map[string]*DriftSchedule)[vs[1].(string)]
	}).(DriftScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DriftScheduleInput)(nil)).Elem(), &DriftSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriftScheduleArrayInput)(nil)).Elem(), DriftScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriftScheduleMapInput)(nil)).Elem(), DriftScheduleMap{})
	pulumi.RegisterOutputType(DriftScheduleOutput{})
	pulumi.RegisterOutputType(DriftScheduleArrayOutput{})
	pulumi.RegisterOutputType(DriftScheduleMapOutput{})
}
