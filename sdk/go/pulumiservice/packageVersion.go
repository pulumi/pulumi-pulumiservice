// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A published package version in the Pulumi Registry. Packages are typically published via `pulumi publish` CLI, but this resource allows managing published packages declaratively, including publishing from uploaded artifacts and managing the lifecycle of published versions.
type PackageVersion struct {
	pulumi.CustomResourceState

	// The category of the package.
	Category pulumi.StringPtrOutput `pulumi:"category"`
	// The date and time the package version was created (output).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the package.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The index.json content for the package.
	IndexContent pulumi.StringOutput `pulumi:"indexContent"`
	// The installation-configuration.json content for the package.
	InstallationConfigContent pulumi.StringOutput `pulumi:"installationConfigContent"`
	// The URL of the logo for the package.
	LogoUrl pulumi.StringPtrOutput `pulumi:"logoUrl"`
	// The name of the package.
	Name pulumi.StringOutput `pulumi:"name"`
	// The maturity level of the package.
	PackageStatus pulumi.StringOutput `pulumi:"packageStatus"`
	// The URL to download the plugin at (output).
	PluginDownloadURL pulumi.StringPtrOutput `pulumi:"pluginDownloadURL"`
	// The publisher of the package (typically the organization name).
	Publisher pulumi.StringOutput `pulumi:"publisher"`
	// The URL of the readme for the package (output).
	ReadmeURL pulumi.StringOutput `pulumi:"readmeURL"`
	// The URL of the repository the package is hosted in.
	RepoUrl pulumi.StringPtrOutput `pulumi:"repoUrl"`
	// The schema.json content for the package.
	SchemaContent pulumi.StringOutput `pulumi:"schemaContent"`
	// The URL of the schema for the package (output).
	SchemaURL pulumi.StringOutput `pulumi:"schemaURL"`
	// The source of the package (e.g., 'pulumi').
	Source pulumi.StringOutput `pulumi:"source"`
	// The title/display name of the package.
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// The version of the package in semver format.
	Version pulumi.StringOutput `pulumi:"version"`
	// The visibility of the package.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewPackageVersion registers a new resource with the given unique name, arguments, and options.
func NewPackageVersion(ctx *pulumi.Context,
	name string, args *PackageVersionArgs, opts ...pulumi.ResourceOption) (*PackageVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IndexContent == nil {
		return nil, errors.New("invalid value for required argument 'IndexContent'")
	}
	if args.InstallationConfigContent == nil {
		return nil, errors.New("invalid value for required argument 'InstallationConfigContent'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Publisher == nil {
		return nil, errors.New("invalid value for required argument 'Publisher'")
	}
	if args.SchemaContent == nil {
		return nil, errors.New("invalid value for required argument 'SchemaContent'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.PackageStatus == nil {
		args.PackageStatus = pulumi.StringPtr("ga")
	}
	if args.Visibility == nil {
		args.Visibility = pulumi.StringPtr("private")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PackageVersion
	err := ctx.RegisterResource("pulumiservice:index:PackageVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPackageVersion gets an existing PackageVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPackageVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PackageVersionState, opts ...pulumi.ResourceOption) (*PackageVersion, error) {
	var resource PackageVersion
	err := ctx.ReadResource("pulumiservice:index:PackageVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PackageVersion resources.
type packageVersionState struct {
}

type PackageVersionState struct {
}

func (PackageVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*packageVersionState)(nil)).Elem()
}

type packageVersionArgs struct {
	// The category of the package.
	Category *string `pulumi:"category"`
	// The description of the package.
	Description *string `pulumi:"description"`
	// The index.json content for the package. This file contains the API documentation index.
	IndexContent string `pulumi:"indexContent"`
	// The installation-configuration.json content for the package. This file contains configuration for installing the package.
	InstallationConfigContent string `pulumi:"installationConfigContent"`
	// The URL of the logo for the package.
	LogoUrl *string `pulumi:"logoUrl"`
	// The name of the package.
	Name string `pulumi:"name"`
	// The maturity level of the package (e.g., 'ga', 'public_preview').
	PackageStatus *string `pulumi:"packageStatus"`
	// The publisher of the package (typically the organization name).
	Publisher string `pulumi:"publisher"`
	// The URL of the repository the package is hosted in.
	RepoUrl *string `pulumi:"repoUrl"`
	// The schema.json content for the package. This is the Pulumi package schema that defines the resources, functions, and types provided by the package.
	SchemaContent string `pulumi:"schemaContent"`
	// The source of the package (e.g., 'pulumi').
	Source string `pulumi:"source"`
	// The title/display name of the package.
	Title *string `pulumi:"title"`
	// The version of the package in semver format.
	Version string `pulumi:"version"`
	// The visibility of the package ('public' or 'private').
	Visibility *string `pulumi:"visibility"`
}

// The set of arguments for constructing a PackageVersion resource.
type PackageVersionArgs struct {
	// The category of the package.
	Category pulumi.StringPtrInput
	// The description of the package.
	Description pulumi.StringPtrInput
	// The index.json content for the package. This file contains the API documentation index.
	IndexContent pulumi.StringInput
	// The installation-configuration.json content for the package. This file contains configuration for installing the package.
	InstallationConfigContent pulumi.StringInput
	// The URL of the logo for the package.
	LogoUrl pulumi.StringPtrInput
	// The name of the package.
	Name pulumi.StringInput
	// The maturity level of the package (e.g., 'ga', 'public_preview').
	PackageStatus pulumi.StringPtrInput
	// The publisher of the package (typically the organization name).
	Publisher pulumi.StringInput
	// The URL of the repository the package is hosted in.
	RepoUrl pulumi.StringPtrInput
	// The schema.json content for the package. This is the Pulumi package schema that defines the resources, functions, and types provided by the package.
	SchemaContent pulumi.StringInput
	// The source of the package (e.g., 'pulumi').
	Source pulumi.StringInput
	// The title/display name of the package.
	Title pulumi.StringPtrInput
	// The version of the package in semver format.
	Version pulumi.StringInput
	// The visibility of the package ('public' or 'private').
	Visibility pulumi.StringPtrInput
}

func (PackageVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packageVersionArgs)(nil)).Elem()
}

type PackageVersionInput interface {
	pulumi.Input

	ToPackageVersionOutput() PackageVersionOutput
	ToPackageVersionOutputWithContext(ctx context.Context) PackageVersionOutput
}

func (*PackageVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageVersion)(nil)).Elem()
}

func (i *PackageVersion) ToPackageVersionOutput() PackageVersionOutput {
	return i.ToPackageVersionOutputWithContext(context.Background())
}

func (i *PackageVersion) ToPackageVersionOutputWithContext(ctx context.Context) PackageVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageVersionOutput)
}

// PackageVersionArrayInput is an input type that accepts PackageVersionArray and PackageVersionArrayOutput values.
// You can construct a concrete instance of `PackageVersionArrayInput` via:
//
//	PackageVersionArray{ PackageVersionArgs{...} }
type PackageVersionArrayInput interface {
	pulumi.Input

	ToPackageVersionArrayOutput() PackageVersionArrayOutput
	ToPackageVersionArrayOutputWithContext(context.Context) PackageVersionArrayOutput
}

type PackageVersionArray []PackageVersionInput

func (PackageVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PackageVersion)(nil)).Elem()
}

func (i PackageVersionArray) ToPackageVersionArrayOutput() PackageVersionArrayOutput {
	return i.ToPackageVersionArrayOutputWithContext(context.Background())
}

func (i PackageVersionArray) ToPackageVersionArrayOutputWithContext(ctx context.Context) PackageVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageVersionArrayOutput)
}

// PackageVersionMapInput is an input type that accepts PackageVersionMap and PackageVersionMapOutput values.
// You can construct a concrete instance of `PackageVersionMapInput` via:
//
//	PackageVersionMap{ "key": PackageVersionArgs{...} }
type PackageVersionMapInput interface {
	pulumi.Input

	ToPackageVersionMapOutput() PackageVersionMapOutput
	ToPackageVersionMapOutputWithContext(context.Context) PackageVersionMapOutput
}

type PackageVersionMap map[string]PackageVersionInput

func (PackageVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PackageVersion)(nil)).Elem()
}

func (i PackageVersionMap) ToPackageVersionMapOutput() PackageVersionMapOutput {
	return i.ToPackageVersionMapOutputWithContext(context.Background())
}

func (i PackageVersionMap) ToPackageVersionMapOutputWithContext(ctx context.Context) PackageVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageVersionMapOutput)
}

type PackageVersionOutput struct{ *pulumi.OutputState }

func (PackageVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageVersion)(nil)).Elem()
}

func (o PackageVersionOutput) ToPackageVersionOutput() PackageVersionOutput {
	return o
}

func (o PackageVersionOutput) ToPackageVersionOutputWithContext(ctx context.Context) PackageVersionOutput {
	return o
}

// The category of the package.
func (o PackageVersionOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

// The date and time the package version was created (output).
func (o PackageVersionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the package.
func (o PackageVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The index.json content for the package.
func (o PackageVersionOutput) IndexContent() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.IndexContent }).(pulumi.StringOutput)
}

// The installation-configuration.json content for the package.
func (o PackageVersionOutput) InstallationConfigContent() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.InstallationConfigContent }).(pulumi.StringOutput)
}

// The URL of the logo for the package.
func (o PackageVersionOutput) LogoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringPtrOutput { return v.LogoUrl }).(pulumi.StringPtrOutput)
}

// The name of the package.
func (o PackageVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The maturity level of the package.
func (o PackageVersionOutput) PackageStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.PackageStatus }).(pulumi.StringOutput)
}

// The URL to download the plugin at (output).
func (o PackageVersionOutput) PluginDownloadURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringPtrOutput { return v.PluginDownloadURL }).(pulumi.StringPtrOutput)
}

// The publisher of the package (typically the organization name).
func (o PackageVersionOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.Publisher }).(pulumi.StringOutput)
}

// The URL of the readme for the package (output).
func (o PackageVersionOutput) ReadmeURL() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.ReadmeURL }).(pulumi.StringOutput)
}

// The URL of the repository the package is hosted in.
func (o PackageVersionOutput) RepoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringPtrOutput { return v.RepoUrl }).(pulumi.StringPtrOutput)
}

// The schema.json content for the package.
func (o PackageVersionOutput) SchemaContent() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.SchemaContent }).(pulumi.StringOutput)
}

// The URL of the schema for the package (output).
func (o PackageVersionOutput) SchemaURL() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.SchemaURL }).(pulumi.StringOutput)
}

// The source of the package (e.g., 'pulumi').
func (o PackageVersionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The title/display name of the package.
func (o PackageVersionOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// The version of the package in semver format.
func (o PackageVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The visibility of the package.
func (o PackageVersionOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type PackageVersionArrayOutput struct{ *pulumi.OutputState }

func (PackageVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PackageVersion)(nil)).Elem()
}

func (o PackageVersionArrayOutput) ToPackageVersionArrayOutput() PackageVersionArrayOutput {
	return o
}

func (o PackageVersionArrayOutput) ToPackageVersionArrayOutputWithContext(ctx context.Context) PackageVersionArrayOutput {
	return o
}

func (o PackageVersionArrayOutput) Index(i pulumi.IntInput) PackageVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PackageVersion {
		return vs[0].([]*PackageVersion)[vs[1].(int)]
	}).(PackageVersionOutput)
}

type PackageVersionMapOutput struct{ *pulumi.OutputState }

func (PackageVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PackageVersion)(nil)).Elem()
}

func (o PackageVersionMapOutput) ToPackageVersionMapOutput() PackageVersionMapOutput {
	return o
}

func (o PackageVersionMapOutput) ToPackageVersionMapOutputWithContext(ctx context.Context) PackageVersionMapOutput {
	return o
}

func (o PackageVersionMapOutput) MapIndex(k pulumi.StringInput) PackageVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PackageVersion {
		return vs[0].(map[string]*PackageVersion)[vs[1].(string)]
	}).(PackageVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PackageVersionInput)(nil)).Elem(), &PackageVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageVersionArrayInput)(nil)).Elem(), PackageVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageVersionMapInput)(nil)).Elem(), PackageVersionMap{})
	pulumi.RegisterOutputType(PackageVersionOutput{})
	pulumi.RegisterOutputType(PackageVersionArrayOutput{})
	pulumi.RegisterOutputType(PackageVersionMapOutput{})
}
