// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Stacks have associated metadata in the form of tags. Each tag consists of a name and value.
//
// ### Import
//
// Stack tags can be imported using the `id`, which for stack tags is `{org}/{project}/{stack}/{tagName}` e.g.,
//
// ```sh
//
//	$ pulumi import pulumiservice:index:StackTag my_tag my-org/my-project/my-stack/my-tag
//
// ```
type StackTag struct {
	pulumi.CustomResourceState

	// Name of the tag. The 'key' part of the key=value pair
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization name.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Project name.
	Project pulumi.StringOutput `pulumi:"project"`
	// Stack name.
	Stack pulumi.StringOutput `pulumi:"stack"`
	// Value of the tag. The 'value' part of the key=value pair
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewStackTag registers a new resource with the given unique name, arguments, and options.
func NewStackTag(ctx *pulumi.Context,
	name string, args *StackTagArgs, opts ...pulumi.ResourceOption) (*StackTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Stack == nil {
		return nil, errors.New("invalid value for required argument 'Stack'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StackTag
	err := ctx.RegisterResource("pulumiservice:index:StackTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackTag gets an existing StackTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackTagState, opts ...pulumi.ResourceOption) (*StackTag, error) {
	var resource StackTag
	err := ctx.ReadResource("pulumiservice:index:StackTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackTag resources.
type stackTagState struct {
}

type StackTagState struct {
}

func (StackTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackTagState)(nil)).Elem()
}

type stackTagArgs struct {
	// Name of the tag. The 'key' part of the key=value pair
	Name string `pulumi:"name"`
	// Organization name.
	Organization string `pulumi:"organization"`
	// Project name.
	Project string `pulumi:"project"`
	// Stack name.
	Stack string `pulumi:"stack"`
	// Value of the tag. The 'value' part of the key=value pair
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a StackTag resource.
type StackTagArgs struct {
	// Name of the tag. The 'key' part of the key=value pair
	Name pulumi.StringInput
	// Organization name.
	Organization pulumi.StringInput
	// Project name.
	Project pulumi.StringInput
	// Stack name.
	Stack pulumi.StringInput
	// Value of the tag. The 'value' part of the key=value pair
	Value pulumi.StringInput
}

func (StackTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackTagArgs)(nil)).Elem()
}

type StackTagInput interface {
	pulumi.Input

	ToStackTagOutput() StackTagOutput
	ToStackTagOutputWithContext(ctx context.Context) StackTagOutput
}

func (*StackTag) ElementType() reflect.Type {
	return reflect.TypeOf((**StackTag)(nil)).Elem()
}

func (i *StackTag) ToStackTagOutput() StackTagOutput {
	return i.ToStackTagOutputWithContext(context.Background())
}

func (i *StackTag) ToStackTagOutputWithContext(ctx context.Context) StackTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackTagOutput)
}

// StackTagArrayInput is an input type that accepts StackTagArray and StackTagArrayOutput values.
// You can construct a concrete instance of `StackTagArrayInput` via:
//
//	StackTagArray{ StackTagArgs{...} }
type StackTagArrayInput interface {
	pulumi.Input

	ToStackTagArrayOutput() StackTagArrayOutput
	ToStackTagArrayOutputWithContext(context.Context) StackTagArrayOutput
}

type StackTagArray []StackTagInput

func (StackTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackTag)(nil)).Elem()
}

func (i StackTagArray) ToStackTagArrayOutput() StackTagArrayOutput {
	return i.ToStackTagArrayOutputWithContext(context.Background())
}

func (i StackTagArray) ToStackTagArrayOutputWithContext(ctx context.Context) StackTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackTagArrayOutput)
}

// StackTagMapInput is an input type that accepts StackTagMap and StackTagMapOutput values.
// You can construct a concrete instance of `StackTagMapInput` via:
//
//	StackTagMap{ "key": StackTagArgs{...} }
type StackTagMapInput interface {
	pulumi.Input

	ToStackTagMapOutput() StackTagMapOutput
	ToStackTagMapOutputWithContext(context.Context) StackTagMapOutput
}

type StackTagMap map[string]StackTagInput

func (StackTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackTag)(nil)).Elem()
}

func (i StackTagMap) ToStackTagMapOutput() StackTagMapOutput {
	return i.ToStackTagMapOutputWithContext(context.Background())
}

func (i StackTagMap) ToStackTagMapOutputWithContext(ctx context.Context) StackTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackTagMapOutput)
}

type StackTagOutput struct{ *pulumi.OutputState }

func (StackTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackTag)(nil)).Elem()
}

func (o StackTagOutput) ToStackTagOutput() StackTagOutput {
	return o
}

func (o StackTagOutput) ToStackTagOutputWithContext(ctx context.Context) StackTagOutput {
	return o
}

// Name of the tag. The 'key' part of the key=value pair
func (o StackTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StackTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization name.
func (o StackTagOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *StackTag) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Project name.
func (o StackTagOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *StackTag) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Stack name.
func (o StackTagOutput) Stack() pulumi.StringOutput {
	return o.ApplyT(func(v *StackTag) pulumi.StringOutput { return v.Stack }).(pulumi.StringOutput)
}

// Value of the tag. The 'value' part of the key=value pair
func (o StackTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *StackTag) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type StackTagArrayOutput struct{ *pulumi.OutputState }

func (StackTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackTag)(nil)).Elem()
}

func (o StackTagArrayOutput) ToStackTagArrayOutput() StackTagArrayOutput {
	return o
}

func (o StackTagArrayOutput) ToStackTagArrayOutputWithContext(ctx context.Context) StackTagArrayOutput {
	return o
}

func (o StackTagArrayOutput) Index(i pulumi.IntInput) StackTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackTag {
		return vs[0].([]*StackTag)[vs[1].(int)]
	}).(StackTagOutput)
}

type StackTagMapOutput struct{ *pulumi.OutputState }

func (StackTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackTag)(nil)).Elem()
}

func (o StackTagMapOutput) ToStackTagMapOutput() StackTagMapOutput {
	return o
}

func (o StackTagMapOutput) ToStackTagMapOutputWithContext(ctx context.Context) StackTagMapOutput {
	return o
}

func (o StackTagMapOutput) MapIndex(k pulumi.StringInput) StackTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackTag {
		return vs[0].(map[string]*StackTag)[vs[1].(string)]
	}).(StackTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackTagInput)(nil)).Elem(), &StackTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackTagArrayInput)(nil)).Elem(), StackTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackTagMapInput)(nil)).Elem(), StackTagMap{})
	pulumi.RegisterOutputType(StackTagOutput{})
	pulumi.RegisterOutputType(StackTagArrayOutput{})
	pulumi.RegisterOutputType(StackTagMapOutput{})
}
