// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A task created in the Neo agent system for tracking user instructions and entity changes.
type NeoTask struct {
	pulumi.CustomResourceState

	// The exact user instruction for the task.
	Content pulumi.StringOutput `pulumi:"content"`
	// Entities to add in this task.
	EntityAdd TaskEntityArrayOutput `pulumi:"entityAdd"`
	// Entities to remove in this task.
	EntityRemove TaskEntityArrayOutput `pulumi:"entityRemove"`
	// The name of the organization.
	OrganizationName pulumi.StringOutput `pulumi:"organizationName"`
	// When the event occurred (ISO 8601 format).
	Timestamp pulumi.StringPtrOutput `pulumi:"timestamp"`
}

// NewNeoTask registers a new resource with the given unique name, arguments, and options.
func NewNeoTask(ctx *pulumi.Context,
	name string, args *NeoTaskArgs, opts ...pulumi.ResourceOption) (*NeoTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.OrganizationName == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NeoTask
	err := ctx.RegisterResource("pulumiservice:index:NeoTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNeoTask gets an existing NeoTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNeoTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NeoTaskState, opts ...pulumi.ResourceOption) (*NeoTask, error) {
	var resource NeoTask
	err := ctx.ReadResource("pulumiservice:index:NeoTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NeoTask resources.
type neoTaskState struct {
}

type NeoTaskState struct {
}

func (NeoTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*neoTaskState)(nil)).Elem()
}

type neoTaskArgs struct {
	// The exact user instruction for the task.
	Content string `pulumi:"content"`
	// Entities to add in this task.
	EntityAdd []TaskEntity `pulumi:"entityAdd"`
	// Entities to remove in this task.
	EntityRemove []TaskEntity `pulumi:"entityRemove"`
	// The name of the organization.
	OrganizationName string `pulumi:"organizationName"`
	// When the event occurred (ISO 8601 format). Defaults to current time if not specified.
	Timestamp *string `pulumi:"timestamp"`
}

// The set of arguments for constructing a NeoTask resource.
type NeoTaskArgs struct {
	// The exact user instruction for the task.
	Content pulumi.StringInput
	// Entities to add in this task.
	EntityAdd TaskEntityArrayInput
	// Entities to remove in this task.
	EntityRemove TaskEntityArrayInput
	// The name of the organization.
	OrganizationName pulumi.StringInput
	// When the event occurred (ISO 8601 format). Defaults to current time if not specified.
	Timestamp pulumi.StringPtrInput
}

func (NeoTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*neoTaskArgs)(nil)).Elem()
}

type NeoTaskInput interface {
	pulumi.Input

	ToNeoTaskOutput() NeoTaskOutput
	ToNeoTaskOutputWithContext(ctx context.Context) NeoTaskOutput
}

func (*NeoTask) ElementType() reflect.Type {
	return reflect.TypeOf((**NeoTask)(nil)).Elem()
}

func (i *NeoTask) ToNeoTaskOutput() NeoTaskOutput {
	return i.ToNeoTaskOutputWithContext(context.Background())
}

func (i *NeoTask) ToNeoTaskOutputWithContext(ctx context.Context) NeoTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeoTaskOutput)
}

// NeoTaskArrayInput is an input type that accepts NeoTaskArray and NeoTaskArrayOutput values.
// You can construct a concrete instance of `NeoTaskArrayInput` via:
//
//	NeoTaskArray{ NeoTaskArgs{...} }
type NeoTaskArrayInput interface {
	pulumi.Input

	ToNeoTaskArrayOutput() NeoTaskArrayOutput
	ToNeoTaskArrayOutputWithContext(context.Context) NeoTaskArrayOutput
}

type NeoTaskArray []NeoTaskInput

func (NeoTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NeoTask)(nil)).Elem()
}

func (i NeoTaskArray) ToNeoTaskArrayOutput() NeoTaskArrayOutput {
	return i.ToNeoTaskArrayOutputWithContext(context.Background())
}

func (i NeoTaskArray) ToNeoTaskArrayOutputWithContext(ctx context.Context) NeoTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeoTaskArrayOutput)
}

// NeoTaskMapInput is an input type that accepts NeoTaskMap and NeoTaskMapOutput values.
// You can construct a concrete instance of `NeoTaskMapInput` via:
//
//	NeoTaskMap{ "key": NeoTaskArgs{...} }
type NeoTaskMapInput interface {
	pulumi.Input

	ToNeoTaskMapOutput() NeoTaskMapOutput
	ToNeoTaskMapOutputWithContext(context.Context) NeoTaskMapOutput
}

type NeoTaskMap map[string]NeoTaskInput

func (NeoTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NeoTask)(nil)).Elem()
}

func (i NeoTaskMap) ToNeoTaskMapOutput() NeoTaskMapOutput {
	return i.ToNeoTaskMapOutputWithContext(context.Background())
}

func (i NeoTaskMap) ToNeoTaskMapOutputWithContext(ctx context.Context) NeoTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeoTaskMapOutput)
}

type NeoTaskOutput struct{ *pulumi.OutputState }

func (NeoTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NeoTask)(nil)).Elem()
}

func (o NeoTaskOutput) ToNeoTaskOutput() NeoTaskOutput {
	return o
}

func (o NeoTaskOutput) ToNeoTaskOutputWithContext(ctx context.Context) NeoTaskOutput {
	return o
}

// The exact user instruction for the task.
func (o NeoTaskOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *NeoTask) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Entities to add in this task.
func (o NeoTaskOutput) EntityAdd() TaskEntityArrayOutput {
	return o.ApplyT(func(v *NeoTask) TaskEntityArrayOutput { return v.EntityAdd }).(TaskEntityArrayOutput)
}

// Entities to remove in this task.
func (o NeoTaskOutput) EntityRemove() TaskEntityArrayOutput {
	return o.ApplyT(func(v *NeoTask) TaskEntityArrayOutput { return v.EntityRemove }).(TaskEntityArrayOutput)
}

// The name of the organization.
func (o NeoTaskOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v *NeoTask) pulumi.StringOutput { return v.OrganizationName }).(pulumi.StringOutput)
}

// When the event occurred (ISO 8601 format).
func (o NeoTaskOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NeoTask) pulumi.StringPtrOutput { return v.Timestamp }).(pulumi.StringPtrOutput)
}

type NeoTaskArrayOutput struct{ *pulumi.OutputState }

func (NeoTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NeoTask)(nil)).Elem()
}

func (o NeoTaskArrayOutput) ToNeoTaskArrayOutput() NeoTaskArrayOutput {
	return o
}

func (o NeoTaskArrayOutput) ToNeoTaskArrayOutputWithContext(ctx context.Context) NeoTaskArrayOutput {
	return o
}

func (o NeoTaskArrayOutput) Index(i pulumi.IntInput) NeoTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NeoTask {
		return vs[0].([]*NeoTask)[vs[1].(int)]
	}).(NeoTaskOutput)
}

type NeoTaskMapOutput struct{ *pulumi.OutputState }

func (NeoTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NeoTask)(nil)).Elem()
}

func (o NeoTaskMapOutput) ToNeoTaskMapOutput() NeoTaskMapOutput {
	return o
}

func (o NeoTaskMapOutput) ToNeoTaskMapOutputWithContext(ctx context.Context) NeoTaskMapOutput {
	return o
}

func (o NeoTaskMapOutput) MapIndex(k pulumi.StringInput) NeoTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NeoTask {
		return vs[0].(map[string]*NeoTask)[vs[1].(string)]
	}).(NeoTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NeoTaskInput)(nil)).Elem(), &NeoTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*NeoTaskArrayInput)(nil)).Elem(), NeoTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NeoTaskMapInput)(nil)).Elem(), NeoTaskMap{})
	pulumi.RegisterOutputType(NeoTaskOutput{})
	pulumi.RegisterOutputType(NeoTaskArrayOutput{})
	pulumi.RegisterOutputType(NeoTaskMapOutput{})
}
