// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Grants a team permissions to the specified stack.
type TeamStackPermission struct {
	pulumi.CustomResourceState
}

// NewTeamStackPermission registers a new resource with the given unique name, arguments, and options.
func NewTeamStackPermission(ctx *pulumi.Context,
	name string, args *TeamStackPermissionArgs, opts ...pulumi.ResourceOption) (*TeamStackPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Stack == nil {
		return nil, errors.New("invalid value for required argument 'Stack'")
	}
	if args.Team == nil {
		return nil, errors.New("invalid value for required argument 'Team'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamStackPermission
	err := ctx.RegisterResource("pulumiservice:index:TeamStackPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamStackPermission gets an existing TeamStackPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamStackPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamStackPermissionState, opts ...pulumi.ResourceOption) (*TeamStackPermission, error) {
	var resource TeamStackPermission
	err := ctx.ReadResource("pulumiservice:index:TeamStackPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamStackPermission resources.
type teamStackPermissionState struct {
}

type TeamStackPermissionState struct {
}

func (TeamStackPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamStackPermissionState)(nil)).Elem()
}

type teamStackPermissionArgs struct {
	// The organization or the personal account name of the stack.
	Organization string `pulumi:"organization"`
	// Sets the permission level that this team will be granted to the stack.
	Permission TeamStackPermissionScope `pulumi:"permission"`
	// The project name for this stack.
	Project string `pulumi:"project"`
	// The name of the stack that the team will be granted permissions to.
	Stack string `pulumi:"stack"`
	// The name of the team to grant this stack permissions to. This is not the display name.
	Team string `pulumi:"team"`
}

// The set of arguments for constructing a TeamStackPermission resource.
type TeamStackPermissionArgs struct {
	// The organization or the personal account name of the stack.
	Organization pulumi.StringInput
	// Sets the permission level that this team will be granted to the stack.
	Permission TeamStackPermissionScope
	// The project name for this stack.
	Project pulumi.StringInput
	// The name of the stack that the team will be granted permissions to.
	Stack pulumi.StringInput
	// The name of the team to grant this stack permissions to. This is not the display name.
	Team pulumi.StringInput
}

func (TeamStackPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamStackPermissionArgs)(nil)).Elem()
}

type TeamStackPermissionInput interface {
	pulumi.Input

	ToTeamStackPermissionOutput() TeamStackPermissionOutput
	ToTeamStackPermissionOutputWithContext(ctx context.Context) TeamStackPermissionOutput
}

func (*TeamStackPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamStackPermission)(nil)).Elem()
}

func (i *TeamStackPermission) ToTeamStackPermissionOutput() TeamStackPermissionOutput {
	return i.ToTeamStackPermissionOutputWithContext(context.Background())
}

func (i *TeamStackPermission) ToTeamStackPermissionOutputWithContext(ctx context.Context) TeamStackPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamStackPermissionOutput)
}

// TeamStackPermissionArrayInput is an input type that accepts TeamStackPermissionArray and TeamStackPermissionArrayOutput values.
// You can construct a concrete instance of `TeamStackPermissionArrayInput` via:
//
//	TeamStackPermissionArray{ TeamStackPermissionArgs{...} }
type TeamStackPermissionArrayInput interface {
	pulumi.Input

	ToTeamStackPermissionArrayOutput() TeamStackPermissionArrayOutput
	ToTeamStackPermissionArrayOutputWithContext(context.Context) TeamStackPermissionArrayOutput
}

type TeamStackPermissionArray []TeamStackPermissionInput

func (TeamStackPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamStackPermission)(nil)).Elem()
}

func (i TeamStackPermissionArray) ToTeamStackPermissionArrayOutput() TeamStackPermissionArrayOutput {
	return i.ToTeamStackPermissionArrayOutputWithContext(context.Background())
}

func (i TeamStackPermissionArray) ToTeamStackPermissionArrayOutputWithContext(ctx context.Context) TeamStackPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamStackPermissionArrayOutput)
}

// TeamStackPermissionMapInput is an input type that accepts TeamStackPermissionMap and TeamStackPermissionMapOutput values.
// You can construct a concrete instance of `TeamStackPermissionMapInput` via:
//
//	TeamStackPermissionMap{ "key": TeamStackPermissionArgs{...} }
type TeamStackPermissionMapInput interface {
	pulumi.Input

	ToTeamStackPermissionMapOutput() TeamStackPermissionMapOutput
	ToTeamStackPermissionMapOutputWithContext(context.Context) TeamStackPermissionMapOutput
}

type TeamStackPermissionMap map[string]TeamStackPermissionInput

func (TeamStackPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamStackPermission)(nil)).Elem()
}

func (i TeamStackPermissionMap) ToTeamStackPermissionMapOutput() TeamStackPermissionMapOutput {
	return i.ToTeamStackPermissionMapOutputWithContext(context.Background())
}

func (i TeamStackPermissionMap) ToTeamStackPermissionMapOutputWithContext(ctx context.Context) TeamStackPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamStackPermissionMapOutput)
}

type TeamStackPermissionOutput struct{ *pulumi.OutputState }

func (TeamStackPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamStackPermission)(nil)).Elem()
}

func (o TeamStackPermissionOutput) ToTeamStackPermissionOutput() TeamStackPermissionOutput {
	return o
}

func (o TeamStackPermissionOutput) ToTeamStackPermissionOutputWithContext(ctx context.Context) TeamStackPermissionOutput {
	return o
}

type TeamStackPermissionArrayOutput struct{ *pulumi.OutputState }

func (TeamStackPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamStackPermission)(nil)).Elem()
}

func (o TeamStackPermissionArrayOutput) ToTeamStackPermissionArrayOutput() TeamStackPermissionArrayOutput {
	return o
}

func (o TeamStackPermissionArrayOutput) ToTeamStackPermissionArrayOutputWithContext(ctx context.Context) TeamStackPermissionArrayOutput {
	return o
}

func (o TeamStackPermissionArrayOutput) Index(i pulumi.IntInput) TeamStackPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamStackPermission {
		return vs[0].([]*TeamStackPermission)[vs[1].(int)]
	}).(TeamStackPermissionOutput)
}

type TeamStackPermissionMapOutput struct{ *pulumi.OutputState }

func (TeamStackPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamStackPermission)(nil)).Elem()
}

func (o TeamStackPermissionMapOutput) ToTeamStackPermissionMapOutput() TeamStackPermissionMapOutput {
	return o
}

func (o TeamStackPermissionMapOutput) ToTeamStackPermissionMapOutputWithContext(ctx context.Context) TeamStackPermissionMapOutput {
	return o
}

func (o TeamStackPermissionMapOutput) MapIndex(k pulumi.StringInput) TeamStackPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamStackPermission {
		return vs[0].(map[string]*TeamStackPermission)[vs[1].(string)]
	}).(TeamStackPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamStackPermissionInput)(nil)).Elem(), &TeamStackPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamStackPermissionArrayInput)(nil)).Elem(), TeamStackPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamStackPermissionMapInput)(nil)).Elem(), TeamStackPermissionMap{})
	pulumi.RegisterOutputType(TeamStackPermissionOutput{})
	pulumi.RegisterOutputType(TeamStackPermissionArrayOutput{})
	pulumi.RegisterOutputType(TeamStackPermissionMapOutput{})
}
