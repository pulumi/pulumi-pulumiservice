// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a list of all stacks accessible by the authenticated user.
func GetStacks(ctx *pulumi.Context, args *GetStacksArgs, opts ...pulumi.InvokeOption) (*GetStacksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStacksResult
	err := ctx.Invoke("pulumiservice:index:getStacks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetStacksArgs struct {
	// Maximum number of stacks to return. If not specified, all stacks are returned.
	MaxResults *int `pulumi:"maxResults"`
}

type GetStacksResult struct {
	// Continuation token for pagination.
	ContinuationToken *string `pulumi:"continuationToken"`
	// List of accessible stacks.
	Stacks []map[string]string `pulumi:"stacks"`
}

func GetStacksOutput(ctx *pulumi.Context, args GetStacksOutputArgs, opts ...pulumi.InvokeOption) GetStacksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetStacksResultOutput, error) {
			args := v.(GetStacksArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetStacksResult
			secret, err := ctx.InvokePackageRaw("pulumiservice:index:getStacks", args, &rv, "", opts...)
			if err != nil {
				return GetStacksResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetStacksResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetStacksResultOutput), nil
			}
			return output, nil
		}).(GetStacksResultOutput)
}

type GetStacksOutputArgs struct {
	// Maximum number of stacks to return. If not specified, all stacks are returned.
	MaxResults pulumi.IntPtrInput `pulumi:"maxResults"`
}

func (GetStacksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStacksArgs)(nil)).Elem()
}

type GetStacksResultOutput struct{ *pulumi.OutputState }

func (GetStacksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStacksResult)(nil)).Elem()
}

func (o GetStacksResultOutput) ToGetStacksResultOutput() GetStacksResultOutput {
	return o
}

func (o GetStacksResultOutput) ToGetStacksResultOutputWithContext(ctx context.Context) GetStacksResultOutput {
	return o
}

// Continuation token for pagination.
func (o GetStacksResultOutput) ContinuationToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStacksResult) *string { return v.ContinuationToken }).(pulumi.StringPtrOutput)
}

// List of accessible stacks.
func (o GetStacksResultOutput) Stacks() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetStacksResult) []map[string]string { return v.Stacks }).(pulumi.StringMapArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStacksResultOutput{})
}
