// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages multiple stack tags as a single resource. Each tag consists of a name and value pair defined in the tags map.
type StackTags struct {
	pulumi.CustomResourceState

	// Organization name.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Project name.
	Project pulumi.StringOutput `pulumi:"project"`
	// Stack name.
	Stack pulumi.StringOutput `pulumi:"stack"`
	// Map of tag names to values. Each entry represents a stack tag.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewStackTags registers a new resource with the given unique name, arguments, and options.
func NewStackTags(ctx *pulumi.Context,
	name string, args *StackTagsArgs, opts ...pulumi.ResourceOption) (*StackTags, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Stack == nil {
		return nil, errors.New("invalid value for required argument 'Stack'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StackTags
	err := ctx.RegisterResource("pulumiservice:index:StackTags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackTags gets an existing StackTags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackTags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackTagsState, opts ...pulumi.ResourceOption) (*StackTags, error) {
	var resource StackTags
	err := ctx.ReadResource("pulumiservice:index:StackTags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackTags resources.
type stackTagsState struct {
}

type StackTagsState struct {
}

func (StackTagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackTagsState)(nil)).Elem()
}

type stackTagsArgs struct {
	// Organization name.
	Organization string `pulumi:"organization"`
	// Project name.
	Project string `pulumi:"project"`
	// Stack name.
	Stack string `pulumi:"stack"`
	// Map of tag names to values. Each entry represents a stack tag.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a StackTags resource.
type StackTagsArgs struct {
	// Organization name.
	Organization pulumi.StringInput
	// Project name.
	Project pulumi.StringInput
	// Stack name.
	Stack pulumi.StringInput
	// Map of tag names to values. Each entry represents a stack tag.
	Tags pulumi.StringMapInput
}

func (StackTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackTagsArgs)(nil)).Elem()
}

type StackTagsInput interface {
	pulumi.Input

	ToStackTagsOutput() StackTagsOutput
	ToStackTagsOutputWithContext(ctx context.Context) StackTagsOutput
}

func (*StackTags) ElementType() reflect.Type {
	return reflect.TypeOf((**StackTags)(nil)).Elem()
}

func (i *StackTags) ToStackTagsOutput() StackTagsOutput {
	return i.ToStackTagsOutputWithContext(context.Background())
}

func (i *StackTags) ToStackTagsOutputWithContext(ctx context.Context) StackTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackTagsOutput)
}

// StackTagsArrayInput is an input type that accepts StackTagsArray and StackTagsArrayOutput values.
// You can construct a concrete instance of `StackTagsArrayInput` via:
//
//	StackTagsArray{ StackTagsArgs{...} }
type StackTagsArrayInput interface {
	pulumi.Input

	ToStackTagsArrayOutput() StackTagsArrayOutput
	ToStackTagsArrayOutputWithContext(context.Context) StackTagsArrayOutput
}

type StackTagsArray []StackTagsInput

func (StackTagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackTags)(nil)).Elem()
}

func (i StackTagsArray) ToStackTagsArrayOutput() StackTagsArrayOutput {
	return i.ToStackTagsArrayOutputWithContext(context.Background())
}

func (i StackTagsArray) ToStackTagsArrayOutputWithContext(ctx context.Context) StackTagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackTagsArrayOutput)
}

// StackTagsMapInput is an input type that accepts StackTagsMap and StackTagsMapOutput values.
// You can construct a concrete instance of `StackTagsMapInput` via:
//
//	StackTagsMap{ "key": StackTagsArgs{...} }
type StackTagsMapInput interface {
	pulumi.Input

	ToStackTagsMapOutput() StackTagsMapOutput
	ToStackTagsMapOutputWithContext(context.Context) StackTagsMapOutput
}

type StackTagsMap map[string]StackTagsInput

func (StackTagsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackTags)(nil)).Elem()
}

func (i StackTagsMap) ToStackTagsMapOutput() StackTagsMapOutput {
	return i.ToStackTagsMapOutputWithContext(context.Background())
}

func (i StackTagsMap) ToStackTagsMapOutputWithContext(ctx context.Context) StackTagsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackTagsMapOutput)
}

type StackTagsOutput struct{ *pulumi.OutputState }

func (StackTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackTags)(nil)).Elem()
}

func (o StackTagsOutput) ToStackTagsOutput() StackTagsOutput {
	return o
}

func (o StackTagsOutput) ToStackTagsOutputWithContext(ctx context.Context) StackTagsOutput {
	return o
}

// Organization name.
func (o StackTagsOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *StackTags) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Project name.
func (o StackTagsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *StackTags) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Stack name.
func (o StackTagsOutput) Stack() pulumi.StringOutput {
	return o.ApplyT(func(v *StackTags) pulumi.StringOutput { return v.Stack }).(pulumi.StringOutput)
}

// Map of tag names to values. Each entry represents a stack tag.
func (o StackTagsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackTags) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type StackTagsArrayOutput struct{ *pulumi.OutputState }

func (StackTagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackTags)(nil)).Elem()
}

func (o StackTagsArrayOutput) ToStackTagsArrayOutput() StackTagsArrayOutput {
	return o
}

func (o StackTagsArrayOutput) ToStackTagsArrayOutputWithContext(ctx context.Context) StackTagsArrayOutput {
	return o
}

func (o StackTagsArrayOutput) Index(i pulumi.IntInput) StackTagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackTags {
		return vs[0].([]*StackTags)[vs[1].(int)]
	}).(StackTagsOutput)
}

type StackTagsMapOutput struct{ *pulumi.OutputState }

func (StackTagsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackTags)(nil)).Elem()
}

func (o StackTagsMapOutput) ToStackTagsMapOutput() StackTagsMapOutput {
	return o
}

func (o StackTagsMapOutput) ToStackTagsMapOutputWithContext(ctx context.Context) StackTagsMapOutput {
	return o
}

func (o StackTagsMapOutput) MapIndex(k pulumi.StringInput) StackTagsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackTags {
		return vs[0].(map[string]*StackTags)[vs[1].(string)]
	}).(StackTagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackTagsInput)(nil)).Elem(), &StackTags{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackTagsArrayInput)(nil)).Elem(), StackTagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackTagsMapInput)(nil)).Elem(), StackTagsMap{})
	pulumi.RegisterOutputType(StackTagsOutput{})
	pulumi.RegisterOutputType(StackTagsArrayOutput{})
	pulumi.RegisterOutputType(StackTagsMapOutput{})
}
