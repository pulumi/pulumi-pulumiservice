// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a list of teams that a specific user is a member of.
func GetTeamsForUser(ctx *pulumi.Context, args *GetTeamsForUserArgs, opts ...pulumi.InvokeOption) (*GetTeamsForUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTeamsForUserResult
	err := ctx.Invoke("pulumiservice:index:getTeamsForUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetTeamsForUserArgs struct {
	// The name of the Pulumi organization.
	OrganizationName string `pulumi:"organizationName"`
	// The username to search for. Matches against both name and GitHub login.
	UserName string `pulumi:"userName"`
}

type GetTeamsForUserResult struct {
	// List of teams where the user is a member.
	Teams []map[string]string `pulumi:"teams"`
}

func GetTeamsForUserOutput(ctx *pulumi.Context, args GetTeamsForUserOutputArgs, opts ...pulumi.InvokeOption) GetTeamsForUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTeamsForUserResultOutput, error) {
			args := v.(GetTeamsForUserArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetTeamsForUserResult
			secret, err := ctx.InvokePackageRaw("pulumiservice:index:getTeamsForUser", args, &rv, "", opts...)
			if err != nil {
				return GetTeamsForUserResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetTeamsForUserResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetTeamsForUserResultOutput), nil
			}
			return output, nil
		}).(GetTeamsForUserResultOutput)
}

type GetTeamsForUserOutputArgs struct {
	// The name of the Pulumi organization.
	OrganizationName pulumi.StringInput `pulumi:"organizationName"`
	// The username to search for. Matches against both name and GitHub login.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetTeamsForUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamsForUserArgs)(nil)).Elem()
}

type GetTeamsForUserResultOutput struct{ *pulumi.OutputState }

func (GetTeamsForUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamsForUserResult)(nil)).Elem()
}

func (o GetTeamsForUserResultOutput) ToGetTeamsForUserResultOutput() GetTeamsForUserResultOutput {
	return o
}

func (o GetTeamsForUserResultOutput) ToGetTeamsForUserResultOutputWithContext(ctx context.Context) GetTeamsForUserResultOutput {
	return o
}

// List of teams where the user is a member.
func (o GetTeamsForUserResultOutput) Teams() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetTeamsForUserResult) []map[string]string { return v.Teams }).(pulumi.StringMapArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTeamsForUserResultOutput{})
}
