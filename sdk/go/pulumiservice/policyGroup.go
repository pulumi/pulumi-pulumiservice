// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Policy Group allows you to apply policy packs to a set of stacks in your organization.
type PolicyGroup struct {
	pulumi.CustomResourceState

	// The entity type for the policy group. Valid values are 'stacks' or 'accounts'. Defaults to 'stacks'.
	EntityType pulumi.StringPtrOutput `pulumi:"entityType"`
	// The mode for the policy group. Valid values are 'audit' (reports violations) or 'preventative' (blocks operations). Defaults to 'audit'.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The name of the policy group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Pulumi organization the policy group belongs to.
	OrganizationName pulumi.StringOutput `pulumi:"organizationName"`
	// List of policy packs applied to this policy group.
	PolicyPacks pulumi.StringMapArrayOutput `pulumi:"policyPacks"`
	// List of stack references that belong to this policy group.
	Stacks pulumi.StringMapArrayOutput `pulumi:"stacks"`
}

// NewPolicyGroup registers a new resource with the given unique name, arguments, and options.
func NewPolicyGroup(ctx *pulumi.Context,
	name string, args *PolicyGroupArgs, opts ...pulumi.ResourceOption) (*PolicyGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.OrganizationName == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationName'")
	}
	if args.EntityType == nil {
		args.EntityType = pulumi.StringPtr("stacks")
	}
	if args.Mode == nil {
		args.Mode = pulumi.StringPtr("audit")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyGroup
	err := ctx.RegisterResource("pulumiservice:index:PolicyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyGroup gets an existing PolicyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyGroupState, opts ...pulumi.ResourceOption) (*PolicyGroup, error) {
	var resource PolicyGroup
	err := ctx.ReadResource("pulumiservice:index:PolicyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyGroup resources.
type policyGroupState struct {
}

type PolicyGroupState struct {
}

func (PolicyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyGroupState)(nil)).Elem()
}

type policyGroupArgs struct {
	// The entity type for the policy group. Valid values are 'stacks' or 'accounts'. Defaults to 'stacks'.
	EntityType *string `pulumi:"entityType"`
	// The mode for the policy group. Valid values are 'audit' (reports violations) or 'preventative' (blocks operations). Defaults to 'audit'.
	Mode *string `pulumi:"mode"`
	// The name of the policy group.
	Name string `pulumi:"name"`
	// The name of the Pulumi organization the policy group belongs to.
	OrganizationName string `pulumi:"organizationName"`
	// List of policy packs applied to this policy group.
	PolicyPacks []map[string]string `pulumi:"policyPacks"`
	// List of stack references that belong to this policy group.
	Stacks []map[string]string `pulumi:"stacks"`
}

// The set of arguments for constructing a PolicyGroup resource.
type PolicyGroupArgs struct {
	// The entity type for the policy group. Valid values are 'stacks' or 'accounts'. Defaults to 'stacks'.
	EntityType pulumi.StringPtrInput
	// The mode for the policy group. Valid values are 'audit' (reports violations) or 'preventative' (blocks operations). Defaults to 'audit'.
	Mode pulumi.StringPtrInput
	// The name of the policy group.
	Name pulumi.StringInput
	// The name of the Pulumi organization the policy group belongs to.
	OrganizationName pulumi.StringInput
	// List of policy packs applied to this policy group.
	PolicyPacks pulumi.StringMapArrayInput
	// List of stack references that belong to this policy group.
	Stacks pulumi.StringMapArrayInput
}

func (PolicyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyGroupArgs)(nil)).Elem()
}

type PolicyGroupInput interface {
	pulumi.Input

	ToPolicyGroupOutput() PolicyGroupOutput
	ToPolicyGroupOutputWithContext(ctx context.Context) PolicyGroupOutput
}

func (*PolicyGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyGroup)(nil)).Elem()
}

func (i *PolicyGroup) ToPolicyGroupOutput() PolicyGroupOutput {
	return i.ToPolicyGroupOutputWithContext(context.Background())
}

func (i *PolicyGroup) ToPolicyGroupOutputWithContext(ctx context.Context) PolicyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyGroupOutput)
}

// PolicyGroupArrayInput is an input type that accepts PolicyGroupArray and PolicyGroupArrayOutput values.
// You can construct a concrete instance of `PolicyGroupArrayInput` via:
//
//	PolicyGroupArray{ PolicyGroupArgs{...} }
type PolicyGroupArrayInput interface {
	pulumi.Input

	ToPolicyGroupArrayOutput() PolicyGroupArrayOutput
	ToPolicyGroupArrayOutputWithContext(context.Context) PolicyGroupArrayOutput
}

type PolicyGroupArray []PolicyGroupInput

func (PolicyGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyGroup)(nil)).Elem()
}

func (i PolicyGroupArray) ToPolicyGroupArrayOutput() PolicyGroupArrayOutput {
	return i.ToPolicyGroupArrayOutputWithContext(context.Background())
}

func (i PolicyGroupArray) ToPolicyGroupArrayOutputWithContext(ctx context.Context) PolicyGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyGroupArrayOutput)
}

// PolicyGroupMapInput is an input type that accepts PolicyGroupMap and PolicyGroupMapOutput values.
// You can construct a concrete instance of `PolicyGroupMapInput` via:
//
//	PolicyGroupMap{ "key": PolicyGroupArgs{...} }
type PolicyGroupMapInput interface {
	pulumi.Input

	ToPolicyGroupMapOutput() PolicyGroupMapOutput
	ToPolicyGroupMapOutputWithContext(context.Context) PolicyGroupMapOutput
}

type PolicyGroupMap map[string]PolicyGroupInput

func (PolicyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyGroup)(nil)).Elem()
}

func (i PolicyGroupMap) ToPolicyGroupMapOutput() PolicyGroupMapOutput {
	return i.ToPolicyGroupMapOutputWithContext(context.Background())
}

func (i PolicyGroupMap) ToPolicyGroupMapOutputWithContext(ctx context.Context) PolicyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyGroupMapOutput)
}

type PolicyGroupOutput struct{ *pulumi.OutputState }

func (PolicyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyGroup)(nil)).Elem()
}

func (o PolicyGroupOutput) ToPolicyGroupOutput() PolicyGroupOutput {
	return o
}

func (o PolicyGroupOutput) ToPolicyGroupOutputWithContext(ctx context.Context) PolicyGroupOutput {
	return o
}

// The entity type for the policy group. Valid values are 'stacks' or 'accounts'. Defaults to 'stacks'.
func (o PolicyGroupOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringPtrOutput { return v.EntityType }).(pulumi.StringPtrOutput)
}

// The mode for the policy group. Valid values are 'audit' (reports violations) or 'preventative' (blocks operations). Defaults to 'audit'.
func (o PolicyGroupOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the policy group.
func (o PolicyGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Pulumi organization the policy group belongs to.
func (o PolicyGroupOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringOutput { return v.OrganizationName }).(pulumi.StringOutput)
}

// List of policy packs applied to this policy group.
func (o PolicyGroupOutput) PolicyPacks() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringMapArrayOutput { return v.PolicyPacks }).(pulumi.StringMapArrayOutput)
}

// List of stack references that belong to this policy group.
func (o PolicyGroupOutput) Stacks() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringMapArrayOutput { return v.Stacks }).(pulumi.StringMapArrayOutput)
}

type PolicyGroupArrayOutput struct{ *pulumi.OutputState }

func (PolicyGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyGroup)(nil)).Elem()
}

func (o PolicyGroupArrayOutput) ToPolicyGroupArrayOutput() PolicyGroupArrayOutput {
	return o
}

func (o PolicyGroupArrayOutput) ToPolicyGroupArrayOutputWithContext(ctx context.Context) PolicyGroupArrayOutput {
	return o
}

func (o PolicyGroupArrayOutput) Index(i pulumi.IntInput) PolicyGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyGroup {
		return vs[0].([]*PolicyGroup)[vs[1].(int)]
	}).(PolicyGroupOutput)
}

type PolicyGroupMapOutput struct{ *pulumi.OutputState }

func (PolicyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyGroup)(nil)).Elem()
}

func (o PolicyGroupMapOutput) ToPolicyGroupMapOutput() PolicyGroupMapOutput {
	return o
}

func (o PolicyGroupMapOutput) ToPolicyGroupMapOutputWithContext(ctx context.Context) PolicyGroupMapOutput {
	return o
}

func (o PolicyGroupMapOutput) MapIndex(k pulumi.StringInput) PolicyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyGroup {
		return vs[0].(map[string]*PolicyGroup)[vs[1].(string)]
	}).(PolicyGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyGroupInput)(nil)).Elem(), &PolicyGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyGroupArrayInput)(nil)).Elem(), PolicyGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyGroupMapInput)(nil)).Elem(), PolicyGroupMap{})
	pulumi.RegisterOutputType(PolicyGroupOutput{})
	pulumi.RegisterOutputType(PolicyGroupArrayOutput{})
	pulumi.RegisterOutputType(PolicyGroupMapOutput{})
}
