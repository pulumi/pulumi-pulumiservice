// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A scheduled recurring or single time environment rotation.
type EnvironmentRotationSchedule struct {
	pulumi.CustomResourceState

	// Environment name.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Organization name.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Project name.
	Project pulumi.StringOutput `pulumi:"project"`
	// Cron expression for recurring scheduled rotations. If you are supplying this, do not supply timestamp.
	ScheduleCron pulumi.StringPtrOutput `pulumi:"scheduleCron"`
	// Schedule ID of the created rotation schedule, assigned by Pulumi Cloud.
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
	// The time at which the rotation should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
	Timestamp pulumi.StringPtrOutput `pulumi:"timestamp"`
}

// NewEnvironmentRotationSchedule registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentRotationSchedule(ctx *pulumi.Context,
	name string, args *EnvironmentRotationScheduleArgs, opts ...pulumi.ResourceOption) (*EnvironmentRotationSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentRotationSchedule
	err := ctx.RegisterResource("pulumiservice:index:EnvironmentRotationSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentRotationSchedule gets an existing EnvironmentRotationSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentRotationSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentRotationScheduleState, opts ...pulumi.ResourceOption) (*EnvironmentRotationSchedule, error) {
	var resource EnvironmentRotationSchedule
	err := ctx.ReadResource("pulumiservice:index:EnvironmentRotationSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentRotationSchedule resources.
type environmentRotationScheduleState struct {
}

type EnvironmentRotationScheduleState struct {
}

func (EnvironmentRotationScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentRotationScheduleState)(nil)).Elem()
}

type environmentRotationScheduleArgs struct {
	// Environment name.
	Environment string `pulumi:"environment"`
	// Organization name.
	Organization string `pulumi:"organization"`
	// Project name.
	Project string `pulumi:"project"`
	// Cron expression for recurring scheduled rotations. If you are supplying this, do not supply timestamp.
	ScheduleCron *string `pulumi:"scheduleCron"`
	// The time at which the rotation should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
	Timestamp *string `pulumi:"timestamp"`
}

// The set of arguments for constructing a EnvironmentRotationSchedule resource.
type EnvironmentRotationScheduleArgs struct {
	// Environment name.
	Environment pulumi.StringInput
	// Organization name.
	Organization pulumi.StringInput
	// Project name.
	Project pulumi.StringInput
	// Cron expression for recurring scheduled rotations. If you are supplying this, do not supply timestamp.
	ScheduleCron pulumi.StringPtrInput
	// The time at which the rotation should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
	Timestamp pulumi.StringPtrInput
}

func (EnvironmentRotationScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentRotationScheduleArgs)(nil)).Elem()
}

type EnvironmentRotationScheduleInput interface {
	pulumi.Input

	ToEnvironmentRotationScheduleOutput() EnvironmentRotationScheduleOutput
	ToEnvironmentRotationScheduleOutputWithContext(ctx context.Context) EnvironmentRotationScheduleOutput
}

func (*EnvironmentRotationSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentRotationSchedule)(nil)).Elem()
}

func (i *EnvironmentRotationSchedule) ToEnvironmentRotationScheduleOutput() EnvironmentRotationScheduleOutput {
	return i.ToEnvironmentRotationScheduleOutputWithContext(context.Background())
}

func (i *EnvironmentRotationSchedule) ToEnvironmentRotationScheduleOutputWithContext(ctx context.Context) EnvironmentRotationScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentRotationScheduleOutput)
}

// EnvironmentRotationScheduleArrayInput is an input type that accepts EnvironmentRotationScheduleArray and EnvironmentRotationScheduleArrayOutput values.
// You can construct a concrete instance of `EnvironmentRotationScheduleArrayInput` via:
//
//	EnvironmentRotationScheduleArray{ EnvironmentRotationScheduleArgs{...} }
type EnvironmentRotationScheduleArrayInput interface {
	pulumi.Input

	ToEnvironmentRotationScheduleArrayOutput() EnvironmentRotationScheduleArrayOutput
	ToEnvironmentRotationScheduleArrayOutputWithContext(context.Context) EnvironmentRotationScheduleArrayOutput
}

type EnvironmentRotationScheduleArray []EnvironmentRotationScheduleInput

func (EnvironmentRotationScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentRotationSchedule)(nil)).Elem()
}

func (i EnvironmentRotationScheduleArray) ToEnvironmentRotationScheduleArrayOutput() EnvironmentRotationScheduleArrayOutput {
	return i.ToEnvironmentRotationScheduleArrayOutputWithContext(context.Background())
}

func (i EnvironmentRotationScheduleArray) ToEnvironmentRotationScheduleArrayOutputWithContext(ctx context.Context) EnvironmentRotationScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentRotationScheduleArrayOutput)
}

// EnvironmentRotationScheduleMapInput is an input type that accepts EnvironmentRotationScheduleMap and EnvironmentRotationScheduleMapOutput values.
// You can construct a concrete instance of `EnvironmentRotationScheduleMapInput` via:
//
//	EnvironmentRotationScheduleMap{ "key": EnvironmentRotationScheduleArgs{...} }
type EnvironmentRotationScheduleMapInput interface {
	pulumi.Input

	ToEnvironmentRotationScheduleMapOutput() EnvironmentRotationScheduleMapOutput
	ToEnvironmentRotationScheduleMapOutputWithContext(context.Context) EnvironmentRotationScheduleMapOutput
}

type EnvironmentRotationScheduleMap map[string]EnvironmentRotationScheduleInput

func (EnvironmentRotationScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentRotationSchedule)(nil)).Elem()
}

func (i EnvironmentRotationScheduleMap) ToEnvironmentRotationScheduleMapOutput() EnvironmentRotationScheduleMapOutput {
	return i.ToEnvironmentRotationScheduleMapOutputWithContext(context.Background())
}

func (i EnvironmentRotationScheduleMap) ToEnvironmentRotationScheduleMapOutputWithContext(ctx context.Context) EnvironmentRotationScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentRotationScheduleMapOutput)
}

type EnvironmentRotationScheduleOutput struct{ *pulumi.OutputState }

func (EnvironmentRotationScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentRotationSchedule)(nil)).Elem()
}

func (o EnvironmentRotationScheduleOutput) ToEnvironmentRotationScheduleOutput() EnvironmentRotationScheduleOutput {
	return o
}

func (o EnvironmentRotationScheduleOutput) ToEnvironmentRotationScheduleOutputWithContext(ctx context.Context) EnvironmentRotationScheduleOutput {
	return o
}

// Environment name.
func (o EnvironmentRotationScheduleOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentRotationSchedule) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Organization name.
func (o EnvironmentRotationScheduleOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentRotationSchedule) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Project name.
func (o EnvironmentRotationScheduleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentRotationSchedule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Cron expression for recurring scheduled rotations. If you are supplying this, do not supply timestamp.
func (o EnvironmentRotationScheduleOutput) ScheduleCron() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentRotationSchedule) pulumi.StringPtrOutput { return v.ScheduleCron }).(pulumi.StringPtrOutput)
}

// Schedule ID of the created rotation schedule, assigned by Pulumi Cloud.
func (o EnvironmentRotationScheduleOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentRotationSchedule) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

// The time at which the rotation should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
func (o EnvironmentRotationScheduleOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentRotationSchedule) pulumi.StringPtrOutput { return v.Timestamp }).(pulumi.StringPtrOutput)
}

type EnvironmentRotationScheduleArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentRotationScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentRotationSchedule)(nil)).Elem()
}

func (o EnvironmentRotationScheduleArrayOutput) ToEnvironmentRotationScheduleArrayOutput() EnvironmentRotationScheduleArrayOutput {
	return o
}

func (o EnvironmentRotationScheduleArrayOutput) ToEnvironmentRotationScheduleArrayOutputWithContext(ctx context.Context) EnvironmentRotationScheduleArrayOutput {
	return o
}

func (o EnvironmentRotationScheduleArrayOutput) Index(i pulumi.IntInput) EnvironmentRotationScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvironmentRotationSchedule {
		return vs[0].([]*EnvironmentRotationSchedule)[vs[1].(int)]
	}).(EnvironmentRotationScheduleOutput)
}

type EnvironmentRotationScheduleMapOutput struct{ *pulumi.OutputState }

func (EnvironmentRotationScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentRotationSchedule)(nil)).Elem()
}

func (o EnvironmentRotationScheduleMapOutput) ToEnvironmentRotationScheduleMapOutput() EnvironmentRotationScheduleMapOutput {
	return o
}

func (o EnvironmentRotationScheduleMapOutput) ToEnvironmentRotationScheduleMapOutputWithContext(ctx context.Context) EnvironmentRotationScheduleMapOutput {
	return o
}

func (o EnvironmentRotationScheduleMapOutput) MapIndex(k pulumi.StringInput) EnvironmentRotationScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvironmentRotationSchedule {
		return vs[0].(map[string]*EnvironmentRotationSchedule)[vs[1].(string)]
	}).(EnvironmentRotationScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentRotationScheduleInput)(nil)).Elem(), &EnvironmentRotationSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentRotationScheduleArrayInput)(nil)).Elem(), EnvironmentRotationScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentRotationScheduleMapInput)(nil)).Elem(), EnvironmentRotationScheduleMap{})
	pulumi.RegisterOutputType(EnvironmentRotationScheduleOutput{})
	pulumi.RegisterOutputType(EnvironmentRotationScheduleArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentRotationScheduleMapOutput{})
}
