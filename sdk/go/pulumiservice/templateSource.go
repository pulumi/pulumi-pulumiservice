// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A source for Pulumi templates
//
// ### Import
//
// Template sources can be imported using the `id`, which for template sources is `{org}/{templateId}` e.g.,
//
// ```sh
//
//	$ pulumi import pulumiservice:index:TemplateSource my_template my-org/template-abc123
//
// ```
type TemplateSource struct {
	pulumi.CustomResourceState

	// The default destination for projects using templates from this source.
	Destination TemplateSourceDestinationPtrOutput `pulumi:"destination"`
	// Organization name.
	OrganizationName pulumi.StringOutput `pulumi:"organizationName"`
	// Source name.
	SourceName pulumi.StringOutput `pulumi:"sourceName"`
	// Github URL of the repository from which to grab templates.
	SourceURL pulumi.StringOutput `pulumi:"sourceURL"`
}

// NewTemplateSource registers a new resource with the given unique name, arguments, and options.
func NewTemplateSource(ctx *pulumi.Context,
	name string, args *TemplateSourceArgs, opts ...pulumi.ResourceOption) (*TemplateSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationName == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationName'")
	}
	if args.SourceName == nil {
		return nil, errors.New("invalid value for required argument 'SourceName'")
	}
	if args.SourceURL == nil {
		return nil, errors.New("invalid value for required argument 'SourceURL'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TemplateSource
	err := ctx.RegisterResource("pulumiservice:index:TemplateSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplateSource gets an existing TemplateSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplateSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateSourceState, opts ...pulumi.ResourceOption) (*TemplateSource, error) {
	var resource TemplateSource
	err := ctx.ReadResource("pulumiservice:index:TemplateSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemplateSource resources.
type templateSourceState struct {
}

type TemplateSourceState struct {
}

func (TemplateSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateSourceState)(nil)).Elem()
}

type templateSourceArgs struct {
	// The default destination for projects using templates from this source.
	Destination *TemplateSourceDestination `pulumi:"destination"`
	// Organization name.
	OrganizationName string `pulumi:"organizationName"`
	// Source name.
	SourceName string `pulumi:"sourceName"`
	// Github URL of the repository from which to grab templates.
	SourceURL string `pulumi:"sourceURL"`
}

// The set of arguments for constructing a TemplateSource resource.
type TemplateSourceArgs struct {
	// The default destination for projects using templates from this source.
	Destination TemplateSourceDestinationPtrInput
	// Organization name.
	OrganizationName pulumi.StringInput
	// Source name.
	SourceName pulumi.StringInput
	// Github URL of the repository from which to grab templates.
	SourceURL pulumi.StringInput
}

func (TemplateSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateSourceArgs)(nil)).Elem()
}

type TemplateSourceInput interface {
	pulumi.Input

	ToTemplateSourceOutput() TemplateSourceOutput
	ToTemplateSourceOutputWithContext(ctx context.Context) TemplateSourceOutput
}

func (*TemplateSource) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSource)(nil)).Elem()
}

func (i *TemplateSource) ToTemplateSourceOutput() TemplateSourceOutput {
	return i.ToTemplateSourceOutputWithContext(context.Background())
}

func (i *TemplateSource) ToTemplateSourceOutputWithContext(ctx context.Context) TemplateSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceOutput)
}

// TemplateSourceArrayInput is an input type that accepts TemplateSourceArray and TemplateSourceArrayOutput values.
// You can construct a concrete instance of `TemplateSourceArrayInput` via:
//
//	TemplateSourceArray{ TemplateSourceArgs{...} }
type TemplateSourceArrayInput interface {
	pulumi.Input

	ToTemplateSourceArrayOutput() TemplateSourceArrayOutput
	ToTemplateSourceArrayOutputWithContext(context.Context) TemplateSourceArrayOutput
}

type TemplateSourceArray []TemplateSourceInput

func (TemplateSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateSource)(nil)).Elem()
}

func (i TemplateSourceArray) ToTemplateSourceArrayOutput() TemplateSourceArrayOutput {
	return i.ToTemplateSourceArrayOutputWithContext(context.Background())
}

func (i TemplateSourceArray) ToTemplateSourceArrayOutputWithContext(ctx context.Context) TemplateSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceArrayOutput)
}

// TemplateSourceMapInput is an input type that accepts TemplateSourceMap and TemplateSourceMapOutput values.
// You can construct a concrete instance of `TemplateSourceMapInput` via:
//
//	TemplateSourceMap{ "key": TemplateSourceArgs{...} }
type TemplateSourceMapInput interface {
	pulumi.Input

	ToTemplateSourceMapOutput() TemplateSourceMapOutput
	ToTemplateSourceMapOutputWithContext(context.Context) TemplateSourceMapOutput
}

type TemplateSourceMap map[string]TemplateSourceInput

func (TemplateSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateSource)(nil)).Elem()
}

func (i TemplateSourceMap) ToTemplateSourceMapOutput() TemplateSourceMapOutput {
	return i.ToTemplateSourceMapOutputWithContext(context.Background())
}

func (i TemplateSourceMap) ToTemplateSourceMapOutputWithContext(ctx context.Context) TemplateSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceMapOutput)
}

type TemplateSourceOutput struct{ *pulumi.OutputState }

func (TemplateSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSource)(nil)).Elem()
}

func (o TemplateSourceOutput) ToTemplateSourceOutput() TemplateSourceOutput {
	return o
}

func (o TemplateSourceOutput) ToTemplateSourceOutputWithContext(ctx context.Context) TemplateSourceOutput {
	return o
}

// The default destination for projects using templates from this source.
func (o TemplateSourceOutput) Destination() TemplateSourceDestinationPtrOutput {
	return o.ApplyT(func(v *TemplateSource) TemplateSourceDestinationPtrOutput { return v.Destination }).(TemplateSourceDestinationPtrOutput)
}

// Organization name.
func (o TemplateSourceOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateSource) pulumi.StringOutput { return v.OrganizationName }).(pulumi.StringOutput)
}

// Source name.
func (o TemplateSourceOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateSource) pulumi.StringOutput { return v.SourceName }).(pulumi.StringOutput)
}

// Github URL of the repository from which to grab templates.
func (o TemplateSourceOutput) SourceURL() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateSource) pulumi.StringOutput { return v.SourceURL }).(pulumi.StringOutput)
}

type TemplateSourceArrayOutput struct{ *pulumi.OutputState }

func (TemplateSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateSource)(nil)).Elem()
}

func (o TemplateSourceArrayOutput) ToTemplateSourceArrayOutput() TemplateSourceArrayOutput {
	return o
}

func (o TemplateSourceArrayOutput) ToTemplateSourceArrayOutputWithContext(ctx context.Context) TemplateSourceArrayOutput {
	return o
}

func (o TemplateSourceArrayOutput) Index(i pulumi.IntInput) TemplateSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TemplateSource {
		return vs[0].([]*TemplateSource)[vs[1].(int)]
	}).(TemplateSourceOutput)
}

type TemplateSourceMapOutput struct{ *pulumi.OutputState }

func (TemplateSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateSource)(nil)).Elem()
}

func (o TemplateSourceMapOutput) ToTemplateSourceMapOutput() TemplateSourceMapOutput {
	return o
}

func (o TemplateSourceMapOutput) ToTemplateSourceMapOutputWithContext(ctx context.Context) TemplateSourceMapOutput {
	return o
}

func (o TemplateSourceMapOutput) MapIndex(k pulumi.StringInput) TemplateSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TemplateSource {
		return vs[0].(map[string]*TemplateSource)[vs[1].(string)]
	}).(TemplateSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceInput)(nil)).Elem(), &TemplateSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceArrayInput)(nil)).Elem(), TemplateSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceMapInput)(nil)).Elem(), TemplateSourceMap{})
	pulumi.RegisterOutputType(TemplateSourceOutput{})
	pulumi.RegisterOutputType(TemplateSourceArrayOutput{})
	pulumi.RegisterOutputType(TemplateSourceMapOutput{})
}
