// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get all individual user collaborators that have direct access to a specific stack (not team-derived access).
func GetStackCollaborators(ctx *pulumi.Context, args *GetStackCollaboratorsArgs, opts ...pulumi.InvokeOption) (*GetStackCollaboratorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStackCollaboratorsResult
	err := ctx.Invoke("pulumiservice:index:getStackCollaborators", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetStackCollaboratorsArgs struct {
	// The name of the Pulumi organization.
	OrganizationName string `pulumi:"organizationName"`
	// The name of the project.
	ProjectName string `pulumi:"projectName"`
	// The name of the stack.
	StackName string `pulumi:"stackName"`
}

type GetStackCollaboratorsResult struct {
	// List of users with direct collaborator permissions on this stack.
	Users []map[string]string `pulumi:"users"`
}

func GetStackCollaboratorsOutput(ctx *pulumi.Context, args GetStackCollaboratorsOutputArgs, opts ...pulumi.InvokeOption) GetStackCollaboratorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetStackCollaboratorsResultOutput, error) {
			args := v.(GetStackCollaboratorsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetStackCollaboratorsResult
			secret, err := ctx.InvokePackageRaw("pulumiservice:index:getStackCollaborators", args, &rv, "", opts...)
			if err != nil {
				return GetStackCollaboratorsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetStackCollaboratorsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetStackCollaboratorsResultOutput), nil
			}
			return output, nil
		}).(GetStackCollaboratorsResultOutput)
}

type GetStackCollaboratorsOutputArgs struct {
	// The name of the Pulumi organization.
	OrganizationName pulumi.StringInput `pulumi:"organizationName"`
	// The name of the project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The name of the stack.
	StackName pulumi.StringInput `pulumi:"stackName"`
}

func (GetStackCollaboratorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackCollaboratorsArgs)(nil)).Elem()
}

type GetStackCollaboratorsResultOutput struct{ *pulumi.OutputState }

func (GetStackCollaboratorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackCollaboratorsResult)(nil)).Elem()
}

func (o GetStackCollaboratorsResultOutput) ToGetStackCollaboratorsResultOutput() GetStackCollaboratorsResultOutput {
	return o
}

func (o GetStackCollaboratorsResultOutput) ToGetStackCollaboratorsResultOutputWithContext(ctx context.Context) GetStackCollaboratorsResultOutput {
	return o
}

// List of users with direct collaborator permissions on this stack.
func (o GetStackCollaboratorsResultOutput) Users() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetStackCollaboratorsResult) []map[string]string { return v.Users }).(pulumi.StringMapArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStackCollaboratorsResultOutput{})
}
