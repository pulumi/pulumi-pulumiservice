// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get details about a specific version of a policy pack.
func GetPolicyPack(ctx *pulumi.Context, args *GetPolicyPackArgs, opts ...pulumi.InvokeOption) (*GetPolicyPackResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPolicyPackResult
	err := ctx.Invoke("pulumiservice:index:getPolicyPack", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetPolicyPackArgs struct {
	// The name of the Pulumi organization.
	OrganizationName string `pulumi:"organizationName"`
	// The name of the policy pack.
	PolicyPackName string `pulumi:"policyPackName"`
	// The version number of the policy pack. If not specified, returns the latest version.
	Version *int `pulumi:"version"`
}

type GetPolicyPackResult struct {
	// Configuration for the policy pack.
	Config map[string]interface{} `pulumi:"config"`
	// The display name of the policy pack.
	DisplayName string `pulumi:"displayName"`
	// The name of the policy pack.
	Name string `pulumi:"name"`
	// List of policies in this pack.
	Policies []map[string]string `pulumi:"policies"`
	// The version number.
	Version int `pulumi:"version"`
	// The version tag (if any).
	VersionTag *string `pulumi:"versionTag"`
}

func GetPolicyPackOutput(ctx *pulumi.Context, args GetPolicyPackOutputArgs, opts ...pulumi.InvokeOption) GetPolicyPackResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPolicyPackResultOutput, error) {
			args := v.(GetPolicyPackArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetPolicyPackResult
			secret, err := ctx.InvokePackageRaw("pulumiservice:index:getPolicyPack", args, &rv, "", opts...)
			if err != nil {
				return GetPolicyPackResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetPolicyPackResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetPolicyPackResultOutput), nil
			}
			return output, nil
		}).(GetPolicyPackResultOutput)
}

type GetPolicyPackOutputArgs struct {
	// The name of the Pulumi organization.
	OrganizationName pulumi.StringInput `pulumi:"organizationName"`
	// The name of the policy pack.
	PolicyPackName pulumi.StringInput `pulumi:"policyPackName"`
	// The version number of the policy pack. If not specified, returns the latest version.
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (GetPolicyPackOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyPackArgs)(nil)).Elem()
}

type GetPolicyPackResultOutput struct{ *pulumi.OutputState }

func (GetPolicyPackResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyPackResult)(nil)).Elem()
}

func (o GetPolicyPackResultOutput) ToGetPolicyPackResultOutput() GetPolicyPackResultOutput {
	return o
}

func (o GetPolicyPackResultOutput) ToGetPolicyPackResultOutputWithContext(ctx context.Context) GetPolicyPackResultOutput {
	return o
}

// Configuration for the policy pack.
func (o GetPolicyPackResultOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v GetPolicyPackResult) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The display name of the policy pack.
func (o GetPolicyPackResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyPackResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The name of the policy pack.
func (o GetPolicyPackResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyPackResult) string { return v.Name }).(pulumi.StringOutput)
}

// List of policies in this pack.
func (o GetPolicyPackResultOutput) Policies() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetPolicyPackResult) []map[string]string { return v.Policies }).(pulumi.StringMapArrayOutput)
}

// The version number.
func (o GetPolicyPackResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyPackResult) int { return v.Version }).(pulumi.IntOutput)
}

// The version tag (if any).
func (o GetPolicyPackResultOutput) VersionTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyPackResult) *string { return v.VersionTag }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPolicyPackResultOutput{})
}
