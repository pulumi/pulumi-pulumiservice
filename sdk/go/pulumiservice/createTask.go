// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a task in the Neo agent system for tracking user instructions and entity changes. Tasks are immutable once created.
func CreateTask(ctx *pulumi.Context, args *CreateTaskArgs, opts ...pulumi.InvokeOption) (*CreateTaskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CreateTaskResult
	err := ctx.Invoke("pulumiservice:index:createTask", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CreateTaskArgs struct {
	// The exact user instruction for the task.
	Content string `pulumi:"content"`
	// Entities to add in this task.
	EntityAdd []TaskEntity `pulumi:"entityAdd"`
	// Entities to remove in this task.
	EntityRemove []TaskEntity `pulumi:"entityRemove"`
	// The name of the organization.
	OrganizationName string `pulumi:"organizationName"`
	// When the event occurred (ISO 8601 format). Defaults to current time if not specified.
	Timestamp *string `pulumi:"timestamp"`
}

type CreateTaskResult struct {
	// The exact user instruction for the task.
	Content string `pulumi:"content"`
	// The final list of entities after add/remove operations.
	Entities []TaskEntity `pulumi:"entities"`
	// The unique identifier of the created task.
	Id string `pulumi:"id"`
	// The name of the organization.
	OrganizationName string `pulumi:"organizationName"`
	// When the task was created (ISO 8601 format).
	Timestamp string `pulumi:"timestamp"`
}

func CreateTaskOutput(ctx *pulumi.Context, args CreateTaskOutputArgs, opts ...pulumi.InvokeOption) CreateTaskResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (CreateTaskResultOutput, error) {
			args := v.(CreateTaskArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("pulumiservice:index:createTask", args, CreateTaskResultOutput{}, options).(CreateTaskResultOutput), nil
		}).(CreateTaskResultOutput)
}

type CreateTaskOutputArgs struct {
	// The exact user instruction for the task.
	Content pulumi.StringInput `pulumi:"content"`
	// Entities to add in this task.
	EntityAdd TaskEntityArrayInput `pulumi:"entityAdd"`
	// Entities to remove in this task.
	EntityRemove TaskEntityArrayInput `pulumi:"entityRemove"`
	// The name of the organization.
	OrganizationName pulumi.StringInput `pulumi:"organizationName"`
	// When the event occurred (ISO 8601 format). Defaults to current time if not specified.
	Timestamp pulumi.StringPtrInput `pulumi:"timestamp"`
}

func (CreateTaskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateTaskArgs)(nil)).Elem()
}

type CreateTaskResultOutput struct{ *pulumi.OutputState }

func (CreateTaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateTaskResult)(nil)).Elem()
}

func (o CreateTaskResultOutput) ToCreateTaskResultOutput() CreateTaskResultOutput {
	return o
}

func (o CreateTaskResultOutput) ToCreateTaskResultOutputWithContext(ctx context.Context) CreateTaskResultOutput {
	return o
}

// The exact user instruction for the task.
func (o CreateTaskResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v CreateTaskResult) string { return v.Content }).(pulumi.StringOutput)
}

// The final list of entities after add/remove operations.
func (o CreateTaskResultOutput) Entities() TaskEntityArrayOutput {
	return o.ApplyT(func(v CreateTaskResult) []TaskEntity { return v.Entities }).(TaskEntityArrayOutput)
}

// The unique identifier of the created task.
func (o CreateTaskResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CreateTaskResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the organization.
func (o CreateTaskResultOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v CreateTaskResult) string { return v.OrganizationName }).(pulumi.StringOutput)
}

// When the task was created (ISO 8601 format).
func (o CreateTaskResultOutput) Timestamp() pulumi.StringOutput {
	return o.ApplyT(func(v CreateTaskResult) string { return v.Timestamp }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(CreateTaskResultOutput{})
}
