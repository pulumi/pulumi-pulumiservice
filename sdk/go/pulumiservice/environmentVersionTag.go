// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A tag on a specific revision of an environment.
//
// ### Import
//
// Environment version tags can be imported using the `id`, which for environment version tags is `{org}/{project}/{environment}/{tagName}` or `{org}/{environment}/{tagName}` e.g.,
//
// ```sh
//
//	$ pulumi import pulumiservice:index:EnvironmentVersionTag my_tag my-org/my-project/my-env/tag-v1
//
// ```
//
// or using the legacy format (assumes "default" project):
//
// ```sh
//
//	$ pulumi import pulumiservice:index:EnvironmentVersionTag my_tag my-org/my-env/tag-v1
//
// ```
type EnvironmentVersionTag struct {
	pulumi.CustomResourceState

	// Environment name.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Organization name.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Project name.
	Project pulumi.StringOutput `pulumi:"project"`
	// Revision number.
	Revision pulumi.IntOutput `pulumi:"revision"`
	// Tag name.
	TagName pulumi.StringOutput `pulumi:"tagName"`
}

// NewEnvironmentVersionTag registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentVersionTag(ctx *pulumi.Context,
	name string, args *EnvironmentVersionTagArgs, opts ...pulumi.ResourceOption) (*EnvironmentVersionTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Revision == nil {
		return nil, errors.New("invalid value for required argument 'Revision'")
	}
	if args.TagName == nil {
		return nil, errors.New("invalid value for required argument 'TagName'")
	}
	if args.Project == nil {
		args.Project = pulumi.StringPtr("default")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentVersionTag
	err := ctx.RegisterResource("pulumiservice:index:EnvironmentVersionTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentVersionTag gets an existing EnvironmentVersionTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentVersionTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentVersionTagState, opts ...pulumi.ResourceOption) (*EnvironmentVersionTag, error) {
	var resource EnvironmentVersionTag
	err := ctx.ReadResource("pulumiservice:index:EnvironmentVersionTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentVersionTag resources.
type environmentVersionTagState struct {
}

type EnvironmentVersionTagState struct {
}

func (EnvironmentVersionTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentVersionTagState)(nil)).Elem()
}

type environmentVersionTagArgs struct {
	// Environment name.
	Environment string `pulumi:"environment"`
	// Organization name.
	Organization string `pulumi:"organization"`
	// Project name.
	Project *string `pulumi:"project"`
	// Revision number.
	Revision int `pulumi:"revision"`
	// Tag name.
	TagName string `pulumi:"tagName"`
}

// The set of arguments for constructing a EnvironmentVersionTag resource.
type EnvironmentVersionTagArgs struct {
	// Environment name.
	Environment pulumi.StringInput
	// Organization name.
	Organization pulumi.StringInput
	// Project name.
	Project pulumi.StringPtrInput
	// Revision number.
	Revision pulumi.IntInput
	// Tag name.
	TagName pulumi.StringInput
}

func (EnvironmentVersionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentVersionTagArgs)(nil)).Elem()
}

type EnvironmentVersionTagInput interface {
	pulumi.Input

	ToEnvironmentVersionTagOutput() EnvironmentVersionTagOutput
	ToEnvironmentVersionTagOutputWithContext(ctx context.Context) EnvironmentVersionTagOutput
}

func (*EnvironmentVersionTag) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentVersionTag)(nil)).Elem()
}

func (i *EnvironmentVersionTag) ToEnvironmentVersionTagOutput() EnvironmentVersionTagOutput {
	return i.ToEnvironmentVersionTagOutputWithContext(context.Background())
}

func (i *EnvironmentVersionTag) ToEnvironmentVersionTagOutputWithContext(ctx context.Context) EnvironmentVersionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVersionTagOutput)
}

// EnvironmentVersionTagArrayInput is an input type that accepts EnvironmentVersionTagArray and EnvironmentVersionTagArrayOutput values.
// You can construct a concrete instance of `EnvironmentVersionTagArrayInput` via:
//
//	EnvironmentVersionTagArray{ EnvironmentVersionTagArgs{...} }
type EnvironmentVersionTagArrayInput interface {
	pulumi.Input

	ToEnvironmentVersionTagArrayOutput() EnvironmentVersionTagArrayOutput
	ToEnvironmentVersionTagArrayOutputWithContext(context.Context) EnvironmentVersionTagArrayOutput
}

type EnvironmentVersionTagArray []EnvironmentVersionTagInput

func (EnvironmentVersionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentVersionTag)(nil)).Elem()
}

func (i EnvironmentVersionTagArray) ToEnvironmentVersionTagArrayOutput() EnvironmentVersionTagArrayOutput {
	return i.ToEnvironmentVersionTagArrayOutputWithContext(context.Background())
}

func (i EnvironmentVersionTagArray) ToEnvironmentVersionTagArrayOutputWithContext(ctx context.Context) EnvironmentVersionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVersionTagArrayOutput)
}

// EnvironmentVersionTagMapInput is an input type that accepts EnvironmentVersionTagMap and EnvironmentVersionTagMapOutput values.
// You can construct a concrete instance of `EnvironmentVersionTagMapInput` via:
//
//	EnvironmentVersionTagMap{ "key": EnvironmentVersionTagArgs{...} }
type EnvironmentVersionTagMapInput interface {
	pulumi.Input

	ToEnvironmentVersionTagMapOutput() EnvironmentVersionTagMapOutput
	ToEnvironmentVersionTagMapOutputWithContext(context.Context) EnvironmentVersionTagMapOutput
}

type EnvironmentVersionTagMap map[string]EnvironmentVersionTagInput

func (EnvironmentVersionTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentVersionTag)(nil)).Elem()
}

func (i EnvironmentVersionTagMap) ToEnvironmentVersionTagMapOutput() EnvironmentVersionTagMapOutput {
	return i.ToEnvironmentVersionTagMapOutputWithContext(context.Background())
}

func (i EnvironmentVersionTagMap) ToEnvironmentVersionTagMapOutputWithContext(ctx context.Context) EnvironmentVersionTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVersionTagMapOutput)
}

type EnvironmentVersionTagOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentVersionTag)(nil)).Elem()
}

func (o EnvironmentVersionTagOutput) ToEnvironmentVersionTagOutput() EnvironmentVersionTagOutput {
	return o
}

func (o EnvironmentVersionTagOutput) ToEnvironmentVersionTagOutputWithContext(ctx context.Context) EnvironmentVersionTagOutput {
	return o
}

// Environment name.
func (o EnvironmentVersionTagOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentVersionTag) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Organization name.
func (o EnvironmentVersionTagOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentVersionTag) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Project name.
func (o EnvironmentVersionTagOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentVersionTag) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Revision number.
func (o EnvironmentVersionTagOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v *EnvironmentVersionTag) pulumi.IntOutput { return v.Revision }).(pulumi.IntOutput)
}

// Tag name.
func (o EnvironmentVersionTagOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentVersionTag) pulumi.StringOutput { return v.TagName }).(pulumi.StringOutput)
}

type EnvironmentVersionTagArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentVersionTag)(nil)).Elem()
}

func (o EnvironmentVersionTagArrayOutput) ToEnvironmentVersionTagArrayOutput() EnvironmentVersionTagArrayOutput {
	return o
}

func (o EnvironmentVersionTagArrayOutput) ToEnvironmentVersionTagArrayOutputWithContext(ctx context.Context) EnvironmentVersionTagArrayOutput {
	return o
}

func (o EnvironmentVersionTagArrayOutput) Index(i pulumi.IntInput) EnvironmentVersionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvironmentVersionTag {
		return vs[0].([]*EnvironmentVersionTag)[vs[1].(int)]
	}).(EnvironmentVersionTagOutput)
}

type EnvironmentVersionTagMapOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentVersionTag)(nil)).Elem()
}

func (o EnvironmentVersionTagMapOutput) ToEnvironmentVersionTagMapOutput() EnvironmentVersionTagMapOutput {
	return o
}

func (o EnvironmentVersionTagMapOutput) ToEnvironmentVersionTagMapOutputWithContext(ctx context.Context) EnvironmentVersionTagMapOutput {
	return o
}

func (o EnvironmentVersionTagMapOutput) MapIndex(k pulumi.StringInput) EnvironmentVersionTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvironmentVersionTag {
		return vs[0].(map[string]*EnvironmentVersionTag)[vs[1].(string)]
	}).(EnvironmentVersionTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentVersionTagInput)(nil)).Elem(), &EnvironmentVersionTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentVersionTagArrayInput)(nil)).Elem(), EnvironmentVersionTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentVersionTagMapInput)(nil)).Elem(), EnvironmentVersionTagMap{})
	pulumi.RegisterOutputType(EnvironmentVersionTagOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionTagArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionTagMapOutput{})
}
