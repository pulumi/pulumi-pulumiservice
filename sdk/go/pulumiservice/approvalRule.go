// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pulumiservice/sdk/go/pulumiservice/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An approval rule for environment deployments.
//
// ### Import
//
// Approval rules can be imported using the `id`, which for approval rules is `environment/{org}/{project}/{environment}/{ruleId}` e.g.,
//
// ```sh
//
//	$ pulumi import pulumiservice:index:ApprovalRule my_rule environment/my-org/my-project/my-env/rule-123
//
// ```
type ApprovalRule struct {
	pulumi.CustomResourceState

	// The approval rule configuration.
	ApprovalRuleConfig ApprovalRuleConfigOutput `pulumi:"approvalRuleConfig"`
	// Whether the approval rule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The environment this rule applies to.
	EnvironmentIdentifier EnvironmentIdentifierOutput `pulumi:"environmentIdentifier"`
	// Name of the approval rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of action this rule applies to.
	TargetActionTypes TargetActionTypeArrayOutput `pulumi:"targetActionTypes"`
}

// NewApprovalRule registers a new resource with the given unique name, arguments, and options.
func NewApprovalRule(ctx *pulumi.Context,
	name string, args *ApprovalRuleArgs, opts ...pulumi.ResourceOption) (*ApprovalRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApprovalRuleConfig == nil {
		return nil, errors.New("invalid value for required argument 'ApprovalRuleConfig'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EnvironmentIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentIdentifier'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.TargetActionTypes == nil {
		return nil, errors.New("invalid value for required argument 'TargetActionTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApprovalRule
	err := ctx.RegisterResource("pulumiservice:index:ApprovalRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApprovalRule gets an existing ApprovalRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApprovalRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApprovalRuleState, opts ...pulumi.ResourceOption) (*ApprovalRule, error) {
	var resource ApprovalRule
	err := ctx.ReadResource("pulumiservice:index:ApprovalRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApprovalRule resources.
type approvalRuleState struct {
}

type ApprovalRuleState struct {
}

func (ApprovalRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*approvalRuleState)(nil)).Elem()
}

type approvalRuleArgs struct {
	// The approval rule configuration.
	ApprovalRuleConfig ApprovalRuleConfig `pulumi:"approvalRuleConfig"`
	// Whether the approval rule is enabled.
	Enabled bool `pulumi:"enabled"`
	// The environment this rule applies to.
	EnvironmentIdentifier EnvironmentIdentifier `pulumi:"environmentIdentifier"`
	// The name of the approval rule.
	Name string `pulumi:"name"`
	// The type of action this rule applies to.
	TargetActionTypes []TargetActionType `pulumi:"targetActionTypes"`
}

// The set of arguments for constructing a ApprovalRule resource.
type ApprovalRuleArgs struct {
	// The approval rule configuration.
	ApprovalRuleConfig ApprovalRuleConfigInput
	// Whether the approval rule is enabled.
	Enabled pulumi.BoolInput
	// The environment this rule applies to.
	EnvironmentIdentifier EnvironmentIdentifierInput
	// The name of the approval rule.
	Name pulumi.StringInput
	// The type of action this rule applies to.
	TargetActionTypes TargetActionTypeArrayInput
}

func (ApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*approvalRuleArgs)(nil)).Elem()
}

type ApprovalRuleInput interface {
	pulumi.Input

	ToApprovalRuleOutput() ApprovalRuleOutput
	ToApprovalRuleOutputWithContext(ctx context.Context) ApprovalRuleOutput
}

func (*ApprovalRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalRule)(nil)).Elem()
}

func (i *ApprovalRule) ToApprovalRuleOutput() ApprovalRuleOutput {
	return i.ToApprovalRuleOutputWithContext(context.Background())
}

func (i *ApprovalRule) ToApprovalRuleOutputWithContext(ctx context.Context) ApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalRuleOutput)
}

// ApprovalRuleArrayInput is an input type that accepts ApprovalRuleArray and ApprovalRuleArrayOutput values.
// You can construct a concrete instance of `ApprovalRuleArrayInput` via:
//
//	ApprovalRuleArray{ ApprovalRuleArgs{...} }
type ApprovalRuleArrayInput interface {
	pulumi.Input

	ToApprovalRuleArrayOutput() ApprovalRuleArrayOutput
	ToApprovalRuleArrayOutputWithContext(context.Context) ApprovalRuleArrayOutput
}

type ApprovalRuleArray []ApprovalRuleInput

func (ApprovalRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApprovalRule)(nil)).Elem()
}

func (i ApprovalRuleArray) ToApprovalRuleArrayOutput() ApprovalRuleArrayOutput {
	return i.ToApprovalRuleArrayOutputWithContext(context.Background())
}

func (i ApprovalRuleArray) ToApprovalRuleArrayOutputWithContext(ctx context.Context) ApprovalRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalRuleArrayOutput)
}

// ApprovalRuleMapInput is an input type that accepts ApprovalRuleMap and ApprovalRuleMapOutput values.
// You can construct a concrete instance of `ApprovalRuleMapInput` via:
//
//	ApprovalRuleMap{ "key": ApprovalRuleArgs{...} }
type ApprovalRuleMapInput interface {
	pulumi.Input

	ToApprovalRuleMapOutput() ApprovalRuleMapOutput
	ToApprovalRuleMapOutputWithContext(context.Context) ApprovalRuleMapOutput
}

type ApprovalRuleMap map[string]ApprovalRuleInput

func (ApprovalRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApprovalRule)(nil)).Elem()
}

func (i ApprovalRuleMap) ToApprovalRuleMapOutput() ApprovalRuleMapOutput {
	return i.ToApprovalRuleMapOutputWithContext(context.Background())
}

func (i ApprovalRuleMap) ToApprovalRuleMapOutputWithContext(ctx context.Context) ApprovalRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalRuleMapOutput)
}

type ApprovalRuleOutput struct{ *pulumi.OutputState }

func (ApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalRule)(nil)).Elem()
}

func (o ApprovalRuleOutput) ToApprovalRuleOutput() ApprovalRuleOutput {
	return o
}

func (o ApprovalRuleOutput) ToApprovalRuleOutputWithContext(ctx context.Context) ApprovalRuleOutput {
	return o
}

// The approval rule configuration.
func (o ApprovalRuleOutput) ApprovalRuleConfig() ApprovalRuleConfigOutput {
	return o.ApplyT(func(v *ApprovalRule) ApprovalRuleConfigOutput { return v.ApprovalRuleConfig }).(ApprovalRuleConfigOutput)
}

// Whether the approval rule is enabled.
func (o ApprovalRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApprovalRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The environment this rule applies to.
func (o ApprovalRuleOutput) EnvironmentIdentifier() EnvironmentIdentifierOutput {
	return o.ApplyT(func(v *ApprovalRule) EnvironmentIdentifierOutput { return v.EnvironmentIdentifier }).(EnvironmentIdentifierOutput)
}

// Name of the approval rule.
func (o ApprovalRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApprovalRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of action this rule applies to.
func (o ApprovalRuleOutput) TargetActionTypes() TargetActionTypeArrayOutput {
	return o.ApplyT(func(v *ApprovalRule) TargetActionTypeArrayOutput { return v.TargetActionTypes }).(TargetActionTypeArrayOutput)
}

type ApprovalRuleArrayOutput struct{ *pulumi.OutputState }

func (ApprovalRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApprovalRule)(nil)).Elem()
}

func (o ApprovalRuleArrayOutput) ToApprovalRuleArrayOutput() ApprovalRuleArrayOutput {
	return o
}

func (o ApprovalRuleArrayOutput) ToApprovalRuleArrayOutputWithContext(ctx context.Context) ApprovalRuleArrayOutput {
	return o
}

func (o ApprovalRuleArrayOutput) Index(i pulumi.IntInput) ApprovalRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApprovalRule {
		return vs[0].([]*ApprovalRule)[vs[1].(int)]
	}).(ApprovalRuleOutput)
}

type ApprovalRuleMapOutput struct{ *pulumi.OutputState }

func (ApprovalRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApprovalRule)(nil)).Elem()
}

func (o ApprovalRuleMapOutput) ToApprovalRuleMapOutput() ApprovalRuleMapOutput {
	return o
}

func (o ApprovalRuleMapOutput) ToApprovalRuleMapOutputWithContext(ctx context.Context) ApprovalRuleMapOutput {
	return o
}

func (o ApprovalRuleMapOutput) MapIndex(k pulumi.StringInput) ApprovalRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApprovalRule {
		return vs[0].(map[string]*ApprovalRule)[vs[1].(string)]
	}).(ApprovalRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApprovalRuleInput)(nil)).Elem(), &ApprovalRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApprovalRuleArrayInput)(nil)).Elem(), ApprovalRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApprovalRuleMapInput)(nil)).Elem(), ApprovalRuleMap{})
	pulumi.RegisterOutputType(ApprovalRuleOutput{})
	pulumi.RegisterOutputType(ApprovalRuleArrayOutput{})
	pulumi.RegisterOutputType(ApprovalRuleMapOutput{})
}
