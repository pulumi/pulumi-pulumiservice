// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A Policy Group allows you to apply policy packs to a set of stacks in your organization.
 */
export class PolicyGroup extends pulumi.CustomResource {
    /**
     * Get an existing PolicyGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PolicyGroup {
        return new PolicyGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:PolicyGroup';

    /**
     * Returns true if the given object is an instance of PolicyGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyGroup.__pulumiType;
    }

    /**
     * The entity type for the policy group. Valid values are 'stacks' or 'accounts'. Defaults to 'stacks'.
     */
    public readonly entityType!: pulumi.Output<string | undefined>;
    /**
     * The mode for the policy group. Valid values are 'audit' (reports violations) or 'preventative' (blocks operations). Defaults to 'audit'.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The name of the policy group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Pulumi organization the policy group belongs to.
     */
    public readonly organizationName!: pulumi.Output<string>;
    /**
     * List of policy packs applied to this policy group.
     */
    public readonly policyPacks!: pulumi.Output<{[key: string]: string}[]>;
    /**
     * List of stack references that belong to this policy group.
     */
    public readonly stacks!: pulumi.Output<{[key: string]: string}[]>;

    /**
     * Create a PolicyGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.organizationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            resourceInputs["entityType"] = (args ? args.entityType : undefined) ?? "stacks";
            resourceInputs["mode"] = (args ? args.mode : undefined) ?? "audit";
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationName"] = args ? args.organizationName : undefined;
            resourceInputs["policyPacks"] = args ? args.policyPacks : undefined;
            resourceInputs["stacks"] = args ? args.stacks : undefined;
        } else {
            resourceInputs["entityType"] = undefined /*out*/;
            resourceInputs["mode"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organizationName"] = undefined /*out*/;
            resourceInputs["policyPacks"] = undefined /*out*/;
            resourceInputs["stacks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PolicyGroup resource.
 */
export interface PolicyGroupArgs {
    /**
     * The entity type for the policy group. Valid values are 'stacks' or 'accounts'. Defaults to 'stacks'.
     */
    entityType?: pulumi.Input<string>;
    /**
     * The mode for the policy group. Valid values are 'audit' (reports violations) or 'preventative' (blocks operations). Defaults to 'audit'.
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the policy group.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Pulumi organization the policy group belongs to.
     */
    organizationName: pulumi.Input<string>;
    /**
     * List of policy packs applied to this policy group.
     */
    policyPacks?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * List of stack references that belong to this policy group.
     */
    stacks?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
}
