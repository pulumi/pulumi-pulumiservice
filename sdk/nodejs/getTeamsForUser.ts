// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get a list of teams that a specific user is a member of.
 */
export function getTeamsForUser(args: GetTeamsForUserArgs, opts?: pulumi.InvokeOptions): Promise<GetTeamsForUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pulumiservice:index:getTeamsForUser", {
        "organizationName": args.organizationName,
        "userName": args.userName,
    }, opts);
}

export interface GetTeamsForUserArgs {
    /**
     * The name of the Pulumi organization.
     */
    organizationName: string;
    /**
     * The username to search for. Matches against both name and GitHub login.
     */
    userName: string;
}

export interface GetTeamsForUserResult {
    /**
     * List of teams where the user is a member.
     */
    readonly teams: {[key: string]: string}[];
}
/**
 * Get a list of teams that a specific user is a member of.
 */
export function getTeamsForUserOutput(args: GetTeamsForUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTeamsForUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("pulumiservice:index:getTeamsForUser", {
        "organizationName": args.organizationName,
        "userName": args.userName,
    }, opts);
}

export interface GetTeamsForUserOutputArgs {
    /**
     * The name of the Pulumi organization.
     */
    organizationName: pulumi.Input<string>;
    /**
     * The username to search for. Matches against both name and GitHub login.
     */
    userName: pulumi.Input<string>;
}
