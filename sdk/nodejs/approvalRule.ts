// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * An approval rule for environment deployments.
 */
export class ApprovalRule extends pulumi.CustomResource {
    /**
     * Get an existing ApprovalRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ApprovalRule {
        return new ApprovalRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:ApprovalRule';

    /**
     * Returns true if the given object is an instance of ApprovalRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApprovalRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApprovalRule.__pulumiType;
    }

    /**
     * The approval rule configuration.
     */
    public readonly approvalRuleConfig!: pulumi.Output<outputs.ApprovalRuleConfig>;
    /**
     * Whether the approval rule is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The environment this rule applies to.
     */
    public readonly environmentIdentifier!: pulumi.Output<outputs.EnvironmentIdentifier>;
    /**
     * Name of the approval rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of action this rule applies to.
     */
    public readonly targetActionTypes!: pulumi.Output<enums.TargetActionType[]>;

    /**
     * Create a ApprovalRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApprovalRuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.approvalRuleConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'approvalRuleConfig'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.environmentIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentIdentifier'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.targetActionTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetActionTypes'");
            }
            resourceInputs["approvalRuleConfig"] = args ? args.approvalRuleConfig : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["environmentIdentifier"] = args ? args.environmentIdentifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["targetActionTypes"] = args ? args.targetActionTypes : undefined;
        } else {
            resourceInputs["approvalRuleConfig"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["environmentIdentifier"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["targetActionTypes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApprovalRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ApprovalRule resource.
 */
export interface ApprovalRuleArgs {
    /**
     * The approval rule configuration.
     */
    approvalRuleConfig: pulumi.Input<inputs.ApprovalRuleConfigArgs>;
    /**
     * Whether the approval rule is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The environment this rule applies to.
     */
    environmentIdentifier: pulumi.Input<inputs.EnvironmentIdentifierArgs>;
    /**
     * The name of the approval rule.
     */
    name: pulumi.Input<string>;
    /**
     * The type of action this rule applies to.
     */
    targetActionTypes: pulumi.Input<pulumi.Input<enums.TargetActionType>[]>;
}
