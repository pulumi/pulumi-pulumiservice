// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * A Service resource in Pulumi Cloud. Services allow you to group and organize related stacks and environments.
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Optional description of the service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Optional list of items (stacks or environments) that belong to this service.
     */
    public readonly items!: pulumi.Output<outputs.ServiceItem[] | undefined>;
    /**
     * The name of the service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the organization.
     */
    public readonly organizationName!: pulumi.Output<string>;
    /**
     * The name of the owner (username or team name).
     */
    public readonly ownerName!: pulumi.Output<string>;
    /**
     * The type of owner for this service (user or team).
     */
    public readonly ownerType!: pulumi.Output<string>;
    /**
     * Optional properties for the service.
     */
    public readonly properties!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.organizationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.ownerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["items"] = args ? args.items : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationName"] = args ? args.organizationName : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["ownerType"] = args ? args.ownerType : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["items"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organizationName"] = undefined /*out*/;
            resourceInputs["ownerName"] = undefined /*out*/;
            resourceInputs["ownerType"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Optional description of the service.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional list of items (stacks or environments) that belong to this service.
     */
    items?: pulumi.Input<pulumi.Input<inputs.ServiceItemArgs>[]>;
    /**
     * The name of the service.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the organization.
     */
    organizationName: pulumi.Input<string>;
    /**
     * The name of the owner (username or team name).
     */
    ownerName: pulumi.Input<string>;
    /**
     * The type of owner for this service (user or team).
     */
    ownerType: pulumi.Input<string>;
    /**
     * Optional properties for the service.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
