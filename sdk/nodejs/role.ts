// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A Role resource manages custom RBAC roles in Pulumi Cloud. Roles define sets of permissions that can be assigned to users or teams within an organization.
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * The description of the role.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The permission descriptor details that define what permissions this role grants.
     */
    public readonly details!: pulumi.Output<any>;
    /**
     * The name of the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization name.
     */
    public readonly organizationName!: pulumi.Output<string>;
    /**
     * The UX purpose of the permission descriptor. One of 'role', 'policy', or 'set'. Defaults to 'role'.
     */
    public readonly uxPurpose!: pulumi.Output<string | undefined>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.details === undefined) && !opts.urn) {
                throw new Error("Missing required property 'details'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.organizationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["details"] = args ? args.details : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationName"] = args ? args.organizationName : undefined;
            resourceInputs["uxPurpose"] = (args ? args.uxPurpose : undefined) ?? "role";
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["details"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organizationName"] = undefined /*out*/;
            resourceInputs["uxPurpose"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * The description of the role.
     */
    description: pulumi.Input<string>;
    /**
     * The permission descriptor details that define what permissions this role grants.
     */
    details: any;
    /**
     * The name of the role.
     */
    name: pulumi.Input<string>;
    /**
     * The organization name.
     */
    organizationName: pulumi.Input<string>;
    /**
     * The UX purpose of the permission descriptor. One of 'role', 'policy', or 'set'. Defaults to 'role'.
     */
    uxPurpose?: pulumi.Input<string>;
}
