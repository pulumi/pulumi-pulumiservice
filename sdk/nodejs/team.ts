// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The Pulumi Cloud offers role-based access control (RBAC) using teams. Teams allow organization admins to assign a set of stack permissions to a group of users.
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * Optional. Team description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Optional. Team display name.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The GitHub ID of the team to mirror. Must be in the same GitHub organization that the Pulumi org is backed by. Required for "github" teams.
     */
    declare public readonly githubTeamId: pulumi.Output<number | undefined>;
    /**
     * List of Pulumi Cloud usernames of team members.
     */
    declare public readonly members: pulumi.Output<string[]>;
    /**
     * The team's name. Required for "pulumi" teams.
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * The name of the Pulumi organization the team belongs to.
     */
    declare public readonly organizationName: pulumi.Output<string>;
    /**
     * The type of team. Must be either `pulumi` or `github`.
     */
    declare public readonly teamType: pulumi.Output<string>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.organizationName === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            if (args?.teamType === undefined && !opts.urn) {
                throw new Error("Missing required property 'teamType'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["githubTeamId"] = args?.githubTeamId;
            resourceInputs["members"] = args?.members;
            resourceInputs["name"] = args?.name;
            resourceInputs["organizationName"] = args?.organizationName;
            resourceInputs["teamType"] = args?.teamType;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["githubTeamId"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organizationName"] = undefined /*out*/;
            resourceInputs["teamType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * Optional. Team description.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Team display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The GitHub ID of the team to mirror. Must be in the same GitHub organization that the Pulumi org is backed by. Required for "github" teams.
     */
    githubTeamId?: pulumi.Input<number>;
    /**
     * List of Pulumi Cloud usernames of team members.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The team's name. Required for "pulumi" teams.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Pulumi organization the team belongs to.
     */
    organizationName: pulumi.Input<string>;
    /**
     * The type of team. Must be either `pulumi` or `github`.
     */
    teamType: pulumi.Input<string>;
}
