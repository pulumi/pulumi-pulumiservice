// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AuthPolicyDecision = {
    /**
     * A deny rule for Oidc Issuer Policy.
     */
    Deny: "deny",
    /**
     * An allow rule for Oidc Issuer Policy.
     */
    Allow: "allow",
} as const;

export type AuthPolicyDecision = (typeof AuthPolicyDecision)[keyof typeof AuthPolicyDecision];

export const AuthPolicyPermissionLevel = {
    /**
     * Standard level of permissions.
     */
    Standard: "standard",
    /**
     * Admin level of permissions.
     */
    Admin: "admin",
} as const;

export type AuthPolicyPermissionLevel = (typeof AuthPolicyPermissionLevel)[keyof typeof AuthPolicyPermissionLevel];

export const AuthPolicyTokenType = {
    /**
     * Personal Pulumi token. Requires userLogin field to be filled.
     */
    Personal: "personal",
    /**
     * Team Pulumi token. Requires teamName field to be filled.
     */
    Team: "team",
    /**
     * Organization Pulumi token. Requires authorizedPermissions field to be filled.
     */
    Organization: "organization",
    /**
     * Deployment Runner Pulumi token. Requires runnerID field to be filled.
     */
    Runner: "runner",
} as const;

export type AuthPolicyTokenType = (typeof AuthPolicyTokenType)[keyof typeof AuthPolicyTokenType];

export const EnvironmentPermission = {
    /**
     * No permissions.
     */
    None: "none",
    /**
     * Permission to read environment definition only.
     */
    Read: "read",
    /**
     * Permission to open and read the environment.
     */
    Open: "open",
    /**
     * Permission to open, read and update the environment.
     */
    Write: "write",
    /**
     * Permission for all operations on the environment.
     */
    Admin: "admin",
} as const;

export type EnvironmentPermission = (typeof EnvironmentPermission)[keyof typeof EnvironmentPermission];

export const PulumiOperation = {
    /**
     * Analogous to `pulumi up` command.
     */
    Update: "update",
    /**
     * Analogous to `pulumi preview` command.
     */
    Preview: "preview",
    /**
     * Analogous to `pulumi refresh` command.
     */
    Refresh: "refresh",
    /**
     * Analogous to `pulumi destroy` command.
     */
    Destroy: "destroy",
} as const;

export type PulumiOperation = (typeof PulumiOperation)[keyof typeof PulumiOperation];

export const RbacPermission = {
    /**
     * Read permission.
     */
    Read: "environment:read",
    /**
     * Read and decrypt permission.
     */
    ReadDecrypt: "environment:read_decrypt",
    /**
     * Open permission.
     */
    Open: "environment:open",
    /**
     * Write permission.
     */
    Write: "environment:write",
    /**
     * Delete permission.
     */
    Delete: "environment:delete",
    /**
     * Clone permission.
     */
    Clone: "environment:clone",
    /**
     * Rotate permission.
     */
    Rotate: "environment:rotate",
} as const;

export type RbacPermission = (typeof RbacPermission)[keyof typeof RbacPermission];

export const TargetActionType = {
    /**
     * Update action type for approval rules.
     */
    Update: "update",
} as const;

export type TargetActionType = (typeof TargetActionType)[keyof typeof TargetActionType];

export const TeamStackPermissionScope = {
    /**
     * Grants read permissions to stack.
     */
    Read: 101,
    /**
     * Grants edit permissions to stack.
     */
    Edit: 102,
    /**
     * Grants admin permissions to stack.
     */
    Admin: 103,
} as const;

export type TeamStackPermissionScope = (typeof TeamStackPermissionScope)[keyof typeof TeamStackPermissionScope];

export const WebhookFilters = {
    /**
     * Trigger a webhook when a stack is created. Only valid for org webhooks.
     */
    StackCreated: "stack_created",
    /**
     * Trigger a webhook when a stack is deleted. Only valid for org webhooks.
     */
    StackDeleted: "stack_deleted",
    /**
     * Trigger a webhook when a stack update succeeds.
     */
    UpdateSucceeded: "update_succeeded",
    /**
     * Trigger a webhook when a stack update fails.
     */
    UpdateFailed: "update_failed",
    /**
     * Trigger a webhook when a stack preview succeeds.
     */
    PreviewSucceeded: "preview_succeeded",
    /**
     * Trigger a webhook when a stack preview fails.
     */
    PreviewFailed: "preview_failed",
    /**
     * Trigger a webhook when a stack destroy succeeds.
     */
    DestroySucceeded: "destroy_succeeded",
    /**
     * Trigger a webhook when a stack destroy fails.
     */
    DestroyFailed: "destroy_failed",
    /**
     * Trigger a webhook when a stack refresh succeeds.
     */
    RefreshSucceeded: "refresh_succeeded",
    /**
     * Trigger a webhook when a stack refresh fails.
     */
    RefreshFailed: "refresh_failed",
    /**
     * Trigger a webhook when a deployment is queued.
     */
    DeploymentQueued: "deployment_queued",
    /**
     * Trigger a webhook when a deployment starts running.
     */
    DeploymentStarted: "deployment_started",
    /**
     * Trigger a webhook when a deployment succeeds.
     */
    DeploymentSucceeded: "deployment_succeeded",
    /**
     * Trigger a webhook when a deployment fails.
     */
    DeploymentFailed: "deployment_failed",
    /**
     * Trigger a webhook when drift is detected.
     */
    DriftDetected: "drift_detected",
    /**
     * Trigger a webhook when a drift detection run succeeds, regardless of whether drift is detected.
     */
    DriftDetectionSucceeded: "drift_detection_succeeded",
    /**
     * Trigger a webhook when a drift detection run fails.
     */
    DriftDetectionFailed: "drift_detection_failed",
    /**
     * Trigger a webhook when a drift remediation run succeeds.
     */
    DriftRemediationSucceeded: "drift_remediation_succeeded",
    /**
     * Trigger a webhook when a drift remediation run fails.
     */
    DriftRemediationFailed: "drift_remediation_failed",
    /**
     * Trigger a webhook when a new environment is created.
     */
    EnvironmentCreated: "environment_created",
    /**
     * Trigger a webhook when an environment is deleted.
     */
    EnvironmentDeleted: "environment_deleted",
    /**
     * Trigger a webhook when a new revision is created on an environment.
     */
    EnvironmentRevisionCreated: "environment_revision_created",
    /**
     * Trigger a webhook when a revision is retracted on an environment.
     */
    EnvironmentRevisionRetracted: "environment_revision_retracted",
    /**
     * Trigger a webhook when a revision tag is created on an environment.
     */
    EnvironmentRevisionTagCreated: "environment_revision_tag_created",
    /**
     * Trigger a webhook when a revision tag is deleted on an environment.
     */
    EnvironmentRevisionTagDeleted: "environment_revision_tag_deleted",
    /**
     * Trigger a webhook when a revision tag is updated on an environment.
     */
    EnvironmentRevisionTagUpdated: "environment_revision_tag_updated",
    /**
     * Trigger a webhook when an environment tag is created.
     */
    EnvironmentTagCreated: "environment_tag_created",
    /**
     * Trigger a webhook when an environment tag is deleted.
     */
    EnvironmentTagDeleted: "environment_tag_deleted",
    /**
     * Trigger a webhook when an environment tag is updated.
     */
    EnvironmentTagUpdated: "environment_tag_updated",
    /**
     * Trigger a webhook when an imported environment has changed.
     */
    ImportedEnvironmentChanged: "imported_environment_changed",
} as const;

export type WebhookFilters = (typeof WebhookFilters)[keyof typeof WebhookFilters];

export const WebhookFormat = {
    /**
     * The default webhook format.
     */
    Raw: "raw",
    /**
     * Messages formatted for consumption by Slack incoming webhooks.
     */
    Slack: "slack",
    /**
     * Initiate deployments on a stack from a Pulumi Cloud webhook.
     */
    PulumiDeployments: "pulumi_deployments",
    /**
     * Messages formatted for consumption by Microsoft Teams incoming webhooks.
     */
    MicrosoftTeams: "ms_teams",
} as const;

export type WebhookFormat = (typeof WebhookFormat)[keyof typeof WebhookFormat];

export const WebhookGroup = {
    /**
     * A group of webhooks containing all stack events.
     */
    Stacks: "stacks",
    /**
     * A group of webhooks containing all deployment events.
     */
    Deployments: "deployments",
    /**
     * A group of webhooks containing all environment events.
     */
    Environments: "environments",
} as const;

export type WebhookGroup = (typeof WebhookGroup)[keyof typeof WebhookGroup];
