// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A stack is a collection of resources that share a common lifecycle. Stacks are uniquely identified by their name and the project they belong to.
 */
export class Stack extends pulumi.CustomResource {
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Stack {
        return new Stack(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:Stack';

    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }

    /**
     * Optional. Flag indicating whether to delete the stack even if it still contains resources.
     */
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    /**
     * The name of the organization.
     */
    declare public readonly organizationName: pulumi.Output<string>;
    /**
     * The name of the project.
     */
    declare public readonly projectName: pulumi.Output<string>;
    /**
     * The name of the stack.
     */
    declare public readonly stackName: pulumi.Output<string>;

    /**
     * Create a Stack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.organizationName === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            if (args?.projectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if (args?.stackName === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackName'");
            }
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["organizationName"] = args?.organizationName;
            resourceInputs["projectName"] = args?.projectName;
            resourceInputs["stackName"] = args?.stackName;
        } else {
            resourceInputs["forceDestroy"] = undefined /*out*/;
            resourceInputs["organizationName"] = undefined /*out*/;
            resourceInputs["projectName"] = undefined /*out*/;
            resourceInputs["stackName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stack.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Stack resource.
 */
export interface StackArgs {
    /**
     * Optional. Flag indicating whether to delete the stack even if it still contains resources.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The name of the organization.
     */
    organizationName: pulumi.Input<string>;
    /**
     * The name of the project.
     */
    projectName: pulumi.Input<string>;
    /**
     * The name of the stack.
     */
    stackName: pulumi.Input<string>;
}
