// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * A scheduled recurring or single time run of a pulumi command.
 */
export class DeploymentSchedule extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DeploymentSchedule {
        return new DeploymentSchedule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:DeploymentSchedule';

    /**
     * Returns true if the given object is an instance of DeploymentSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeploymentSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentSchedule.__pulumiType;
    }

    /**
     * Organization name.
     */
    declare public readonly organization: pulumi.Output<string>;
    /**
     * Project name.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Which operation to run.
     */
    declare public readonly pulumiOperation: pulumi.Output<enums.PulumiOperation>;
    /**
     * Cron expression for recurring scheduled runs. If you are supplying this, do not supply timestamp.
     */
    declare public readonly scheduleCron: pulumi.Output<string | undefined>;
    /**
     * Schedule ID of the created schedule, assigned by Pulumi Cloud.
     */
    declare public /*out*/ readonly scheduleId: pulumi.Output<string>;
    /**
     * Stack name.
     */
    declare public readonly stack: pulumi.Output<string>;
    /**
     * The time at which the schedule should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
     */
    declare public readonly timestamp: pulumi.Output<string | undefined>;

    /**
     * Create a DeploymentSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentScheduleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.organization === undefined && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.pulumiOperation === undefined && !opts.urn) {
                throw new Error("Missing required property 'pulumiOperation'");
            }
            if (args?.stack === undefined && !opts.urn) {
                throw new Error("Missing required property 'stack'");
            }
            resourceInputs["organization"] = args?.organization;
            resourceInputs["project"] = args?.project;
            resourceInputs["pulumiOperation"] = args?.pulumiOperation;
            resourceInputs["scheduleCron"] = args?.scheduleCron;
            resourceInputs["stack"] = args?.stack;
            resourceInputs["timestamp"] = args?.timestamp;
            resourceInputs["scheduleId"] = undefined /*out*/;
        } else {
            resourceInputs["organization"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["pulumiOperation"] = undefined /*out*/;
            resourceInputs["scheduleCron"] = undefined /*out*/;
            resourceInputs["scheduleId"] = undefined /*out*/;
            resourceInputs["stack"] = undefined /*out*/;
            resourceInputs["timestamp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeploymentSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DeploymentSchedule resource.
 */
export interface DeploymentScheduleArgs {
    /**
     * Organization name.
     */
    organization: pulumi.Input<string>;
    /**
     * Project name.
     */
    project: pulumi.Input<string>;
    /**
     * Which command to run.
     */
    pulumiOperation: pulumi.Input<enums.PulumiOperation>;
    /**
     * Cron expression for recurring scheduled runs. If you are supplying this, do not supply timestamp.
     */
    scheduleCron?: pulumi.Input<string>;
    /**
     * Stack name.
     */
    stack: pulumi.Input<string>;
    /**
     * The time at which the schedule should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
     */
    timestamp?: pulumi.Input<string>;
}
