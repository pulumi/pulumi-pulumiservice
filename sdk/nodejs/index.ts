// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessTokenArgs } from "./accessToken";
export type AccessToken = import("./accessToken").AccessToken;
export const AccessToken: typeof import("./accessToken").AccessToken = null as any;
utilities.lazyLoad(exports, ["AccessToken"], () => require("./accessToken"));

export { AgentPoolArgs } from "./agentPool";
export type AgentPool = import("./agentPool").AgentPool;
export const AgentPool: typeof import("./agentPool").AgentPool = null as any;
utilities.lazyLoad(exports, ["AgentPool"], () => require("./agentPool"));

export { ApprovalRuleArgs } from "./approvalRule";
export type ApprovalRule = import("./approvalRule").ApprovalRule;
export const ApprovalRule: typeof import("./approvalRule").ApprovalRule = null as any;
utilities.lazyLoad(exports, ["ApprovalRule"], () => require("./approvalRule"));

export { CreateTaskArgs, CreateTaskResult, CreateTaskOutputArgs } from "./createTask";
export const createTask: typeof import("./createTask").createTask = null as any;
export const createTaskOutput: typeof import("./createTask").createTaskOutput = null as any;
utilities.lazyLoad(exports, ["createTask","createTaskOutput"], () => require("./createTask"));

export { DeploymentScheduleArgs } from "./deploymentSchedule";
export type DeploymentSchedule = import("./deploymentSchedule").DeploymentSchedule;
export const DeploymentSchedule: typeof import("./deploymentSchedule").DeploymentSchedule = null as any;
utilities.lazyLoad(exports, ["DeploymentSchedule"], () => require("./deploymentSchedule"));

export { DeploymentSettingsArgs } from "./deploymentSettings";
export type DeploymentSettings = import("./deploymentSettings").DeploymentSettings;
export const DeploymentSettings: typeof import("./deploymentSettings").DeploymentSettings = null as any;
utilities.lazyLoad(exports, ["DeploymentSettings"], () => require("./deploymentSettings"));

export { DriftScheduleArgs } from "./driftSchedule";
export type DriftSchedule = import("./driftSchedule").DriftSchedule;
export const DriftSchedule: typeof import("./driftSchedule").DriftSchedule = null as any;
utilities.lazyLoad(exports, ["DriftSchedule"], () => require("./driftSchedule"));

export { EnvironmentArgs } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { EnvironmentRotationScheduleArgs } from "./environmentRotationSchedule";
export type EnvironmentRotationSchedule = import("./environmentRotationSchedule").EnvironmentRotationSchedule;
export const EnvironmentRotationSchedule: typeof import("./environmentRotationSchedule").EnvironmentRotationSchedule = null as any;
utilities.lazyLoad(exports, ["EnvironmentRotationSchedule"], () => require("./environmentRotationSchedule"));

export { EnvironmentVersionTagArgs } from "./environmentVersionTag";
export type EnvironmentVersionTag = import("./environmentVersionTag").EnvironmentVersionTag;
export const EnvironmentVersionTag: typeof import("./environmentVersionTag").EnvironmentVersionTag = null as any;
utilities.lazyLoad(exports, ["EnvironmentVersionTag"], () => require("./environmentVersionTag"));

export { GetPolicyPackArgs, GetPolicyPackResult, GetPolicyPackOutputArgs } from "./getPolicyPack";
export const getPolicyPack: typeof import("./getPolicyPack").getPolicyPack = null as any;
export const getPolicyPackOutput: typeof import("./getPolicyPack").getPolicyPackOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyPack","getPolicyPackOutput"], () => require("./getPolicyPack"));

export { GetPolicyPacksArgs, GetPolicyPacksResult, GetPolicyPacksOutputArgs } from "./getPolicyPacks";
export const getPolicyPacks: typeof import("./getPolicyPacks").getPolicyPacks = null as any;
export const getPolicyPacksOutput: typeof import("./getPolicyPacks").getPolicyPacksOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyPacks","getPolicyPacksOutput"], () => require("./getPolicyPacks"));

export { OidcIssuerArgs } from "./oidcIssuer";
export type OidcIssuer = import("./oidcIssuer").OidcIssuer;
export const OidcIssuer: typeof import("./oidcIssuer").OidcIssuer = null as any;
utilities.lazyLoad(exports, ["OidcIssuer"], () => require("./oidcIssuer"));

export { OrgAccessTokenArgs } from "./orgAccessToken";
export type OrgAccessToken = import("./orgAccessToken").OrgAccessToken;
export const OrgAccessToken: typeof import("./orgAccessToken").OrgAccessToken = null as any;
utilities.lazyLoad(exports, ["OrgAccessToken"], () => require("./orgAccessToken"));

export { PolicyGroupArgs } from "./policyGroup";
export type PolicyGroup = import("./policyGroup").PolicyGroup;
export const PolicyGroup: typeof import("./policyGroup").PolicyGroup = null as any;
utilities.lazyLoad(exports, ["PolicyGroup"], () => require("./policyGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { StackArgs } from "./stack";
export type Stack = import("./stack").Stack;
export const Stack: typeof import("./stack").Stack = null as any;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));

export { StackTagArgs } from "./stackTag";
export type StackTag = import("./stackTag").StackTag;
export const StackTag: typeof import("./stackTag").StackTag = null as any;
utilities.lazyLoad(exports, ["StackTag"], () => require("./stackTag"));

export { TeamArgs } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamAccessTokenArgs } from "./teamAccessToken";
export type TeamAccessToken = import("./teamAccessToken").TeamAccessToken;
export const TeamAccessToken: typeof import("./teamAccessToken").TeamAccessToken = null as any;
utilities.lazyLoad(exports, ["TeamAccessToken"], () => require("./teamAccessToken"));

export { TeamEnvironmentPermissionArgs } from "./teamEnvironmentPermission";
export type TeamEnvironmentPermission = import("./teamEnvironmentPermission").TeamEnvironmentPermission;
export const TeamEnvironmentPermission: typeof import("./teamEnvironmentPermission").TeamEnvironmentPermission = null as any;
utilities.lazyLoad(exports, ["TeamEnvironmentPermission"], () => require("./teamEnvironmentPermission"));

export { TeamStackPermissionArgs } from "./teamStackPermission";
export type TeamStackPermission = import("./teamStackPermission").TeamStackPermission;
export const TeamStackPermission: typeof import("./teamStackPermission").TeamStackPermission = null as any;
utilities.lazyLoad(exports, ["TeamStackPermission"], () => require("./teamStackPermission"));

export { TemplateSourceArgs } from "./templateSource";
export type TemplateSource = import("./templateSource").TemplateSource;
export const TemplateSource: typeof import("./templateSource").TemplateSource = null as any;
utilities.lazyLoad(exports, ["TemplateSource"], () => require("./templateSource"));

export { TtlScheduleArgs } from "./ttlSchedule";
export type TtlSchedule = import("./ttlSchedule").TtlSchedule;
export const TtlSchedule: typeof import("./ttlSchedule").TtlSchedule = null as any;
utilities.lazyLoad(exports, ["TtlSchedule"], () => require("./ttlSchedule"));

export { WebhookArgs } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export enums:
export * from "./types/enums";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pulumiservice:index:AccessToken":
                return new AccessToken(name, <any>undefined, { urn })
            case "pulumiservice:index:AgentPool":
                return new AgentPool(name, <any>undefined, { urn })
            case "pulumiservice:index:ApprovalRule":
                return new ApprovalRule(name, <any>undefined, { urn })
            case "pulumiservice:index:DeploymentSchedule":
                return new DeploymentSchedule(name, <any>undefined, { urn })
            case "pulumiservice:index:DeploymentSettings":
                return new DeploymentSettings(name, <any>undefined, { urn })
            case "pulumiservice:index:DriftSchedule":
                return new DriftSchedule(name, <any>undefined, { urn })
            case "pulumiservice:index:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "pulumiservice:index:EnvironmentRotationSchedule":
                return new EnvironmentRotationSchedule(name, <any>undefined, { urn })
            case "pulumiservice:index:EnvironmentVersionTag":
                return new EnvironmentVersionTag(name, <any>undefined, { urn })
            case "pulumiservice:index:OidcIssuer":
                return new OidcIssuer(name, <any>undefined, { urn })
            case "pulumiservice:index:OrgAccessToken":
                return new OrgAccessToken(name, <any>undefined, { urn })
            case "pulumiservice:index:PolicyGroup":
                return new PolicyGroup(name, <any>undefined, { urn })
            case "pulumiservice:index:Stack":
                return new Stack(name, <any>undefined, { urn })
            case "pulumiservice:index:StackTag":
                return new StackTag(name, <any>undefined, { urn })
            case "pulumiservice:index:Team":
                return new Team(name, <any>undefined, { urn })
            case "pulumiservice:index:TeamAccessToken":
                return new TeamAccessToken(name, <any>undefined, { urn })
            case "pulumiservice:index:TeamEnvironmentPermission":
                return new TeamEnvironmentPermission(name, <any>undefined, { urn })
            case "pulumiservice:index:TeamStackPermission":
                return new TeamStackPermission(name, <any>undefined, { urn })
            case "pulumiservice:index:TemplateSource":
                return new TemplateSource(name, <any>undefined, { urn })
            case "pulumiservice:index:TtlSchedule":
                return new TtlSchedule(name, <any>undefined, { urn })
            case "pulumiservice:index:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pulumiservice", "index", _module)
pulumi.runtime.registerResourcePackage("pulumiservice", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pulumiservice") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
