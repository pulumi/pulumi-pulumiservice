// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * An ESC Environment.
 *
 * ### Import
 *
 * Environments can be imported using the `id`, which for environments is `{org}/{project}/{environment}` or `{org}/{environment}` e.g.,
 *
 * ```sh
 *  $ pulumi import pulumiservice:index:Environment my_environment my-org/my-project/my-env
 * ```
 *
 * or using the legacy format (assumes "default" project):
 *
 * ```sh
 *  $ pulumi import pulumiservice:index:Environment my_environment my-org/my-env
 * ```
 */
export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    /**
     * Environment name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Organization name.
     */
    declare public readonly organization: pulumi.Output<string>;
    /**
     * Project name.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Revision number of the latest version.
     */
    declare public /*out*/ readonly revision: pulumi.Output<number>;
    /**
     * Environment's yaml file.
     */
    declare public readonly yaml: pulumi.Output<pulumi.asset.Asset | pulumi.asset.Archive>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.organization === undefined && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if (args?.yaml === undefined && !opts.urn) {
                throw new Error("Missing required property 'yaml'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["project"] = (args?.project) ?? "default";
            resourceInputs["yaml"] = args?.yaml;
            resourceInputs["revision"] = undefined /*out*/;
        } else {
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organization"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    /**
     * Environment name.
     */
    name: pulumi.Input<string>;
    /**
     * Organization name.
     */
    organization: pulumi.Input<string>;
    /**
     * Project name.
     */
    project?: pulumi.Input<string>;
    /**
     * Environment's yaml file.
     */
    yaml: pulumi.Input<pulumi.asset.Asset | pulumi.asset.Archive>;
}
