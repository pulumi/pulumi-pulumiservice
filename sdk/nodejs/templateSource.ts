// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * A source for Pulumi templates
 */
export class TemplateSource extends pulumi.CustomResource {
    /**
     * Get an existing TemplateSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TemplateSource {
        return new TemplateSource(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:TemplateSource';

    /**
     * Returns true if the given object is an instance of TemplateSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TemplateSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TemplateSource.__pulumiType;
    }

    /**
     * The default destination for projects using templates from this source.
     */
    declare public readonly destination: pulumi.Output<outputs.TemplateSourceDestination | undefined>;
    /**
     * Organization name.
     */
    declare public readonly organizationName: pulumi.Output<string>;
    /**
     * Source name.
     */
    declare public readonly sourceName: pulumi.Output<string>;
    /**
     * Github URL of the repository from which to grab templates.
     */
    declare public readonly sourceURL: pulumi.Output<string>;

    /**
     * Create a TemplateSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateSourceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.organizationName === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            if (args?.sourceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceName'");
            }
            if (args?.sourceURL === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceURL'");
            }
            resourceInputs["destination"] = args?.destination;
            resourceInputs["organizationName"] = args?.organizationName;
            resourceInputs["sourceName"] = args?.sourceName;
            resourceInputs["sourceURL"] = args?.sourceURL;
        } else {
            resourceInputs["destination"] = undefined /*out*/;
            resourceInputs["organizationName"] = undefined /*out*/;
            resourceInputs["sourceName"] = undefined /*out*/;
            resourceInputs["sourceURL"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TemplateSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TemplateSource resource.
 */
export interface TemplateSourceArgs {
    /**
     * The default destination for projects using templates from this source.
     */
    destination?: pulumi.Input<inputs.TemplateSourceDestinationArgs>;
    /**
     * Organization name.
     */
    organizationName: pulumi.Input<string>;
    /**
     * Source name.
     */
    sourceName: pulumi.Input<string>;
    /**
     * Github URL of the repository from which to grab templates.
     */
    sourceURL: pulumi.Input<string>;
}
