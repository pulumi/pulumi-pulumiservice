// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A published package version in the Pulumi Registry. Packages are typically published via `pulumi publish` CLI, but this resource allows managing published packages declaratively, including publishing from uploaded artifacts and managing the lifecycle of published versions.
 */
export class PackageVersion extends pulumi.CustomResource {
    /**
     * Get an existing PackageVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PackageVersion {
        return new PackageVersion(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:PackageVersion';

    /**
     * Returns true if the given object is an instance of PackageVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackageVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackageVersion.__pulumiType;
    }

    /**
     * The category of the package.
     */
    public readonly category!: pulumi.Output<string | undefined>;
    /**
     * The date and time the package version was created (output).
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the package.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The index.json content for the package.
     */
    public readonly indexContent!: pulumi.Output<string>;
    /**
     * The installation-configuration.json content for the package.
     */
    public readonly installationConfigContent!: pulumi.Output<string>;
    /**
     * The URL of the logo for the package.
     */
    public readonly logoUrl!: pulumi.Output<string | undefined>;
    /**
     * The name of the package.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The maturity level of the package.
     */
    public readonly packageStatus!: pulumi.Output<string>;
    /**
     * The URL to download the plugin at (output).
     */
    public /*out*/ readonly pluginDownloadURL!: pulumi.Output<string | undefined>;
    /**
     * The publisher of the package (typically the organization name).
     */
    public readonly publisher!: pulumi.Output<string>;
    /**
     * The URL of the readme for the package (output).
     */
    public /*out*/ readonly readmeURL!: pulumi.Output<string>;
    /**
     * The URL of the repository the package is hosted in.
     */
    public readonly repoUrl!: pulumi.Output<string | undefined>;
    /**
     * The schema.json content for the package.
     */
    public readonly schemaContent!: pulumi.Output<string>;
    /**
     * The URL of the schema for the package (output).
     */
    public /*out*/ readonly schemaURL!: pulumi.Output<string>;
    /**
     * The source of the package (e.g., 'pulumi').
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * The title/display name of the package.
     */
    public readonly title!: pulumi.Output<string | undefined>;
    /**
     * The version of the package in semver format.
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * The visibility of the package.
     */
    public readonly visibility!: pulumi.Output<string>;

    /**
     * Create a PackageVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackageVersionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.indexContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexContent'");
            }
            if ((!args || args.installationConfigContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'installationConfigContent'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.publisher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publisher'");
            }
            if ((!args || args.schemaContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaContent'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexContent"] = args ? args.indexContent : undefined;
            resourceInputs["installationConfigContent"] = args ? args.installationConfigContent : undefined;
            resourceInputs["logoUrl"] = args ? args.logoUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packageStatus"] = (args ? args.packageStatus : undefined) ?? "ga";
            resourceInputs["publisher"] = args ? args.publisher : undefined;
            resourceInputs["repoUrl"] = args ? args.repoUrl : undefined;
            resourceInputs["schemaContent"] = args ? args.schemaContent : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["visibility"] = (args ? args.visibility : undefined) ?? "private";
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["pluginDownloadURL"] = undefined /*out*/;
            resourceInputs["readmeURL"] = undefined /*out*/;
            resourceInputs["schemaURL"] = undefined /*out*/;
        } else {
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["indexContent"] = undefined /*out*/;
            resourceInputs["installationConfigContent"] = undefined /*out*/;
            resourceInputs["logoUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["packageStatus"] = undefined /*out*/;
            resourceInputs["pluginDownloadURL"] = undefined /*out*/;
            resourceInputs["publisher"] = undefined /*out*/;
            resourceInputs["readmeURL"] = undefined /*out*/;
            resourceInputs["repoUrl"] = undefined /*out*/;
            resourceInputs["schemaContent"] = undefined /*out*/;
            resourceInputs["schemaURL"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["title"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackageVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PackageVersion resource.
 */
export interface PackageVersionArgs {
    /**
     * The category of the package.
     */
    category?: pulumi.Input<string>;
    /**
     * The description of the package.
     */
    description?: pulumi.Input<string>;
    /**
     * The index.json content for the package. This file contains the API documentation index.
     */
    indexContent: pulumi.Input<string>;
    /**
     * The installation-configuration.json content for the package. This file contains configuration for installing the package.
     */
    installationConfigContent: pulumi.Input<string>;
    /**
     * The URL of the logo for the package.
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * The name of the package.
     */
    name: pulumi.Input<string>;
    /**
     * The maturity level of the package (e.g., 'ga', 'public_preview').
     */
    packageStatus?: pulumi.Input<string>;
    /**
     * The publisher of the package (typically the organization name).
     */
    publisher: pulumi.Input<string>;
    /**
     * The URL of the repository the package is hosted in.
     */
    repoUrl?: pulumi.Input<string>;
    /**
     * The schema.json content for the package. This is the Pulumi package schema that defines the resources, functions, and types provided by the package.
     */
    schemaContent: pulumi.Input<string>;
    /**
     * The source of the package (e.g., 'pulumi').
     */
    source: pulumi.Input<string>;
    /**
     * The title/display name of the package.
     */
    title?: pulumi.Input<string>;
    /**
     * The version of the package in semver format.
     */
    version: pulumi.Input<string>;
    /**
     * The visibility of the package ('public' or 'private').
     */
    visibility?: pulumi.Input<string>;
}
