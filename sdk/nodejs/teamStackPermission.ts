// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Grants a team permissions to the specified stack.
 */
export class TeamStackPermission extends pulumi.CustomResource {
    /**
     * Get an existing TeamStackPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TeamStackPermission {
        return new TeamStackPermission(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:TeamStackPermission';

    /**
     * Returns true if the given object is an instance of TeamStackPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamStackPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamStackPermission.__pulumiType;
    }


    /**
     * Create a TeamStackPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamStackPermissionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.stack === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stack'");
            }
            if ((!args || args.team === undefined) && !opts.urn) {
                throw new Error("Missing required property 'team'");
            }
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["stack"] = args ? args.stack : undefined;
            resourceInputs["team"] = args ? args.team : undefined;
        } else {
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamStackPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TeamStackPermission resource.
 */
export interface TeamStackPermissionArgs {
    /**
     * The organization or the personal account name of the stack.
     */
    organization: pulumi.Input<string>;
    /**
     * Sets the permission level that this team will be granted to the stack.
     */
    permission: enums.TeamStackPermissionScope;
    /**
     * The project name for this stack.
     */
    project: pulumi.Input<string>;
    /**
     * The name of the stack that the team will be granted permissions to.
     */
    stack: pulumi.Input<string>;
    /**
     * The name of the team to grant this stack permissions to. This is not the display name.
     */
    team: pulumi.Input<string>;
}
