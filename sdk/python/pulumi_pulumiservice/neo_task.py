# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NeoTaskArgs', 'NeoTask']

@pulumi.input_type
class NeoTaskArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 organization_name: pulumi.Input[str],
                 entity_add: Optional[pulumi.Input[Sequence[pulumi.Input['TaskEntityArgs']]]] = None,
                 entity_remove: Optional[pulumi.Input[Sequence[pulumi.Input['TaskEntityArgs']]]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NeoTask resource.
        :param pulumi.Input[str] content: The exact user instruction for the task.
        :param pulumi.Input[str] organization_name: The name of the organization.
        :param pulumi.Input[Sequence[pulumi.Input['TaskEntityArgs']]] entity_add: Entities to add in this task.
        :param pulumi.Input[Sequence[pulumi.Input['TaskEntityArgs']]] entity_remove: Entities to remove in this task.
        :param pulumi.Input[str] timestamp: When the event occurred (ISO 8601 format). Defaults to current time if not specified.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "organization_name", organization_name)
        if entity_add is not None:
            pulumi.set(__self__, "entity_add", entity_add)
        if entity_remove is not None:
            pulumi.set(__self__, "entity_remove", entity_remove)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The exact user instruction for the task.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        """
        The name of the organization.
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter(name="entityAdd")
    def entity_add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskEntityArgs']]]]:
        """
        Entities to add in this task.
        """
        return pulumi.get(self, "entity_add")

    @entity_add.setter
    def entity_add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskEntityArgs']]]]):
        pulumi.set(self, "entity_add", value)

    @property
    @pulumi.getter(name="entityRemove")
    def entity_remove(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskEntityArgs']]]]:
        """
        Entities to remove in this task.
        """
        return pulumi.get(self, "entity_remove")

    @entity_remove.setter
    def entity_remove(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskEntityArgs']]]]):
        pulumi.set(self, "entity_remove", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        When the event occurred (ISO 8601 format). Defaults to current time if not specified.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)


class NeoTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 entity_add: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskEntityArgs', 'TaskEntityArgsDict']]]]] = None,
                 entity_remove: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskEntityArgs', 'TaskEntityArgsDict']]]]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A task created in the Neo agent system for tracking user instructions and entity changes.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: The exact user instruction for the task.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskEntityArgs', 'TaskEntityArgsDict']]]] entity_add: Entities to add in this task.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskEntityArgs', 'TaskEntityArgsDict']]]] entity_remove: Entities to remove in this task.
        :param pulumi.Input[str] organization_name: The name of the organization.
        :param pulumi.Input[str] timestamp: When the event occurred (ISO 8601 format). Defaults to current time if not specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NeoTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A task created in the Neo agent system for tracking user instructions and entity changes.

        :param str resource_name: The name of the resource.
        :param NeoTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NeoTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 entity_add: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskEntityArgs', 'TaskEntityArgsDict']]]]] = None,
                 entity_remove: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskEntityArgs', 'TaskEntityArgsDict']]]]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NeoTaskArgs.__new__(NeoTaskArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["entity_add"] = entity_add
            __props__.__dict__["entity_remove"] = entity_remove
            if organization_name is None and not opts.urn:
                raise TypeError("Missing required property 'organization_name'")
            __props__.__dict__["organization_name"] = organization_name
            __props__.__dict__["timestamp"] = timestamp
        super(NeoTask, __self__).__init__(
            'pulumiservice:index:NeoTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NeoTask':
        """
        Get an existing NeoTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NeoTaskArgs.__new__(NeoTaskArgs)

        __props__.__dict__["content"] = None
        __props__.__dict__["entity_add"] = None
        __props__.__dict__["entity_remove"] = None
        __props__.__dict__["organization_name"] = None
        __props__.__dict__["timestamp"] = None
        return NeoTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        The exact user instruction for the task.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="entityAdd")
    def entity_add(self) -> pulumi.Output[Optional[Sequence['outputs.TaskEntity']]]:
        """
        Entities to add in this task.
        """
        return pulumi.get(self, "entity_add")

    @property
    @pulumi.getter(name="entityRemove")
    def entity_remove(self) -> pulumi.Output[Optional[Sequence['outputs.TaskEntity']]]:
        """
        Entities to remove in this task.
        """
        return pulumi.get(self, "entity_remove")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Output[str]:
        """
        The name of the organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def timestamp(self) -> pulumi.Output[Optional[str]]:
        """
        When the event occurred (ISO 8601 format).
        """
        return pulumi.get(self, "timestamp")

