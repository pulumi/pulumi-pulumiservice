# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'CreateTaskResult',
    'AwaitableCreateTaskResult',
    'create_task',
    'create_task_output',
]

@pulumi.output_type
class CreateTaskResult:
    def __init__(__self__, content=None, entities=None, id=None, organization_name=None, timestamp=None):
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if entities and not isinstance(entities, list):
            raise TypeError("Expected argument 'entities' to be a list")
        pulumi.set(__self__, "entities", entities)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization_name and not isinstance(organization_name, str):
            raise TypeError("Expected argument 'organization_name' to be a str")
        pulumi.set(__self__, "organization_name", organization_name)
        if timestamp and not isinstance(timestamp, str):
            raise TypeError("Expected argument 'timestamp' to be a str")
        pulumi.set(__self__, "timestamp", timestamp)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The exact user instruction for the task.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def entities(self) -> Optional[Sequence['outputs.TaskEntity']]:
        """
        The final list of entities after add/remove operations.
        """
        return pulumi.get(self, "entities")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identifier of the created task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> _builtins.str:
        """
        The name of the organization.
        """
        return pulumi.get(self, "organization_name")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.str:
        """
        When the task was created (ISO 8601 format).
        """
        return pulumi.get(self, "timestamp")


class AwaitableCreateTaskResult(CreateTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CreateTaskResult(
            content=self.content,
            entities=self.entities,
            id=self.id,
            organization_name=self.organization_name,
            timestamp=self.timestamp)


def create_task(content: Optional[_builtins.str] = None,
                entity_add: Optional[Sequence[Union['TaskEntity', 'TaskEntityDict']]] = None,
                entity_remove: Optional[Sequence[Union['TaskEntity', 'TaskEntityDict']]] = None,
                organization_name: Optional[_builtins.str] = None,
                timestamp: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCreateTaskResult:
    """
    Creates a task in the Neo agent system for tracking user instructions and entity changes. Tasks are immutable once created.


    :param _builtins.str content: The exact user instruction for the task.
    :param Sequence[Union['TaskEntity', 'TaskEntityDict']] entity_add: Entities to add in this task.
    :param Sequence[Union['TaskEntity', 'TaskEntityDict']] entity_remove: Entities to remove in this task.
    :param _builtins.str organization_name: The name of the organization.
    :param _builtins.str timestamp: When the event occurred (ISO 8601 format). Defaults to current time if not specified.
    """
    __args__ = dict()
    __args__['content'] = content
    __args__['entityAdd'] = entity_add
    __args__['entityRemove'] = entity_remove
    __args__['organizationName'] = organization_name
    __args__['timestamp'] = timestamp
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pulumiservice:index:createTask', __args__, opts=opts, typ=CreateTaskResult).value

    return AwaitableCreateTaskResult(
        content=pulumi.get(__ret__, 'content'),
        entities=pulumi.get(__ret__, 'entities'),
        id=pulumi.get(__ret__, 'id'),
        organization_name=pulumi.get(__ret__, 'organization_name'),
        timestamp=pulumi.get(__ret__, 'timestamp'))
def create_task_output(content: Optional[pulumi.Input[_builtins.str]] = None,
                       entity_add: Optional[pulumi.Input[Optional[Sequence[Union['TaskEntity', 'TaskEntityDict']]]]] = None,
                       entity_remove: Optional[pulumi.Input[Optional[Sequence[Union['TaskEntity', 'TaskEntityDict']]]]] = None,
                       organization_name: Optional[pulumi.Input[_builtins.str]] = None,
                       timestamp: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[CreateTaskResult]:
    """
    Creates a task in the Neo agent system for tracking user instructions and entity changes. Tasks are immutable once created.


    :param _builtins.str content: The exact user instruction for the task.
    :param Sequence[Union['TaskEntity', 'TaskEntityDict']] entity_add: Entities to add in this task.
    :param Sequence[Union['TaskEntity', 'TaskEntityDict']] entity_remove: Entities to remove in this task.
    :param _builtins.str organization_name: The name of the organization.
    :param _builtins.str timestamp: When the event occurred (ISO 8601 format). Defaults to current time if not specified.
    """
    __args__ = dict()
    __args__['content'] = content
    __args__['entityAdd'] = entity_add
    __args__['entityRemove'] = entity_remove
    __args__['organizationName'] = organization_name
    __args__['timestamp'] = timestamp
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('pulumiservice:index:createTask', __args__, opts=opts, typ=CreateTaskResult)
    return __ret__.apply(lambda __response__: CreateTaskResult(
        content=pulumi.get(__response__, 'content'),
        entities=pulumi.get(__response__, 'entities'),
        id=pulumi.get(__response__, 'id'),
        organization_name=pulumi.get(__response__, 'organization_name'),
        timestamp=pulumi.get(__response__, 'timestamp')))
