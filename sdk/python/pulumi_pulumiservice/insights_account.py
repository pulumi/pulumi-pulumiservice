# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['InsightsAccountArgs', 'InsightsAccount']

@pulumi.input_type
class InsightsAccountArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 environment: pulumi.Input[str],
                 organization_name: pulumi.Input[str],
                 provider: pulumi.Input[str],
                 cron: Optional[pulumi.Input[str]] = None,
                 provider_config: Optional[Any] = None):
        """
        The set of arguments for constructing a InsightsAccount resource.
        :param pulumi.Input[str] account_name: Name of the insights account.
        :param pulumi.Input[str] environment: The ESC environment used for provider credentials.
        :param pulumi.Input[str] organization_name: The organization's name.
        :param pulumi.Input[str] provider: The cloud provider (e.g., 'aws', 'azure', 'gcp').
        :param pulumi.Input[str] cron: Optional cron expression for scheduled scanning.
        :param Any provider_config: Provider-specific configuration as a JSON object.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "provider", provider)
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if provider_config is not None:
            pulumi.set(__self__, "provider_config", provider_config)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Name of the insights account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        """
        The ESC environment used for provider credentials.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        """
        The organization's name.
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Input[str]:
        """
        The cloud provider (e.g., 'aws', 'azure', 'gcp').
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input[str]]:
        """
        Optional cron expression for scheduled scanning.
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron", value)

    @property
    @pulumi.getter(name="providerConfig")
    def provider_config(self) -> Optional[Any]:
        """
        Provider-specific configuration as a JSON object.
        """
        return pulumi.get(self, "provider_config")

    @provider_config.setter
    def provider_config(self, value: Optional[Any]):
        pulumi.set(self, "provider_config", value)


class InsightsAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 cron: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 provider_config: Optional[Any] = None,
                 __props__=None):
        """
        Insights Account for cloud resource scanning and analysis

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: Name of the insights account.
        :param pulumi.Input[str] cron: Optional cron expression for scheduled scanning.
        :param pulumi.Input[str] environment: The ESC environment used for provider credentials.
        :param pulumi.Input[str] organization_name: The organization's name.
        :param pulumi.Input[str] provider: The cloud provider (e.g., 'aws', 'azure', 'gcp').
        :param Any provider_config: Provider-specific configuration as a JSON object.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InsightsAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Insights Account for cloud resource scanning and analysis

        :param str resource_name: The name of the resource.
        :param InsightsAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InsightsAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 cron: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 provider_config: Optional[Any] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InsightsAccountArgs.__new__(InsightsAccountArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            __props__.__dict__["cron"] = cron
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            if organization_name is None and not opts.urn:
                raise TypeError("Missing required property 'organization_name'")
            __props__.__dict__["organization_name"] = organization_name
            if provider is None and not opts.urn:
                raise TypeError("Missing required property 'provider'")
            __props__.__dict__["provider"] = provider
            __props__.__dict__["provider_config"] = provider_config
            __props__.__dict__["insights_account_id"] = None
            __props__.__dict__["provider_version"] = None
            __props__.__dict__["scheduled_scan_enabled"] = None
        super(InsightsAccount, __self__).__init__(
            'pulumiservice:index:InsightsAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'InsightsAccount':
        """
        Get an existing InsightsAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = InsightsAccountArgs.__new__(InsightsAccountArgs)

        __props__.__dict__["account_name"] = None
        __props__.__dict__["cron"] = None
        __props__.__dict__["environment"] = None
        __props__.__dict__["insights_account_id"] = None
        __props__.__dict__["organization_name"] = None
        __props__.__dict__["provider"] = None
        __props__.__dict__["provider_config"] = None
        __props__.__dict__["provider_version"] = None
        __props__.__dict__["scheduled_scan_enabled"] = None
        return InsightsAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[str]:
        """
        The name of the insights account.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def cron(self) -> pulumi.Output[Optional[str]]:
        """
        Optional cron expression for scheduled scanning.
        """
        return pulumi.get(self, "cron")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[str]:
        """
        The ESC environment used for provider credentials.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="insightsAccountId")
    def insights_account_id(self) -> pulumi.Output[str]:
        """
        The insights account identifier.
        """
        return pulumi.get(self, "insights_account_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Output[str]:
        """
        The organization's name.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Output[str]:
        """
        The cloud provider (e.g., 'aws', 'azure', 'gcp').
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="providerConfig")
    def provider_config(self) -> pulumi.Output[Optional[Any]]:
        """
        Provider-specific configuration as a JSON object.
        """
        return pulumi.get(self, "provider_config")

    @property
    @pulumi.getter(name="providerVersion")
    def provider_version(self) -> pulumi.Output[Optional[str]]:
        """
        The provider version used for scanning.
        """
        return pulumi.get(self, "provider_version")

    @property
    @pulumi.getter(name="scheduledScanEnabled")
    def scheduled_scan_enabled(self) -> pulumi.Output[bool]:
        """
        Whether scheduled scanning is enabled.
        """
        return pulumi.get(self, "scheduled_scan_enabled")

