# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 service_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[_builtins.str] access_token: Access Token to authenticate with Pulumi Cloud.
        :param pulumi.Input[_builtins.str] service_url: The service URL used to reach Pulumi Cloud.
        """
        if access_token is None:
            access_token = _utilities.get_env('PULUMI_ACCESS_TOKEN')
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if service_url is None:
            service_url = (_utilities.get_env('PULUMI_BACKEND_URL') or 'https://api.pulumi.com')
        if service_url is not None:
            pulumi.set(__self__, "service_url", service_url)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access Token to authenticate with Pulumi Cloud.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_token", value)

    @_builtins.property
    @pulumi.getter(name="serviceURL")
    def service_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service URL used to reach Pulumi Cloud.
        """
        return pulumi.get(self, "service_url")

    @service_url.setter
    def service_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_url", value)


@pulumi.type_token("pulumi:providers:pulumiservice")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 service_url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Pulumiservice resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_token: Access Token to authenticate with Pulumi Cloud.
        :param pulumi.Input[_builtins.str] service_url: The service URL used to reach Pulumi Cloud.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Pulumiservice resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 service_url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if access_token is None:
                access_token = _utilities.get_env('PULUMI_ACCESS_TOKEN')
            __props__.__dict__["access_token"] = None if access_token is None else pulumi.Output.secret(access_token)
            if service_url is None:
                service_url = (_utilities.get_env('PULUMI_BACKEND_URL') or 'https://api.pulumi.com')
            __props__.__dict__["service_url"] = service_url
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'pulumiservice',
            resource_name,
            __props__,
            opts)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Access Token to authenticate with Pulumi Cloud.
        """
        return pulumi.get(self, "access_token")

    @_builtins.property
    @pulumi.getter(name="serviceURL")
    def service_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The service URL used to reach Pulumi Cloud.
        """
        return pulumi.get(self, "service_url")

