# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetStacksResult',
    'AwaitableGetStacksResult',
    'get_stacks',
    'get_stacks_output',
]

@pulumi.output_type
class GetStacksResult:
    def __init__(__self__, continuation_token=None, stacks=None):
        if continuation_token and not isinstance(continuation_token, str):
            raise TypeError("Expected argument 'continuation_token' to be a str")
        pulumi.set(__self__, "continuation_token", continuation_token)
        if stacks and not isinstance(stacks, list):
            raise TypeError("Expected argument 'stacks' to be a list")
        pulumi.set(__self__, "stacks", stacks)

    @property
    @pulumi.getter(name="continuationToken")
    def continuation_token(self) -> Optional[str]:
        """
        Continuation token for pagination.
        """
        return pulumi.get(self, "continuation_token")

    @property
    @pulumi.getter
    def stacks(self) -> Sequence[Mapping[str, str]]:
        """
        List of accessible stacks.
        """
        return pulumi.get(self, "stacks")


class AwaitableGetStacksResult(GetStacksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStacksResult(
            continuation_token=self.continuation_token,
            stacks=self.stacks)


def get_stacks(max_results: Optional[int] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStacksResult:
    """
    Get a list of all stacks accessible by the authenticated user.


    :param int max_results: Maximum number of stacks to return. If not specified, all stacks are returned.
    """
    __args__ = dict()
    __args__['maxResults'] = max_results
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pulumiservice:index:getStacks', __args__, opts=opts, typ=GetStacksResult).value

    return AwaitableGetStacksResult(
        continuation_token=pulumi.get(__ret__, 'continuation_token'),
        stacks=pulumi.get(__ret__, 'stacks'))
def get_stacks_output(max_results: Optional[pulumi.Input[Optional[int]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStacksResult]:
    """
    Get a list of all stacks accessible by the authenticated user.


    :param int max_results: Maximum number of stacks to return. If not specified, all stacks are returned.
    """
    __args__ = dict()
    __args__['maxResults'] = max_results
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('pulumiservice:index:getStacks', __args__, opts=opts, typ=GetStacksResult)
    return __ret__.apply(lambda __response__: GetStacksResult(
        continuation_token=pulumi.get(__response__, 'continuation_token'),
        stacks=pulumi.get(__response__, 'stacks')))
