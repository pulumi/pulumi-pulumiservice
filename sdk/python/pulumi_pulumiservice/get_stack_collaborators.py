# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetStackCollaboratorsResult',
    'AwaitableGetStackCollaboratorsResult',
    'get_stack_collaborators',
    'get_stack_collaborators_output',
]

@pulumi.output_type
class GetStackCollaboratorsResult:
    def __init__(__self__, users=None):
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def users(self) -> Sequence[Mapping[str, str]]:
        """
        List of users with direct collaborator permissions on this stack.
        """
        return pulumi.get(self, "users")


class AwaitableGetStackCollaboratorsResult(GetStackCollaboratorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStackCollaboratorsResult(
            users=self.users)


def get_stack_collaborators(organization_name: Optional[str] = None,
                            project_name: Optional[str] = None,
                            stack_name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStackCollaboratorsResult:
    """
    Get all individual user collaborators that have direct access to a specific stack (not team-derived access).


    :param str organization_name: The name of the Pulumi organization.
    :param str project_name: The name of the project.
    :param str stack_name: The name of the stack.
    """
    __args__ = dict()
    __args__['organizationName'] = organization_name
    __args__['projectName'] = project_name
    __args__['stackName'] = stack_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pulumiservice:index:getStackCollaborators', __args__, opts=opts, typ=GetStackCollaboratorsResult).value

    return AwaitableGetStackCollaboratorsResult(
        users=pulumi.get(__ret__, 'users'))
def get_stack_collaborators_output(organization_name: Optional[pulumi.Input[str]] = None,
                                   project_name: Optional[pulumi.Input[str]] = None,
                                   stack_name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStackCollaboratorsResult]:
    """
    Get all individual user collaborators that have direct access to a specific stack (not team-derived access).


    :param str organization_name: The name of the Pulumi organization.
    :param str project_name: The name of the project.
    :param str stack_name: The name of the stack.
    """
    __args__ = dict()
    __args__['organizationName'] = organization_name
    __args__['projectName'] = project_name
    __args__['stackName'] = stack_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('pulumiservice:index:getStackCollaborators', __args__, opts=opts, typ=GetStackCollaboratorsResult)
    return __ret__.apply(lambda __response__: GetStackCollaboratorsResult(
        users=pulumi.get(__response__, 'users')))
