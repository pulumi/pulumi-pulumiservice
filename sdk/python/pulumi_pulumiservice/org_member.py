# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OrgMemberArgs', 'OrgMember']

@pulumi.input_type
class OrgMemberArgs:
    def __init__(__self__, *,
                 organization_name: pulumi.Input[str],
                 role: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a OrgMember resource.
        :param pulumi.Input[str] organization_name: The name of the Pulumi organization.
        :param pulumi.Input[str] role: The role to assign to the user. Must be either 'admin' or 'member'.
        :param pulumi.Input[str] user_name: The username of the Pulumi user to add to the organization.
        """
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        """
        The name of the Pulumi organization.
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role to assign to the user. Must be either 'admin' or 'member'.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        The username of the Pulumi user to add to the organization.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


class OrgMember(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages the membership of a user in a Pulumi Cloud organization. This resource allows you to add users to organizations and assign roles (admin or member).

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] organization_name: The name of the Pulumi organization.
        :param pulumi.Input[str] role: The role to assign to the user. Must be either 'admin' or 'member'.
        :param pulumi.Input[str] user_name: The username of the Pulumi user to add to the organization.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgMemberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages the membership of a user in a Pulumi Cloud organization. This resource allows you to add users to organizations and assign roles (admin or member).

        :param str resource_name: The name of the resource.
        :param OrgMemberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgMemberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgMemberArgs.__new__(OrgMemberArgs)

            if organization_name is None and not opts.urn:
                raise TypeError("Missing required property 'organization_name'")
            __props__.__dict__["organization_name"] = organization_name
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["known_to_pulumi"] = None
            __props__.__dict__["virtual_admin"] = None
        super(OrgMember, __self__).__init__(
            'pulumiservice:index:OrgMember',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OrgMember':
        """
        Get an existing OrgMember resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OrgMemberArgs.__new__(OrgMemberArgs)

        __props__.__dict__["known_to_pulumi"] = None
        __props__.__dict__["organization_name"] = None
        __props__.__dict__["role"] = None
        __props__.__dict__["user_name"] = None
        __props__.__dict__["virtual_admin"] = None
        return OrgMember(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="knownToPulumi")
    def known_to_pulumi(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the user is known to Pulumi (read-only).
        """
        return pulumi.get(self, "known_to_pulumi")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Output[str]:
        """
        The name of the Pulumi organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        The role to assign to the user. Must be either 'admin' or 'member'.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        The username of the Pulumi user to add to the organization.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="virtualAdmin")
    def virtual_admin(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the user is a virtual admin (read-only).
        """
        return pulumi.get(self, "virtual_admin")

