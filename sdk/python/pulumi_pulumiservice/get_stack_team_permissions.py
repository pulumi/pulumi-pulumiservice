# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetStackTeamPermissionsResult',
    'AwaitableGetStackTeamPermissionsResult',
    'get_stack_team_permissions',
    'get_stack_team_permissions_output',
]

@pulumi.output_type
class GetStackTeamPermissionsResult:
    def __init__(__self__, teams=None):
        if teams and not isinstance(teams, list):
            raise TypeError("Expected argument 'teams' to be a list")
        pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter
    def teams(self) -> Sequence[Mapping[str, str]]:
        """
        List of teams with permissions on this stack.
        """
        return pulumi.get(self, "teams")


class AwaitableGetStackTeamPermissionsResult(GetStackTeamPermissionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStackTeamPermissionsResult(
            teams=self.teams)


def get_stack_team_permissions(organization_name: Optional[str] = None,
                               project_name: Optional[str] = None,
                               stack_name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStackTeamPermissionsResult:
    """
    Get all teams that have access to a specific stack.


    :param str organization_name: The name of the Pulumi organization.
    :param str project_name: The name of the project.
    :param str stack_name: The name of the stack.
    """
    __args__ = dict()
    __args__['organizationName'] = organization_name
    __args__['projectName'] = project_name
    __args__['stackName'] = stack_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pulumiservice:index:getStackTeamPermissions', __args__, opts=opts, typ=GetStackTeamPermissionsResult).value

    return AwaitableGetStackTeamPermissionsResult(
        teams=pulumi.get(__ret__, 'teams'))
def get_stack_team_permissions_output(organization_name: Optional[pulumi.Input[str]] = None,
                                      project_name: Optional[pulumi.Input[str]] = None,
                                      stack_name: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStackTeamPermissionsResult]:
    """
    Get all teams that have access to a specific stack.


    :param str organization_name: The name of the Pulumi organization.
    :param str project_name: The name of the project.
    :param str stack_name: The name of the stack.
    """
    __args__ = dict()
    __args__['organizationName'] = organization_name
    __args__['projectName'] = project_name
    __args__['stackName'] = stack_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('pulumiservice:index:getStackTeamPermissions', __args__, opts=opts, typ=GetStackTeamPermissionsResult)
    return __ret__.apply(lambda __response__: GetStackTeamPermissionsResult(
        teams=pulumi.get(__response__, 'teams')))
