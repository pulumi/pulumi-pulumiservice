# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PackageVersionArgs', 'PackageVersion']

@pulumi.input_type
class PackageVersionArgs:
    def __init__(__self__, *,
                 index_content: pulumi.Input[str],
                 installation_config_content: pulumi.Input[str],
                 name: pulumi.Input[str],
                 publisher: pulumi.Input[str],
                 schema_content: pulumi.Input[str],
                 source: pulumi.Input[str],
                 version: pulumi.Input[str],
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 logo_url: Optional[pulumi.Input[str]] = None,
                 package_status: Optional[pulumi.Input[str]] = None,
                 repo_url: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PackageVersion resource.
        :param pulumi.Input[str] index_content: The index.json content for the package. This file contains the API documentation index.
        :param pulumi.Input[str] installation_config_content: The installation-configuration.json content for the package. This file contains configuration for installing the package.
        :param pulumi.Input[str] name: The name of the package.
        :param pulumi.Input[str] publisher: The publisher of the package (typically the organization name).
        :param pulumi.Input[str] schema_content: The schema.json content for the package. This is the Pulumi package schema that defines the resources, functions, and types provided by the package.
        :param pulumi.Input[str] source: The source of the package (e.g., 'pulumi').
        :param pulumi.Input[str] version: The version of the package in semver format.
        :param pulumi.Input[str] category: The category of the package.
        :param pulumi.Input[str] description: The description of the package.
        :param pulumi.Input[str] logo_url: The URL of the logo for the package.
        :param pulumi.Input[str] package_status: The maturity level of the package (e.g., 'ga', 'public_preview').
        :param pulumi.Input[str] repo_url: The URL of the repository the package is hosted in.
        :param pulumi.Input[str] title: The title/display name of the package.
        :param pulumi.Input[str] visibility: The visibility of the package ('public' or 'private').
        """
        pulumi.set(__self__, "index_content", index_content)
        pulumi.set(__self__, "installation_config_content", installation_config_content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "schema_content", schema_content)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "version", version)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if logo_url is not None:
            pulumi.set(__self__, "logo_url", logo_url)
        if package_status is None:
            package_status = 'ga'
        if package_status is not None:
            pulumi.set(__self__, "package_status", package_status)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visibility is None:
            visibility = 'private'
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="indexContent")
    def index_content(self) -> pulumi.Input[str]:
        """
        The index.json content for the package. This file contains the API documentation index.
        """
        return pulumi.get(self, "index_content")

    @index_content.setter
    def index_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_content", value)

    @property
    @pulumi.getter(name="installationConfigContent")
    def installation_config_content(self) -> pulumi.Input[str]:
        """
        The installation-configuration.json content for the package. This file contains configuration for installing the package.
        """
        return pulumi.get(self, "installation_config_content")

    @installation_config_content.setter
    def installation_config_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "installation_config_content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the package.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        """
        The publisher of the package (typically the organization name).
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter(name="schemaContent")
    def schema_content(self) -> pulumi.Input[str]:
        """
        The schema.json content for the package. This is the Pulumi package schema that defines the resources, functions, and types provided by the package.
        """
        return pulumi.get(self, "schema_content")

    @schema_content.setter
    def schema_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema_content", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The source of the package (e.g., 'pulumi').
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The version of the package in semver format.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        The category of the package.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the package.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the logo for the package.
        """
        return pulumi.get(self, "logo_url")

    @logo_url.setter
    def logo_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo_url", value)

    @property
    @pulumi.getter(name="packageStatus")
    def package_status(self) -> Optional[pulumi.Input[str]]:
        """
        The maturity level of the package (e.g., 'ga', 'public_preview').
        """
        return pulumi.get(self, "package_status")

    @package_status.setter
    def package_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_status", value)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the repository the package is hosted in.
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title/display name of the package.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        The visibility of the package ('public' or 'private').
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class PackageVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 index_content: Optional[pulumi.Input[str]] = None,
                 installation_config_content: Optional[pulumi.Input[str]] = None,
                 logo_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_status: Optional[pulumi.Input[str]] = None,
                 publisher: Optional[pulumi.Input[str]] = None,
                 repo_url: Optional[pulumi.Input[str]] = None,
                 schema_content: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A published package version in the Pulumi Registry. Packages are typically published via `pulumi publish` CLI, but this resource allows managing published packages declaratively, including publishing from uploaded artifacts and managing the lifecycle of published versions.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] category: The category of the package.
        :param pulumi.Input[str] description: The description of the package.
        :param pulumi.Input[str] index_content: The index.json content for the package. This file contains the API documentation index.
        :param pulumi.Input[str] installation_config_content: The installation-configuration.json content for the package. This file contains configuration for installing the package.
        :param pulumi.Input[str] logo_url: The URL of the logo for the package.
        :param pulumi.Input[str] name: The name of the package.
        :param pulumi.Input[str] package_status: The maturity level of the package (e.g., 'ga', 'public_preview').
        :param pulumi.Input[str] publisher: The publisher of the package (typically the organization name).
        :param pulumi.Input[str] repo_url: The URL of the repository the package is hosted in.
        :param pulumi.Input[str] schema_content: The schema.json content for the package. This is the Pulumi package schema that defines the resources, functions, and types provided by the package.
        :param pulumi.Input[str] source: The source of the package (e.g., 'pulumi').
        :param pulumi.Input[str] title: The title/display name of the package.
        :param pulumi.Input[str] version: The version of the package in semver format.
        :param pulumi.Input[str] visibility: The visibility of the package ('public' or 'private').
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PackageVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A published package version in the Pulumi Registry. Packages are typically published via `pulumi publish` CLI, but this resource allows managing published packages declaratively, including publishing from uploaded artifacts and managing the lifecycle of published versions.

        :param str resource_name: The name of the resource.
        :param PackageVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PackageVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 index_content: Optional[pulumi.Input[str]] = None,
                 installation_config_content: Optional[pulumi.Input[str]] = None,
                 logo_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package_status: Optional[pulumi.Input[str]] = None,
                 publisher: Optional[pulumi.Input[str]] = None,
                 repo_url: Optional[pulumi.Input[str]] = None,
                 schema_content: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PackageVersionArgs.__new__(PackageVersionArgs)

            __props__.__dict__["category"] = category
            __props__.__dict__["description"] = description
            if index_content is None and not opts.urn:
                raise TypeError("Missing required property 'index_content'")
            __props__.__dict__["index_content"] = index_content
            if installation_config_content is None and not opts.urn:
                raise TypeError("Missing required property 'installation_config_content'")
            __props__.__dict__["installation_config_content"] = installation_config_content
            __props__.__dict__["logo_url"] = logo_url
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if package_status is None:
                package_status = 'ga'
            __props__.__dict__["package_status"] = package_status
            if publisher is None and not opts.urn:
                raise TypeError("Missing required property 'publisher'")
            __props__.__dict__["publisher"] = publisher
            __props__.__dict__["repo_url"] = repo_url
            if schema_content is None and not opts.urn:
                raise TypeError("Missing required property 'schema_content'")
            __props__.__dict__["schema_content"] = schema_content
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["title"] = title
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            if visibility is None:
                visibility = 'private'
            __props__.__dict__["visibility"] = visibility
            __props__.__dict__["created_at"] = None
            __props__.__dict__["plugin_download_url"] = None
            __props__.__dict__["readme_url"] = None
            __props__.__dict__["schema_url"] = None
        super(PackageVersion, __self__).__init__(
            'pulumiservice:index:PackageVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PackageVersion':
        """
        Get an existing PackageVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PackageVersionArgs.__new__(PackageVersionArgs)

        __props__.__dict__["category"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["index_content"] = None
        __props__.__dict__["installation_config_content"] = None
        __props__.__dict__["logo_url"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["package_status"] = None
        __props__.__dict__["plugin_download_url"] = None
        __props__.__dict__["publisher"] = None
        __props__.__dict__["readme_url"] = None
        __props__.__dict__["repo_url"] = None
        __props__.__dict__["schema_content"] = None
        __props__.__dict__["schema_url"] = None
        __props__.__dict__["source"] = None
        __props__.__dict__["title"] = None
        __props__.__dict__["version"] = None
        __props__.__dict__["visibility"] = None
        return PackageVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[Optional[str]]:
        """
        The category of the package.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The date and time the package version was created (output).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the package.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="indexContent")
    def index_content(self) -> pulumi.Output[str]:
        """
        The index.json content for the package.
        """
        return pulumi.get(self, "index_content")

    @property
    @pulumi.getter(name="installationConfigContent")
    def installation_config_content(self) -> pulumi.Output[str]:
        """
        The installation-configuration.json content for the package.
        """
        return pulumi.get(self, "installation_config_content")

    @property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL of the logo for the package.
        """
        return pulumi.get(self, "logo_url")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the package.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageStatus")
    def package_status(self) -> pulumi.Output[str]:
        """
        The maturity level of the package.
        """
        return pulumi.get(self, "package_status")

    @property
    @pulumi.getter(name="pluginDownloadURL")
    def plugin_download_url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL to download the plugin at (output).
        """
        return pulumi.get(self, "plugin_download_url")

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Output[str]:
        """
        The publisher of the package (typically the organization name).
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter(name="readmeURL")
    def readme_url(self) -> pulumi.Output[str]:
        """
        The URL of the readme for the package (output).
        """
        return pulumi.get(self, "readme_url")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL of the repository the package is hosted in.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="schemaContent")
    def schema_content(self) -> pulumi.Output[str]:
        """
        The schema.json content for the package.
        """
        return pulumi.get(self, "schema_content")

    @property
    @pulumi.getter(name="schemaURL")
    def schema_url(self) -> pulumi.Output[str]:
        """
        The URL of the schema for the package (output).
        """
        return pulumi.get(self, "schema_url")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        The source of the package (e.g., 'pulumi').
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[str]]:
        """
        The title/display name of the package.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of the package in semver format.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        """
        The visibility of the package.
        """
        return pulumi.get(self, "visibility")

