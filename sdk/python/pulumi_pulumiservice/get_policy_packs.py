# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPolicyPacksResult',
    'AwaitableGetPolicyPacksResult',
    'get_policy_packs',
    'get_policy_packs_output',
]

@pulumi.output_type
class GetPolicyPacksResult:
    def __init__(__self__, policy_packs=None):
        if policy_packs and not isinstance(policy_packs, list):
            raise TypeError("Expected argument 'policy_packs' to be a list")
        pulumi.set(__self__, "policy_packs", policy_packs)

    @_builtins.property
    @pulumi.getter(name="policyPacks")
    def policy_packs(self) -> Sequence[Mapping[str, _builtins.str]]:
        """
        List of policy packs in the organization.
        """
        return pulumi.get(self, "policy_packs")


class AwaitableGetPolicyPacksResult(GetPolicyPacksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyPacksResult(
            policy_packs=self.policy_packs)


def get_policy_packs(organization_name: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyPacksResult:
    """
    Get a list of all policy packs for an organization.


    :param _builtins.str organization_name: The name of the Pulumi organization.
    """
    __args__ = dict()
    __args__['organizationName'] = organization_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pulumiservice:index:getPolicyPacks', __args__, opts=opts, typ=GetPolicyPacksResult).value

    return AwaitableGetPolicyPacksResult(
        policy_packs=pulumi.get(__ret__, 'policy_packs'))
def get_policy_packs_output(organization_name: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyPacksResult]:
    """
    Get a list of all policy packs for an organization.


    :param _builtins.str organization_name: The name of the Pulumi organization.
    """
    __args__ = dict()
    __args__['organizationName'] = organization_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('pulumiservice:index:getPolicyPacks', __args__, opts=opts, typ=GetPolicyPacksResult)
    return __ret__.apply(lambda __response__: GetPolicyPacksResult(
        policy_packs=pulumi.get(__response__, 'policy_packs')))
