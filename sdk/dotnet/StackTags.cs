// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    /// <summary>
    /// Manages multiple stack tags as a single resource. Each tag consists of a name and value pair defined in the tags map.
    /// </summary>
    [PulumiServiceResourceType("pulumiservice:index:StackTags")]
    public partial class StackTags : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Organization name.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// Project name.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Stack name.
        /// </summary>
        [Output("stack")]
        public Output<string> Stack { get; private set; } = null!;

        /// <summary>
        /// Map of tag names to values. Each entry represents a stack tag.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a StackTags resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StackTags(string name, StackTagsArgs args, CustomResourceOptions? options = null)
            : base("pulumiservice:index:StackTags", name, args ?? new StackTagsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StackTags(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("pulumiservice:index:StackTags", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StackTags resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StackTags Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new StackTags(name, id, options);
        }
    }

    public sealed class StackTagsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Organization name.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// Project name.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Stack name.
        /// </summary>
        [Input("stack", required: true)]
        public Input<string> Stack { get; set; } = null!;

        [Input("tags", required: true)]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tag names to values. Each entry represents a stack tag.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public StackTagsArgs()
        {
        }
        public static new StackTagsArgs Empty => new StackTagsArgs();
    }
}
