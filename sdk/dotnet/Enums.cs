// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.PulumiService
{
    [EnumType]
    public readonly struct AuthPolicyDecision : IEquatable<AuthPolicyDecision>
    {
        private readonly string _value;

        private AuthPolicyDecision(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A deny rule for Oidc Issuer Policy.
        /// </summary>
        public static AuthPolicyDecision Deny { get; } = new AuthPolicyDecision("deny");
        /// <summary>
        /// An allow rule for Oidc Issuer Policy.
        /// </summary>
        public static AuthPolicyDecision Allow { get; } = new AuthPolicyDecision("allow");

        public static bool operator ==(AuthPolicyDecision left, AuthPolicyDecision right) => left.Equals(right);
        public static bool operator !=(AuthPolicyDecision left, AuthPolicyDecision right) => !left.Equals(right);

        public static explicit operator string(AuthPolicyDecision value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthPolicyDecision other && Equals(other);
        public bool Equals(AuthPolicyDecision other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AuthPolicyPermissionLevel : IEquatable<AuthPolicyPermissionLevel>
    {
        private readonly string _value;

        private AuthPolicyPermissionLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard level of permissions.
        /// </summary>
        public static AuthPolicyPermissionLevel Standard { get; } = new AuthPolicyPermissionLevel("standard");
        /// <summary>
        /// Admin level of permissions.
        /// </summary>
        public static AuthPolicyPermissionLevel Admin { get; } = new AuthPolicyPermissionLevel("admin");

        public static bool operator ==(AuthPolicyPermissionLevel left, AuthPolicyPermissionLevel right) => left.Equals(right);
        public static bool operator !=(AuthPolicyPermissionLevel left, AuthPolicyPermissionLevel right) => !left.Equals(right);

        public static explicit operator string(AuthPolicyPermissionLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthPolicyPermissionLevel other && Equals(other);
        public bool Equals(AuthPolicyPermissionLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AuthPolicyTokenType : IEquatable<AuthPolicyTokenType>
    {
        private readonly string _value;

        private AuthPolicyTokenType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Personal Pulumi token. Requires userLogin field to be filled.
        /// </summary>
        public static AuthPolicyTokenType Personal { get; } = new AuthPolicyTokenType("personal");
        /// <summary>
        /// Team Pulumi token. Requires teamName field to be filled.
        /// </summary>
        public static AuthPolicyTokenType Team { get; } = new AuthPolicyTokenType("team");
        /// <summary>
        /// Organization Pulumi token. Requires authorizedPermissions field to be filled.
        /// </summary>
        public static AuthPolicyTokenType Organization { get; } = new AuthPolicyTokenType("organization");
        /// <summary>
        /// Deployment Runner Pulumi token. Requires runnerID field to be filled.
        /// </summary>
        public static AuthPolicyTokenType Runner { get; } = new AuthPolicyTokenType("runner");

        public static bool operator ==(AuthPolicyTokenType left, AuthPolicyTokenType right) => left.Equals(right);
        public static bool operator !=(AuthPolicyTokenType left, AuthPolicyTokenType right) => !left.Equals(right);

        public static explicit operator string(AuthPolicyTokenType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthPolicyTokenType other && Equals(other);
        public bool Equals(AuthPolicyTokenType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EnvironmentPermission : IEquatable<EnvironmentPermission>
    {
        private readonly string _value;

        private EnvironmentPermission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No permissions.
        /// </summary>
        public static EnvironmentPermission None { get; } = new EnvironmentPermission("none");
        /// <summary>
        /// Permission to read environment definition only.
        /// </summary>
        public static EnvironmentPermission Read { get; } = new EnvironmentPermission("read");
        /// <summary>
        /// Permission to open and read the environment.
        /// </summary>
        public static EnvironmentPermission Open { get; } = new EnvironmentPermission("open");
        /// <summary>
        /// Permission to open, read and update the environment.
        /// </summary>
        public static EnvironmentPermission Write { get; } = new EnvironmentPermission("write");
        /// <summary>
        /// Permission for all operations on the environment.
        /// </summary>
        public static EnvironmentPermission Admin { get; } = new EnvironmentPermission("admin");

        public static bool operator ==(EnvironmentPermission left, EnvironmentPermission right) => left.Equals(right);
        public static bool operator !=(EnvironmentPermission left, EnvironmentPermission right) => !left.Equals(right);

        public static explicit operator string(EnvironmentPermission value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentPermission other && Equals(other);
        public bool Equals(EnvironmentPermission other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PulumiOperation : IEquatable<PulumiOperation>
    {
        private readonly string _value;

        private PulumiOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Analogous to `pulumi up` command.
        /// </summary>
        public static PulumiOperation Update { get; } = new PulumiOperation("update");
        /// <summary>
        /// Analogous to `pulumi preview` command.
        /// </summary>
        public static PulumiOperation Preview { get; } = new PulumiOperation("preview");
        /// <summary>
        /// Analogous to `pulumi refresh` command.
        /// </summary>
        public static PulumiOperation Refresh { get; } = new PulumiOperation("refresh");
        /// <summary>
        /// Analogous to `pulumi destroy` command.
        /// </summary>
        public static PulumiOperation Destroy { get; } = new PulumiOperation("destroy");

        public static bool operator ==(PulumiOperation left, PulumiOperation right) => left.Equals(right);
        public static bool operator !=(PulumiOperation left, PulumiOperation right) => !left.Equals(right);

        public static explicit operator string(PulumiOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PulumiOperation other && Equals(other);
        public bool Equals(PulumiOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RbacPermission : IEquatable<RbacPermission>
    {
        private readonly string _value;

        private RbacPermission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Read permission.
        /// </summary>
        public static RbacPermission Read { get; } = new RbacPermission("environment:read");
        /// <summary>
        /// Read and decrypt permission.
        /// </summary>
        public static RbacPermission ReadDecrypt { get; } = new RbacPermission("environment:read_decrypt");
        /// <summary>
        /// Open permission.
        /// </summary>
        public static RbacPermission Open { get; } = new RbacPermission("environment:open");
        /// <summary>
        /// Write permission.
        /// </summary>
        public static RbacPermission Write { get; } = new RbacPermission("environment:write");
        /// <summary>
        /// Delete permission.
        /// </summary>
        public static RbacPermission Delete { get; } = new RbacPermission("environment:delete");
        /// <summary>
        /// Clone permission.
        /// </summary>
        public static RbacPermission Clone { get; } = new RbacPermission("environment:clone");
        /// <summary>
        /// Rotate permission.
        /// </summary>
        public static RbacPermission Rotate { get; } = new RbacPermission("environment:rotate");

        public static bool operator ==(RbacPermission left, RbacPermission right) => left.Equals(right);
        public static bool operator !=(RbacPermission left, RbacPermission right) => !left.Equals(right);

        public static explicit operator string(RbacPermission value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RbacPermission other && Equals(other);
        public bool Equals(RbacPermission other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TargetActionType : IEquatable<TargetActionType>
    {
        private readonly string _value;

        private TargetActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Update action type for approval rules.
        /// </summary>
        public static TargetActionType Update { get; } = new TargetActionType("update");

        public static bool operator ==(TargetActionType left, TargetActionType right) => left.Equals(right);
        public static bool operator !=(TargetActionType left, TargetActionType right) => !left.Equals(right);

        public static explicit operator string(TargetActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TargetActionType other && Equals(other);
        public bool Equals(TargetActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TeamStackPermissionScope : IEquatable<TeamStackPermissionScope>
    {
        private readonly double _value;

        private TeamStackPermissionScope(double value)
        {
            _value = value;
        }

        /// <summary>
        /// Grants read permissions to stack.
        /// </summary>
        public static TeamStackPermissionScope Read { get; } = new TeamStackPermissionScope(101);
        /// <summary>
        /// Grants edit permissions to stack.
        /// </summary>
        public static TeamStackPermissionScope Edit { get; } = new TeamStackPermissionScope(102);
        /// <summary>
        /// Grants admin permissions to stack.
        /// </summary>
        public static TeamStackPermissionScope Admin { get; } = new TeamStackPermissionScope(103);

        public static bool operator ==(TeamStackPermissionScope left, TeamStackPermissionScope right) => left.Equals(right);
        public static bool operator !=(TeamStackPermissionScope left, TeamStackPermissionScope right) => !left.Equals(right);

        public static explicit operator double(TeamStackPermissionScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TeamStackPermissionScope other && Equals(other);
        public bool Equals(TeamStackPermissionScope other) => _value == other._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();

        public override string ToString() => _value.ToString();
    }

    [EnumType]
    public readonly struct WebhookFilters : IEquatable<WebhookFilters>
    {
        private readonly string _value;

        private WebhookFilters(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Trigger a webhook when a stack is created. Only valid for org webhooks.
        /// </summary>
        public static WebhookFilters StackCreated { get; } = new WebhookFilters("stack_created");
        /// <summary>
        /// Trigger a webhook when a stack is deleted. Only valid for org webhooks.
        /// </summary>
        public static WebhookFilters StackDeleted { get; } = new WebhookFilters("stack_deleted");
        /// <summary>
        /// Trigger a webhook when a stack update succeeds.
        /// </summary>
        public static WebhookFilters UpdateSucceeded { get; } = new WebhookFilters("update_succeeded");
        /// <summary>
        /// Trigger a webhook when a stack update fails.
        /// </summary>
        public static WebhookFilters UpdateFailed { get; } = new WebhookFilters("update_failed");
        /// <summary>
        /// Trigger a webhook when a stack preview succeeds.
        /// </summary>
        public static WebhookFilters PreviewSucceeded { get; } = new WebhookFilters("preview_succeeded");
        /// <summary>
        /// Trigger a webhook when a stack preview fails.
        /// </summary>
        public static WebhookFilters PreviewFailed { get; } = new WebhookFilters("preview_failed");
        /// <summary>
        /// Trigger a webhook when a stack destroy succeeds.
        /// </summary>
        public static WebhookFilters DestroySucceeded { get; } = new WebhookFilters("destroy_succeeded");
        /// <summary>
        /// Trigger a webhook when a stack destroy fails.
        /// </summary>
        public static WebhookFilters DestroyFailed { get; } = new WebhookFilters("destroy_failed");
        /// <summary>
        /// Trigger a webhook when a stack refresh succeeds.
        /// </summary>
        public static WebhookFilters RefreshSucceeded { get; } = new WebhookFilters("refresh_succeeded");
        /// <summary>
        /// Trigger a webhook when a stack refresh fails.
        /// </summary>
        public static WebhookFilters RefreshFailed { get; } = new WebhookFilters("refresh_failed");
        /// <summary>
        /// Trigger a webhook when a deployment is queued.
        /// </summary>
        public static WebhookFilters DeploymentQueued { get; } = new WebhookFilters("deployment_queued");
        /// <summary>
        /// Trigger a webhook when a deployment starts running.
        /// </summary>
        public static WebhookFilters DeploymentStarted { get; } = new WebhookFilters("deployment_started");
        /// <summary>
        /// Trigger a webhook when a deployment succeeds.
        /// </summary>
        public static WebhookFilters DeploymentSucceeded { get; } = new WebhookFilters("deployment_succeeded");
        /// <summary>
        /// Trigger a webhook when a deployment fails.
        /// </summary>
        public static WebhookFilters DeploymentFailed { get; } = new WebhookFilters("deployment_failed");
        /// <summary>
        /// Trigger a webhook when drift is detected.
        /// </summary>
        public static WebhookFilters DriftDetected { get; } = new WebhookFilters("drift_detected");
        /// <summary>
        /// Trigger a webhook when a drift detection run succeeds, regardless of whether drift is detected.
        /// </summary>
        public static WebhookFilters DriftDetectionSucceeded { get; } = new WebhookFilters("drift_detection_succeeded");
        /// <summary>
        /// Trigger a webhook when a drift detection run fails.
        /// </summary>
        public static WebhookFilters DriftDetectionFailed { get; } = new WebhookFilters("drift_detection_failed");
        /// <summary>
        /// Trigger a webhook when a drift remediation run succeeds.
        /// </summary>
        public static WebhookFilters DriftRemediationSucceeded { get; } = new WebhookFilters("drift_remediation_succeeded");
        /// <summary>
        /// Trigger a webhook when a drift remediation run fails.
        /// </summary>
        public static WebhookFilters DriftRemediationFailed { get; } = new WebhookFilters("drift_remediation_failed");
        /// <summary>
        /// Trigger a webhook when a new environment is created.
        /// </summary>
        public static WebhookFilters EnvironmentCreated { get; } = new WebhookFilters("environment_created");
        /// <summary>
        /// Trigger a webhook when an environment is deleted.
        /// </summary>
        public static WebhookFilters EnvironmentDeleted { get; } = new WebhookFilters("environment_deleted");
        /// <summary>
        /// Trigger a webhook when a new revision is created on an environment.
        /// </summary>
        public static WebhookFilters EnvironmentRevisionCreated { get; } = new WebhookFilters("environment_revision_created");
        /// <summary>
        /// Trigger a webhook when a revision is retracted on an environment.
        /// </summary>
        public static WebhookFilters EnvironmentRevisionRetracted { get; } = new WebhookFilters("environment_revision_retracted");
        /// <summary>
        /// Trigger a webhook when a revision tag is created on an environment.
        /// </summary>
        public static WebhookFilters EnvironmentRevisionTagCreated { get; } = new WebhookFilters("environment_revision_tag_created");
        /// <summary>
        /// Trigger a webhook when a revision tag is deleted on an environment.
        /// </summary>
        public static WebhookFilters EnvironmentRevisionTagDeleted { get; } = new WebhookFilters("environment_revision_tag_deleted");
        /// <summary>
        /// Trigger a webhook when a revision tag is updated on an environment.
        /// </summary>
        public static WebhookFilters EnvironmentRevisionTagUpdated { get; } = new WebhookFilters("environment_revision_tag_updated");
        /// <summary>
        /// Trigger a webhook when an environment tag is created.
        /// </summary>
        public static WebhookFilters EnvironmentTagCreated { get; } = new WebhookFilters("environment_tag_created");
        /// <summary>
        /// Trigger a webhook when an environment tag is deleted.
        /// </summary>
        public static WebhookFilters EnvironmentTagDeleted { get; } = new WebhookFilters("environment_tag_deleted");
        /// <summary>
        /// Trigger a webhook when an environment tag is updated.
        /// </summary>
        public static WebhookFilters EnvironmentTagUpdated { get; } = new WebhookFilters("environment_tag_updated");
        /// <summary>
        /// Trigger a webhook when an imported environment has changed.
        /// </summary>
        public static WebhookFilters ImportedEnvironmentChanged { get; } = new WebhookFilters("imported_environment_changed");

        public static bool operator ==(WebhookFilters left, WebhookFilters right) => left.Equals(right);
        public static bool operator !=(WebhookFilters left, WebhookFilters right) => !left.Equals(right);

        public static explicit operator string(WebhookFilters value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebhookFilters other && Equals(other);
        public bool Equals(WebhookFilters other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebhookFormat : IEquatable<WebhookFormat>
    {
        private readonly string _value;

        private WebhookFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The default webhook format.
        /// </summary>
        public static WebhookFormat Raw { get; } = new WebhookFormat("raw");
        /// <summary>
        /// Messages formatted for consumption by Slack incoming webhooks.
        /// </summary>
        public static WebhookFormat Slack { get; } = new WebhookFormat("slack");
        /// <summary>
        /// Initiate deployments on a stack from a Pulumi Cloud webhook.
        /// </summary>
        public static WebhookFormat PulumiDeployments { get; } = new WebhookFormat("pulumi_deployments");
        /// <summary>
        /// Messages formatted for consumption by Microsoft Teams incoming webhooks.
        /// </summary>
        public static WebhookFormat MicrosoftTeams { get; } = new WebhookFormat("ms_teams");

        public static bool operator ==(WebhookFormat left, WebhookFormat right) => left.Equals(right);
        public static bool operator !=(WebhookFormat left, WebhookFormat right) => !left.Equals(right);

        public static explicit operator string(WebhookFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebhookFormat other && Equals(other);
        public bool Equals(WebhookFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebhookGroup : IEquatable<WebhookGroup>
    {
        private readonly string _value;

        private WebhookGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A group of webhooks containing all stack events.
        /// </summary>
        public static WebhookGroup Stacks { get; } = new WebhookGroup("stacks");
        /// <summary>
        /// A group of webhooks containing all deployment events.
        /// </summary>
        public static WebhookGroup Deployments { get; } = new WebhookGroup("deployments");
        /// <summary>
        /// A group of webhooks containing all environment events.
        /// </summary>
        public static WebhookGroup Environments { get; } = new WebhookGroup("environments");

        public static bool operator ==(WebhookGroup left, WebhookGroup right) => left.Equals(right);
        public static bool operator !=(WebhookGroup left, WebhookGroup right) => !left.Equals(right);

        public static explicit operator string(WebhookGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebhookGroup other && Equals(other);
        public bool Equals(WebhookGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
