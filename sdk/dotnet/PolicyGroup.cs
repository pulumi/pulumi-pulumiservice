// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    /// <summary>
    /// A Policy Group allows you to apply policy packs to a set of stacks in your organization.
    /// </summary>
    [PulumiServiceResourceType("pulumiservice:index:PolicyGroup")]
    public partial class PolicyGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The entity type for the policy group. Valid values are 'stacks' or 'accounts'. Defaults to 'stacks'.
        /// </summary>
        [Output("entityType")]
        public Output<string?> EntityType { get; private set; } = null!;

        /// <summary>
        /// The mode for the policy group. Valid values are 'audit' (reports violations) or 'preventative' (blocks operations). Defaults to 'audit'.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the policy group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Pulumi organization the policy group belongs to.
        /// </summary>
        [Output("organizationName")]
        public Output<string> OrganizationName { get; private set; } = null!;

        /// <summary>
        /// List of policy packs applied to this policy group.
        /// </summary>
        [Output("policyPacks")]
        public Output<ImmutableArray<ImmutableDictionary<string, string>>> PolicyPacks { get; private set; } = null!;

        /// <summary>
        /// List of stack references that belong to this policy group.
        /// </summary>
        [Output("stacks")]
        public Output<ImmutableArray<ImmutableDictionary<string, string>>> Stacks { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyGroup(string name, PolicyGroupArgs args, CustomResourceOptions? options = null)
            : base("pulumiservice:index:PolicyGroup", name, args ?? new PolicyGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("pulumiservice:index:PolicyGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PolicyGroup(name, id, options);
        }
    }

    public sealed class PolicyGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The entity type for the policy group. Valid values are 'stacks' or 'accounts'. Defaults to 'stacks'.
        /// </summary>
        [Input("entityType")]
        public Input<string>? EntityType { get; set; }

        /// <summary>
        /// The mode for the policy group. Valid values are 'audit' (reports violations) or 'preventative' (blocks operations). Defaults to 'audit'.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Pulumi organization the policy group belongs to.
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        [Input("policyPacks")]
        private InputList<ImmutableDictionary<string, string>>? _policyPacks;

        /// <summary>
        /// List of policy packs applied to this policy group.
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> PolicyPacks
        {
            get => _policyPacks ?? (_policyPacks = new InputList<ImmutableDictionary<string, string>>());
            set => _policyPacks = value;
        }

        [Input("stacks")]
        private InputList<ImmutableDictionary<string, string>>? _stacks;

        /// <summary>
        /// List of stack references that belong to this policy group.
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> Stacks
        {
            get => _stacks ?? (_stacks = new InputList<ImmutableDictionary<string, string>>());
            set => _stacks = value;
        }

        public PolicyGroupArgs()
        {
            EntityType = "stacks";
            Mode = "audit";
        }
        public static new PolicyGroupArgs Empty => new PolicyGroupArgs();
    }
}
