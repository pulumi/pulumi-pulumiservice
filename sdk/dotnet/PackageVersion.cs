// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    /// <summary>
    /// A published package version in the Pulumi Registry. Packages are typically published via `pulumi publish` CLI, but this resource allows managing published packages declaratively, including publishing from uploaded artifacts and managing the lifecycle of published versions.
    /// </summary>
    [PulumiServiceResourceType("pulumiservice:index:PackageVersion")]
    public partial class PackageVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The category of the package.
        /// </summary>
        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        /// <summary>
        /// The date and time the package version was created (output).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the package.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The index.json content for the package.
        /// </summary>
        [Output("indexContent")]
        public Output<string> IndexContent { get; private set; } = null!;

        /// <summary>
        /// The installation-configuration.json content for the package.
        /// </summary>
        [Output("installationConfigContent")]
        public Output<string> InstallationConfigContent { get; private set; } = null!;

        /// <summary>
        /// The URL of the logo for the package.
        /// </summary>
        [Output("logoUrl")]
        public Output<string?> LogoUrl { get; private set; } = null!;

        /// <summary>
        /// The name of the package.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The maturity level of the package.
        /// </summary>
        [Output("packageStatus")]
        public Output<string> PackageStatus { get; private set; } = null!;

        /// <summary>
        /// The URL to download the plugin at (output).
        /// </summary>
        [Output("pluginDownloadURL")]
        public Output<string?> PluginDownloadURL { get; private set; } = null!;

        /// <summary>
        /// The publisher of the package (typically the organization name).
        /// </summary>
        [Output("publisher")]
        public Output<string> Publisher { get; private set; } = null!;

        /// <summary>
        /// The URL of the readme for the package (output).
        /// </summary>
        [Output("readmeURL")]
        public Output<string> ReadmeURL { get; private set; } = null!;

        /// <summary>
        /// The URL of the repository the package is hosted in.
        /// </summary>
        [Output("repoUrl")]
        public Output<string?> RepoUrl { get; private set; } = null!;

        /// <summary>
        /// The schema.json content for the package.
        /// </summary>
        [Output("schemaContent")]
        public Output<string> SchemaContent { get; private set; } = null!;

        /// <summary>
        /// The URL of the schema for the package (output).
        /// </summary>
        [Output("schemaURL")]
        public Output<string> SchemaURL { get; private set; } = null!;

        /// <summary>
        /// The source of the package (e.g., 'pulumi').
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// The title/display name of the package.
        /// </summary>
        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;

        /// <summary>
        /// The version of the package in semver format.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// The visibility of the package.
        /// </summary>
        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a PackageVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PackageVersion(string name, PackageVersionArgs args, CustomResourceOptions? options = null)
            : base("pulumiservice:index:PackageVersion", name, args ?? new PackageVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PackageVersion(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("pulumiservice:index:PackageVersion", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PackageVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PackageVersion Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PackageVersion(name, id, options);
        }
    }

    public sealed class PackageVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The category of the package.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// The description of the package.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The index.json content for the package. This file contains the API documentation index.
        /// </summary>
        [Input("indexContent", required: true)]
        public Input<string> IndexContent { get; set; } = null!;

        /// <summary>
        /// The installation-configuration.json content for the package. This file contains configuration for installing the package.
        /// </summary>
        [Input("installationConfigContent", required: true)]
        public Input<string> InstallationConfigContent { get; set; } = null!;

        /// <summary>
        /// The URL of the logo for the package.
        /// </summary>
        [Input("logoUrl")]
        public Input<string>? LogoUrl { get; set; }

        /// <summary>
        /// The name of the package.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The maturity level of the package (e.g., 'ga', 'public_preview').
        /// </summary>
        [Input("packageStatus")]
        public Input<string>? PackageStatus { get; set; }

        /// <summary>
        /// The publisher of the package (typically the organization name).
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        /// <summary>
        /// The URL of the repository the package is hosted in.
        /// </summary>
        [Input("repoUrl")]
        public Input<string>? RepoUrl { get; set; }

        /// <summary>
        /// The schema.json content for the package. This is the Pulumi package schema that defines the resources, functions, and types provided by the package.
        /// </summary>
        [Input("schemaContent", required: true)]
        public Input<string> SchemaContent { get; set; } = null!;

        /// <summary>
        /// The source of the package (e.g., 'pulumi').
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        /// <summary>
        /// The title/display name of the package.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The version of the package in semver format.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        /// <summary>
        /// The visibility of the package ('public' or 'private').
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public PackageVersionArgs()
        {
            PackageStatus = "ga";
            Visibility = "private";
        }
        public static new PackageVersionArgs Empty => new PackageVersionArgs();
    }
}
