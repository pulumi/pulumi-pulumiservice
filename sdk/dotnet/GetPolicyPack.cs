// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    public static class GetPolicyPack
    {
        /// <summary>
        /// Get details about a specific version of a policy pack.
        /// </summary>
        public static Task<GetPolicyPackResult> InvokeAsync(GetPolicyPackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyPackResult>("pulumiservice:index:getPolicyPack", args ?? new GetPolicyPackArgs(), options.WithDefaults());

        /// <summary>
        /// Get details about a specific version of a policy pack.
        /// </summary>
        public static Output<GetPolicyPackResult> Invoke(GetPolicyPackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyPackResult>("pulumiservice:index:getPolicyPack", args ?? new GetPolicyPackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyPackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Pulumi organization.
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the policy pack.
        /// </summary>
        [Input("policyPackName", required: true)]
        public string PolicyPackName { get; set; } = null!;

        /// <summary>
        /// The version number of the policy pack. If not specified, returns the latest version.
        /// </summary>
        [Input("version")]
        public int? Version { get; set; }

        public GetPolicyPackArgs()
        {
        }
        public static new GetPolicyPackArgs Empty => new GetPolicyPackArgs();
    }

    public sealed class GetPolicyPackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Pulumi organization.
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the policy pack.
        /// </summary>
        [Input("policyPackName", required: true)]
        public Input<string> PolicyPackName { get; set; } = null!;

        /// <summary>
        /// The version number of the policy pack. If not specified, returns the latest version.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public GetPolicyPackInvokeArgs()
        {
        }
        public static new GetPolicyPackInvokeArgs Empty => new GetPolicyPackInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyPackResult
    {
        /// <summary>
        /// Configuration for the policy pack.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Config;
        /// <summary>
        /// The display name of the policy pack.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The name of the policy pack.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of policies in this pack.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> Policies;
        /// <summary>
        /// The version number.
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// The version tag (if any).
        /// </summary>
        public readonly string? VersionTag;

        [OutputConstructor]
        private GetPolicyPackResult(
            ImmutableDictionary<string, object>? config,

            string displayName,

            string name,

            ImmutableArray<ImmutableDictionary<string, string>> policies,

            int version,

            string? versionTag)
        {
            Config = config;
            DisplayName = displayName;
            Name = name;
            Policies = policies;
            Version = version;
            VersionTag = versionTag;
        }
    }
}
