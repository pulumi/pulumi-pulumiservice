// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    /// <summary>
    /// A task created in the Neo agent system for tracking user instructions and entity changes.
    /// </summary>
    [PulumiServiceResourceType("pulumiservice:index:NeoTask")]
    public partial class NeoTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The exact user instruction for the task.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// Entities to add in this task.
        /// </summary>
        [Output("entityAdd")]
        public Output<ImmutableArray<Outputs.TaskEntity>> EntityAdd { get; private set; } = null!;

        /// <summary>
        /// Entities to remove in this task.
        /// </summary>
        [Output("entityRemove")]
        public Output<ImmutableArray<Outputs.TaskEntity>> EntityRemove { get; private set; } = null!;

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Output("organizationName")]
        public Output<string> OrganizationName { get; private set; } = null!;

        /// <summary>
        /// When the event occurred (ISO 8601 format).
        /// </summary>
        [Output("timestamp")]
        public Output<string?> Timestamp { get; private set; } = null!;


        /// <summary>
        /// Create a NeoTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NeoTask(string name, NeoTaskArgs args, CustomResourceOptions? options = null)
            : base("pulumiservice:index:NeoTask", name, args ?? new NeoTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NeoTask(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("pulumiservice:index:NeoTask", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NeoTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NeoTask Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new NeoTask(name, id, options);
        }
    }

    public sealed class NeoTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The exact user instruction for the task.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        [Input("entityAdd")]
        private InputList<Inputs.TaskEntityArgs>? _entityAdd;

        /// <summary>
        /// Entities to add in this task.
        /// </summary>
        public InputList<Inputs.TaskEntityArgs> EntityAdd
        {
            get => _entityAdd ?? (_entityAdd = new InputList<Inputs.TaskEntityArgs>());
            set => _entityAdd = value;
        }

        [Input("entityRemove")]
        private InputList<Inputs.TaskEntityArgs>? _entityRemove;

        /// <summary>
        /// Entities to remove in this task.
        /// </summary>
        public InputList<Inputs.TaskEntityArgs> EntityRemove
        {
            get => _entityRemove ?? (_entityRemove = new InputList<Inputs.TaskEntityArgs>());
            set => _entityRemove = value;
        }

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// When the event occurred (ISO 8601 format). Defaults to current time if not specified.
        /// </summary>
        [Input("timestamp")]
        public Input<string>? Timestamp { get; set; }

        public NeoTaskArgs()
        {
        }
        public static new NeoTaskArgs Empty => new NeoTaskArgs();
    }
}
