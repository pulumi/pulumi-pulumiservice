// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    /// <summary>
    /// A scheduled recurring or single time environment rotation.
    /// 
    /// ### Import
    /// 
    /// Environment rotation schedules can be imported using the `id`, which for environment rotation schedules is `{org}/{project}/{environment}/rotations/{scheduleId}` e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import pulumiservice:index:EnvironmentRotationSchedule my_rotation my-org/my-project/my-env/rotations/sched-123
    /// ```
    /// </summary>
    [PulumiServiceResourceType("pulumiservice:index:EnvironmentRotationSchedule")]
    public partial class EnvironmentRotationSchedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Environment name.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// Organization name.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// Project name.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Cron expression for recurring scheduled rotations. If you are supplying this, do not supply timestamp.
        /// </summary>
        [Output("scheduleCron")]
        public Output<string?> ScheduleCron { get; private set; } = null!;

        /// <summary>
        /// Schedule ID of the created rotation schedule, assigned by Pulumi Cloud.
        /// </summary>
        [Output("scheduleId")]
        public Output<string> ScheduleId { get; private set; } = null!;

        /// <summary>
        /// The time at which the rotation should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
        /// </summary>
        [Output("timestamp")]
        public Output<string?> Timestamp { get; private set; } = null!;


        /// <summary>
        /// Create a EnvironmentRotationSchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EnvironmentRotationSchedule(string name, EnvironmentRotationScheduleArgs args, CustomResourceOptions? options = null)
            : base("pulumiservice:index:EnvironmentRotationSchedule", name, args ?? new EnvironmentRotationScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EnvironmentRotationSchedule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("pulumiservice:index:EnvironmentRotationSchedule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EnvironmentRotationSchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EnvironmentRotationSchedule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new EnvironmentRotationSchedule(name, id, options);
        }
    }

    public sealed class EnvironmentRotationScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Environment name.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// Organization name.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// Project name.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Cron expression for recurring scheduled rotations. If you are supplying this, do not supply timestamp.
        /// </summary>
        [Input("scheduleCron")]
        public Input<string>? ScheduleCron { get; set; }

        /// <summary>
        /// The time at which the rotation should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
        /// </summary>
        [Input("timestamp")]
        public Input<string>? Timestamp { get; set; }

        public EnvironmentRotationScheduleArgs()
        {
        }
        public static new EnvironmentRotationScheduleArgs Empty => new EnvironmentRotationScheduleArgs();
    }
}
