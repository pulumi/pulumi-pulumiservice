// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    /// <summary>
    /// A stack is a collection of resources that share a common lifecycle. Stacks are uniquely identified by their name and the project they belong to.
    /// 
    /// ### Import
    /// 
    /// Stacks can be imported using the `id`, which for stacks is `{org}/{project}/{stack}` e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import pulumiservice:index:Stack my_stack my-org/my-project/my-stack
    /// ```
    /// </summary>
    [PulumiServiceResourceType("pulumiservice:index:Stack")]
    public partial class Stack : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. Flag indicating whether to delete the stack even if it still contains resources.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Output("organizationName")]
        public Output<string> OrganizationName { get; private set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The name of the stack.
        /// </summary>
        [Output("stackName")]
        public Output<string> StackName { get; private set; } = null!;


        /// <summary>
        /// Create a Stack resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stack(string name, StackArgs args, CustomResourceOptions? options = null)
            : base("pulumiservice:index:Stack", name, args ?? new StackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stack(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("pulumiservice:index:Stack", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stack resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stack Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Stack(name, id, options);
        }
    }

    public sealed class StackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. Flag indicating whether to delete the stack even if it still contains resources.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the stack.
        /// </summary>
        [Input("stackName", required: true)]
        public Input<string> StackName { get; set; } = null!;

        public StackArgs()
        {
        }
        public static new StackArgs Empty => new StackArgs();
    }
}
