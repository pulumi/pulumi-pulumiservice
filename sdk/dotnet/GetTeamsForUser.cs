// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    public static class GetTeamsForUser
    {
        /// <summary>
        /// Get a list of teams that a specific user is a member of.
        /// </summary>
        public static Task<GetTeamsForUserResult> InvokeAsync(GetTeamsForUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeamsForUserResult>("pulumiservice:index:getTeamsForUser", args ?? new GetTeamsForUserArgs(), options.WithDefaults());

        /// <summary>
        /// Get a list of teams that a specific user is a member of.
        /// </summary>
        public static Output<GetTeamsForUserResult> Invoke(GetTeamsForUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamsForUserResult>("pulumiservice:index:getTeamsForUser", args ?? new GetTeamsForUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeamsForUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Pulumi organization.
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// The username to search for. Matches against both name and GitHub login.
        /// </summary>
        [Input("userName", required: true)]
        public string UserName { get; set; } = null!;

        public GetTeamsForUserArgs()
        {
        }
        public static new GetTeamsForUserArgs Empty => new GetTeamsForUserArgs();
    }

    public sealed class GetTeamsForUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Pulumi organization.
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The username to search for. Matches against both name and GitHub login.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public GetTeamsForUserInvokeArgs()
        {
        }
        public static new GetTeamsForUserInvokeArgs Empty => new GetTeamsForUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeamsForUserResult
    {
        /// <summary>
        /// List of teams where the user is a member.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> Teams;

        [OutputConstructor]
        private GetTeamsForUserResult(ImmutableArray<ImmutableDictionary<string, string>> teams)
        {
            Teams = teams;
        }
    }
}
