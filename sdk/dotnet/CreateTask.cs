// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PulumiService
{
    public static class CreateTask
    {
        /// <summary>
        /// Creates a task in the Neo agent system for tracking user instructions and entity changes. Tasks are immutable once created.
        /// </summary>
        public static Task<CreateTaskResult> InvokeAsync(CreateTaskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<CreateTaskResult>("pulumiservice:index:createTask", args ?? new CreateTaskArgs(), options.WithDefaults());

        /// <summary>
        /// Creates a task in the Neo agent system for tracking user instructions and entity changes. Tasks are immutable once created.
        /// </summary>
        public static Output<CreateTaskResult> Invoke(CreateTaskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<CreateTaskResult>("pulumiservice:index:createTask", args ?? new CreateTaskInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Creates a task in the Neo agent system for tracking user instructions and entity changes. Tasks are immutable once created.
        /// </summary>
        public static Output<CreateTaskResult> Invoke(CreateTaskInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<CreateTaskResult>("pulumiservice:index:createTask", args ?? new CreateTaskInvokeArgs(), options.WithDefaults());
    }


    public sealed class CreateTaskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The exact user instruction for the task.
        /// </summary>
        [Input("content", required: true)]
        public string Content { get; set; } = null!;

        [Input("entityAdd")]
        private List<Inputs.TaskEntity>? _entityAdd;

        /// <summary>
        /// Entities to add in this task.
        /// </summary>
        public List<Inputs.TaskEntity> EntityAdd
        {
            get => _entityAdd ?? (_entityAdd = new List<Inputs.TaskEntity>());
            set => _entityAdd = value;
        }

        [Input("entityRemove")]
        private List<Inputs.TaskEntity>? _entityRemove;

        /// <summary>
        /// Entities to remove in this task.
        /// </summary>
        public List<Inputs.TaskEntity> EntityRemove
        {
            get => _entityRemove ?? (_entityRemove = new List<Inputs.TaskEntity>());
            set => _entityRemove = value;
        }

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// When the event occurred (ISO 8601 format). Defaults to current time if not specified.
        /// </summary>
        [Input("timestamp")]
        public string? Timestamp { get; set; }

        public CreateTaskArgs()
        {
        }
        public static new CreateTaskArgs Empty => new CreateTaskArgs();
    }

    public sealed class CreateTaskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The exact user instruction for the task.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        [Input("entityAdd")]
        private InputList<Inputs.TaskEntityArgs>? _entityAdd;

        /// <summary>
        /// Entities to add in this task.
        /// </summary>
        public InputList<Inputs.TaskEntityArgs> EntityAdd
        {
            get => _entityAdd ?? (_entityAdd = new InputList<Inputs.TaskEntityArgs>());
            set => _entityAdd = value;
        }

        [Input("entityRemove")]
        private InputList<Inputs.TaskEntityArgs>? _entityRemove;

        /// <summary>
        /// Entities to remove in this task.
        /// </summary>
        public InputList<Inputs.TaskEntityArgs> EntityRemove
        {
            get => _entityRemove ?? (_entityRemove = new InputList<Inputs.TaskEntityArgs>());
            set => _entityRemove = value;
        }

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// When the event occurred (ISO 8601 format). Defaults to current time if not specified.
        /// </summary>
        [Input("timestamp")]
        public Input<string>? Timestamp { get; set; }

        public CreateTaskInvokeArgs()
        {
        }
        public static new CreateTaskInvokeArgs Empty => new CreateTaskInvokeArgs();
    }


    [OutputType]
    public sealed class CreateTaskResult
    {
        /// <summary>
        /// The exact user instruction for the task.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// The final list of entities after add/remove operations.
        /// </summary>
        public readonly ImmutableArray<Outputs.TaskEntity> Entities;
        /// <summary>
        /// The unique identifier of the created task.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the organization.
        /// </summary>
        public readonly string OrganizationName;
        /// <summary>
        /// When the task was created (ISO 8601 format).
        /// </summary>
        public readonly string Timestamp;

        [OutputConstructor]
        private CreateTaskResult(
            string content,

            ImmutableArray<Outputs.TaskEntity> entities,

            string id,

            string organizationName,

            string timestamp)
        {
            Content = content;
            Entities = entities;
            Id = id;
            OrganizationName = organizationName;
            Timestamp = timestamp;
        }
    }
}
