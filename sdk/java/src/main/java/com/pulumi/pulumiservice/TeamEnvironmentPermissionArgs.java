// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pulumiservice.enums.EnvironmentPermission;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamEnvironmentPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamEnvironmentPermissionArgs Empty = new TeamEnvironmentPermissionArgs();

    /**
     * Environment name.
     * 
     */
    @Import(name="environment", required=true)
    private Output<String> environment;

    /**
     * @return Environment name.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }

    /**
     * The maximum duration for which members of this team may open the environment.
     * 
     */
    @Import(name="maxOpenDuration")
    private @Nullable Output<String> maxOpenDuration;

    /**
     * @return The maximum duration for which members of this team may open the environment.
     * 
     */
    public Optional<Output<String>> maxOpenDuration() {
        return Optional.ofNullable(this.maxOpenDuration);
    }

    /**
     * Organization name.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return Organization name.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Which permission level to grant to the specified team.
     * 
     */
    @Import(name="permission", required=true)
    private Output<EnvironmentPermission> permission;

    /**
     * @return Which permission level to grant to the specified team.
     * 
     */
    public Output<EnvironmentPermission> permission() {
        return this.permission;
    }

    /**
     * Project name.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Project name.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Team name.
     * 
     */
    @Import(name="team", required=true)
    private Output<String> team;

    /**
     * @return Team name.
     * 
     */
    public Output<String> team() {
        return this.team;
    }

    private TeamEnvironmentPermissionArgs() {}

    private TeamEnvironmentPermissionArgs(TeamEnvironmentPermissionArgs $) {
        this.environment = $.environment;
        this.maxOpenDuration = $.maxOpenDuration;
        this.organization = $.organization;
        this.permission = $.permission;
        this.project = $.project;
        this.team = $.team;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamEnvironmentPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamEnvironmentPermissionArgs $;

        public Builder() {
            $ = new TeamEnvironmentPermissionArgs();
        }

        public Builder(TeamEnvironmentPermissionArgs defaults) {
            $ = new TeamEnvironmentPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param environment Environment name.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment name.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param maxOpenDuration The maximum duration for which members of this team may open the environment.
         * 
         * @return builder
         * 
         */
        public Builder maxOpenDuration(@Nullable Output<String> maxOpenDuration) {
            $.maxOpenDuration = maxOpenDuration;
            return this;
        }

        /**
         * @param maxOpenDuration The maximum duration for which members of this team may open the environment.
         * 
         * @return builder
         * 
         */
        public Builder maxOpenDuration(String maxOpenDuration) {
            return maxOpenDuration(Output.of(maxOpenDuration));
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param permission Which permission level to grant to the specified team.
         * 
         * @return builder
         * 
         */
        public Builder permission(Output<EnvironmentPermission> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission Which permission level to grant to the specified team.
         * 
         * @return builder
         * 
         */
        public Builder permission(EnvironmentPermission permission) {
            return permission(Output.of(permission));
        }

        /**
         * @param project Project name.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project name.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param team Team name.
         * 
         * @return builder
         * 
         */
        public Builder team(Output<String> team) {
            $.team = team;
            return this;
        }

        /**
         * @param team Team name.
         * 
         * @return builder
         * 
         */
        public Builder team(String team) {
            return team(Output.of(team));
        }

        public TeamEnvironmentPermissionArgs build() {
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("TeamEnvironmentPermissionArgs", "environment");
            }
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("TeamEnvironmentPermissionArgs", "organization");
            }
            if ($.permission == null) {
                throw new MissingRequiredPropertyException("TeamEnvironmentPermissionArgs", "permission");
            }
            $.project = Codegen.stringProp("project").output().arg($.project).def("default").getNullable();
            if ($.team == null) {
                throw new MissingRequiredPropertyException("TeamEnvironmentPermissionArgs", "team");
            }
            return $;
        }
    }

}
