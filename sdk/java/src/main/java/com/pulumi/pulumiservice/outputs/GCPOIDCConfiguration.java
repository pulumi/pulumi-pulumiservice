// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GCPOIDCConfiguration {
    /**
     * @return The numerical ID of the GCP project.
     * 
     */
    private String projectId;
    /**
     * @return The ID of the identity provider associated with the workload pool.
     * 
     */
    private String providerId;
    /**
     * @return The region of the GCP project.
     * 
     */
    private @Nullable String region;
    /**
     * @return The email address of the service account to use.
     * 
     */
    private String serviceAccount;
    /**
     * @return The lifetime of the temporary credentials in “XhYmZs” format.
     * 
     */
    private @Nullable String tokenLifetime;
    /**
     * @return The ID of the workload pool to use.
     * 
     */
    private String workloadPoolId;

    private GCPOIDCConfiguration() {}
    /**
     * @return The numerical ID of the GCP project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The ID of the identity provider associated with the workload pool.
     * 
     */
    public String providerId() {
        return this.providerId;
    }
    /**
     * @return The region of the GCP project.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The email address of the service account to use.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The lifetime of the temporary credentials in “XhYmZs” format.
     * 
     */
    public Optional<String> tokenLifetime() {
        return Optional.ofNullable(this.tokenLifetime);
    }
    /**
     * @return The ID of the workload pool to use.
     * 
     */
    public String workloadPoolId() {
        return this.workloadPoolId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GCPOIDCConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String projectId;
        private String providerId;
        private @Nullable String region;
        private String serviceAccount;
        private @Nullable String tokenLifetime;
        private String workloadPoolId;
        public Builder() {}
        public Builder(GCPOIDCConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.projectId = defaults.projectId;
    	      this.providerId = defaults.providerId;
    	      this.region = defaults.region;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.tokenLifetime = defaults.tokenLifetime;
    	      this.workloadPoolId = defaults.workloadPoolId;
        }

        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GCPOIDCConfiguration", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder providerId(String providerId) {
            if (providerId == null) {
              throw new MissingRequiredPropertyException("GCPOIDCConfiguration", "providerId");
            }
            this.providerId = providerId;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GCPOIDCConfiguration", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder tokenLifetime(@Nullable String tokenLifetime) {

            this.tokenLifetime = tokenLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder workloadPoolId(String workloadPoolId) {
            if (workloadPoolId == null) {
              throw new MissingRequiredPropertyException("GCPOIDCConfiguration", "workloadPoolId");
            }
            this.workloadPoolId = workloadPoolId;
            return this;
        }
        public GCPOIDCConfiguration build() {
            final var _resultValue = new GCPOIDCConfiguration();
            _resultValue.projectId = projectId;
            _resultValue.providerId = providerId;
            _resultValue.region = region;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.tokenLifetime = tokenLifetime;
            _resultValue.workloadPoolId = workloadPoolId;
            return _resultValue;
        }
    }
}
