// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamAccessTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamAccessTokenArgs Empty = new TeamAccessTokenArgs();

    /**
     * Optional. Team description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. Team description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name for the token. This must be unique amongst all machine tokens within your organization.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name for the token. This must be unique amongst all machine tokens within your organization.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The organization&#39;s name.
     * 
     */
    @Import(name="organizationName", required=true)
    private Output<String> organizationName;

    /**
     * @return The organization&#39;s name.
     * 
     */
    public Output<String> organizationName() {
        return this.organizationName;
    }

    /**
     * The team name.
     * 
     */
    @Import(name="teamName", required=true)
    private Output<String> teamName;

    /**
     * @return The team name.
     * 
     */
    public Output<String> teamName() {
        return this.teamName;
    }

    private TeamAccessTokenArgs() {}

    private TeamAccessTokenArgs(TeamAccessTokenArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.organizationName = $.organizationName;
        this.teamName = $.teamName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamAccessTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamAccessTokenArgs $;

        public Builder() {
            $ = new TeamAccessTokenArgs();
        }

        public Builder(TeamAccessTokenArgs defaults) {
            $ = new TeamAccessTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional. Team description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. Team description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name for the token. This must be unique amongst all machine tokens within your organization.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the token. This must be unique amongst all machine tokens within your organization.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organizationName The organization&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        /**
         * @param organizationName The organization&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        /**
         * @param teamName The team name.
         * 
         * @return builder
         * 
         */
        public Builder teamName(Output<String> teamName) {
            $.teamName = teamName;
            return this;
        }

        /**
         * @param teamName The team name.
         * 
         * @return builder
         * 
         */
        public Builder teamName(String teamName) {
            return teamName(Output.of(teamName));
        }

        public TeamAccessTokenArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("TeamAccessTokenArgs", "name");
            }
            if ($.organizationName == null) {
                throw new MissingRequiredPropertyException("TeamAccessTokenArgs", "organizationName");
            }
            if ($.teamName == null) {
                throw new MissingRequiredPropertyException("TeamAccessTokenArgs", "teamName");
            }
            return $;
        }
    }

}
