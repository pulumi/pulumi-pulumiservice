// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice;

import com.pulumi.asset.AssetOrArchive;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    /**
     * Environment name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Environment name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Organization name.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return Organization name.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Project name.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Project name.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Environment&#39;s yaml file.
     * 
     */
    @Import(name="yaml", required=true)
    private Output<AssetOrArchive> yaml;

    /**
     * @return Environment&#39;s yaml file.
     * 
     */
    public Output<AssetOrArchive> yaml() {
        return this.yaml;
    }

    private EnvironmentArgs() {}

    private EnvironmentArgs(EnvironmentArgs $) {
        this.name = $.name;
        this.organization = $.organization;
        this.project = $.project;
        this.yaml = $.yaml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentArgs $;

        public Builder() {
            $ = new EnvironmentArgs();
        }

        public Builder(EnvironmentArgs defaults) {
            $ = new EnvironmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Environment name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Environment name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param project Project name.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project name.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param yaml Environment&#39;s yaml file.
         * 
         * @return builder
         * 
         */
        public Builder yaml(Output<AssetOrArchive> yaml) {
            $.yaml = yaml;
            return this;
        }

        /**
         * @param yaml Environment&#39;s yaml file.
         * 
         * @return builder
         * 
         */
        public Builder yaml(AssetOrArchive yaml) {
            return yaml(Output.of(yaml));
        }

        public EnvironmentArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("EnvironmentArgs", "name");
            }
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("EnvironmentArgs", "organization");
            }
            $.project = Codegen.stringProp("project").output().arg($.project).def("default").getNullable();
            if ($.yaml == null) {
                throw new MissingRequiredPropertyException("EnvironmentArgs", "yaml");
            }
            return $;
        }
    }

}
