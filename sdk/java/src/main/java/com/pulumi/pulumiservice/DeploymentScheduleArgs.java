// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pulumiservice.enums.PulumiOperation;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentScheduleArgs Empty = new DeploymentScheduleArgs();

    /**
     * Organization name.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return Organization name.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Project name.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Project name.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Which command to run.
     * 
     */
    @Import(name="pulumiOperation", required=true)
    private Output<PulumiOperation> pulumiOperation;

    /**
     * @return Which command to run.
     * 
     */
    public Output<PulumiOperation> pulumiOperation() {
        return this.pulumiOperation;
    }

    /**
     * Cron expression for recurring scheduled runs. If you are supplying this, do not supply timestamp.
     * 
     */
    @Import(name="scheduleCron")
    private @Nullable Output<String> scheduleCron;

    /**
     * @return Cron expression for recurring scheduled runs. If you are supplying this, do not supply timestamp.
     * 
     */
    public Optional<Output<String>> scheduleCron() {
        return Optional.ofNullable(this.scheduleCron);
    }

    /**
     * Stack name.
     * 
     */
    @Import(name="stack", required=true)
    private Output<String> stack;

    /**
     * @return Stack name.
     * 
     */
    public Output<String> stack() {
        return this.stack;
    }

    /**
     * The time at which the schedule should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
     * 
     */
    @Import(name="timestamp")
    private @Nullable Output<String> timestamp;

    /**
     * @return The time at which the schedule should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
     * 
     */
    public Optional<Output<String>> timestamp() {
        return Optional.ofNullable(this.timestamp);
    }

    private DeploymentScheduleArgs() {}

    private DeploymentScheduleArgs(DeploymentScheduleArgs $) {
        this.organization = $.organization;
        this.project = $.project;
        this.pulumiOperation = $.pulumiOperation;
        this.scheduleCron = $.scheduleCron;
        this.stack = $.stack;
        this.timestamp = $.timestamp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentScheduleArgs $;

        public Builder() {
            $ = new DeploymentScheduleArgs();
        }

        public Builder(DeploymentScheduleArgs defaults) {
            $ = new DeploymentScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param project Project name.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project name.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiOperation Which command to run.
         * 
         * @return builder
         * 
         */
        public Builder pulumiOperation(Output<PulumiOperation> pulumiOperation) {
            $.pulumiOperation = pulumiOperation;
            return this;
        }

        /**
         * @param pulumiOperation Which command to run.
         * 
         * @return builder
         * 
         */
        public Builder pulumiOperation(PulumiOperation pulumiOperation) {
            return pulumiOperation(Output.of(pulumiOperation));
        }

        /**
         * @param scheduleCron Cron expression for recurring scheduled runs. If you are supplying this, do not supply timestamp.
         * 
         * @return builder
         * 
         */
        public Builder scheduleCron(@Nullable Output<String> scheduleCron) {
            $.scheduleCron = scheduleCron;
            return this;
        }

        /**
         * @param scheduleCron Cron expression for recurring scheduled runs. If you are supplying this, do not supply timestamp.
         * 
         * @return builder
         * 
         */
        public Builder scheduleCron(String scheduleCron) {
            return scheduleCron(Output.of(scheduleCron));
        }

        /**
         * @param stack Stack name.
         * 
         * @return builder
         * 
         */
        public Builder stack(Output<String> stack) {
            $.stack = stack;
            return this;
        }

        /**
         * @param stack Stack name.
         * 
         * @return builder
         * 
         */
        public Builder stack(String stack) {
            return stack(Output.of(stack));
        }

        /**
         * @param timestamp The time at which the schedule should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
         * 
         * @return builder
         * 
         */
        public Builder timestamp(@Nullable Output<String> timestamp) {
            $.timestamp = timestamp;
            return this;
        }

        /**
         * @param timestamp The time at which the schedule should run, in ISO 8601 format. Eg: 2020-01-01T00:00:00Z. If you are supplying this, do not supply scheduleCron.
         * 
         * @return builder
         * 
         */
        public Builder timestamp(String timestamp) {
            return timestamp(Output.of(timestamp));
        }

        public DeploymentScheduleArgs build() {
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("DeploymentScheduleArgs", "organization");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("DeploymentScheduleArgs", "project");
            }
            if ($.pulumiOperation == null) {
                throw new MissingRequiredPropertyException("DeploymentScheduleArgs", "pulumiOperation");
            }
            if ($.stack == null) {
                throw new MissingRequiredPropertyException("DeploymentScheduleArgs", "stack");
            }
            return $;
        }
    }

}
