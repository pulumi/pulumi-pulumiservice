// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pulumiservice.inputs.TemplateSourceDestinationArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateSourceArgs Empty = new TemplateSourceArgs();

    /**
     * The default destination for projects using templates from this source.
     * 
     */
    @Import(name="destination")
    private @Nullable Output<TemplateSourceDestinationArgs> destination;

    /**
     * @return The default destination for projects using templates from this source.
     * 
     */
    public Optional<Output<TemplateSourceDestinationArgs>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * Organization name.
     * 
     */
    @Import(name="organizationName", required=true)
    private Output<String> organizationName;

    /**
     * @return Organization name.
     * 
     */
    public Output<String> organizationName() {
        return this.organizationName;
    }

    /**
     * Source name.
     * 
     */
    @Import(name="sourceName", required=true)
    private Output<String> sourceName;

    /**
     * @return Source name.
     * 
     */
    public Output<String> sourceName() {
        return this.sourceName;
    }

    /**
     * Github URL of the repository from which to grab templates.
     * 
     */
    @Import(name="sourceURL", required=true)
    private Output<String> sourceURL;

    /**
     * @return Github URL of the repository from which to grab templates.
     * 
     */
    public Output<String> sourceURL() {
        return this.sourceURL;
    }

    private TemplateSourceArgs() {}

    private TemplateSourceArgs(TemplateSourceArgs $) {
        this.destination = $.destination;
        this.organizationName = $.organizationName;
        this.sourceName = $.sourceName;
        this.sourceURL = $.sourceURL;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateSourceArgs $;

        public Builder() {
            $ = new TemplateSourceArgs();
        }

        public Builder(TemplateSourceArgs defaults) {
            $ = new TemplateSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination The default destination for projects using templates from this source.
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<TemplateSourceDestinationArgs> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The default destination for projects using templates from this source.
         * 
         * @return builder
         * 
         */
        public Builder destination(TemplateSourceDestinationArgs destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param organizationName Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        /**
         * @param organizationName Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        /**
         * @param sourceName Source name.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(Output<String> sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        /**
         * @param sourceName Source name.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(String sourceName) {
            return sourceName(Output.of(sourceName));
        }

        /**
         * @param sourceURL Github URL of the repository from which to grab templates.
         * 
         * @return builder
         * 
         */
        public Builder sourceURL(Output<String> sourceURL) {
            $.sourceURL = sourceURL;
            return this;
        }

        /**
         * @param sourceURL Github URL of the repository from which to grab templates.
         * 
         * @return builder
         * 
         */
        public Builder sourceURL(String sourceURL) {
            return sourceURL(Output.of(sourceURL));
        }

        public TemplateSourceArgs build() {
            if ($.organizationName == null) {
                throw new MissingRequiredPropertyException("TemplateSourceArgs", "organizationName");
            }
            if ($.sourceName == null) {
                throw new MissingRequiredPropertyException("TemplateSourceArgs", "sourceName");
            }
            if ($.sourceURL == null) {
                throw new MissingRequiredPropertyException("TemplateSourceArgs", "sourceURL");
            }
            return $;
        }
    }

}
