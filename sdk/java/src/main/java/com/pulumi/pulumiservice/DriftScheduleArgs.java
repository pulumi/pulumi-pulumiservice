// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DriftScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DriftScheduleArgs Empty = new DriftScheduleArgs();

    /**
     * Whether any drift detected should be remediated after a drift run.
     * 
     */
    @Import(name="autoRemediate")
    private @Nullable Output<Boolean> autoRemediate;

    /**
     * @return Whether any drift detected should be remediated after a drift run.
     * 
     */
    public Optional<Output<Boolean>> autoRemediate() {
        return Optional.ofNullable(this.autoRemediate);
    }

    /**
     * Organization name.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return Organization name.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Project name.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Project name.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Cron expression for when to run drift detection.
     * 
     */
    @Import(name="scheduleCron", required=true)
    private Output<String> scheduleCron;

    /**
     * @return Cron expression for when to run drift detection.
     * 
     */
    public Output<String> scheduleCron() {
        return this.scheduleCron;
    }

    /**
     * Stack name.
     * 
     */
    @Import(name="stack", required=true)
    private Output<String> stack;

    /**
     * @return Stack name.
     * 
     */
    public Output<String> stack() {
        return this.stack;
    }

    private DriftScheduleArgs() {}

    private DriftScheduleArgs(DriftScheduleArgs $) {
        this.autoRemediate = $.autoRemediate;
        this.organization = $.organization;
        this.project = $.project;
        this.scheduleCron = $.scheduleCron;
        this.stack = $.stack;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DriftScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DriftScheduleArgs $;

        public Builder() {
            $ = new DriftScheduleArgs();
        }

        public Builder(DriftScheduleArgs defaults) {
            $ = new DriftScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRemediate Whether any drift detected should be remediated after a drift run.
         * 
         * @return builder
         * 
         */
        public Builder autoRemediate(@Nullable Output<Boolean> autoRemediate) {
            $.autoRemediate = autoRemediate;
            return this;
        }

        /**
         * @param autoRemediate Whether any drift detected should be remediated after a drift run.
         * 
         * @return builder
         * 
         */
        public Builder autoRemediate(Boolean autoRemediate) {
            return autoRemediate(Output.of(autoRemediate));
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param project Project name.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project name.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scheduleCron Cron expression for when to run drift detection.
         * 
         * @return builder
         * 
         */
        public Builder scheduleCron(Output<String> scheduleCron) {
            $.scheduleCron = scheduleCron;
            return this;
        }

        /**
         * @param scheduleCron Cron expression for when to run drift detection.
         * 
         * @return builder
         * 
         */
        public Builder scheduleCron(String scheduleCron) {
            return scheduleCron(Output.of(scheduleCron));
        }

        /**
         * @param stack Stack name.
         * 
         * @return builder
         * 
         */
        public Builder stack(Output<String> stack) {
            $.stack = stack;
            return this;
        }

        /**
         * @param stack Stack name.
         * 
         * @return builder
         * 
         */
        public Builder stack(String stack) {
            return stack(Output.of(stack));
        }

        public DriftScheduleArgs build() {
            $.autoRemediate = Codegen.booleanProp("autoRemediate").output().arg($.autoRemediate).def(false).getNullable();
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("DriftScheduleArgs", "organization");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("DriftScheduleArgs", "project");
            }
            if ($.scheduleCron == null) {
                throw new MissingRequiredPropertyException("DriftScheduleArgs", "scheduleCron");
            }
            if ($.stack == null) {
                throw new MissingRequiredPropertyException("DriftScheduleArgs", "stack");
            }
            return $;
        }
    }

}
