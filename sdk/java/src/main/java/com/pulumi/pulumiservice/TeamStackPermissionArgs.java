// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pulumiservice.enums.TeamStackPermissionScope;
import java.lang.String;
import java.util.Objects;


public final class TeamStackPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamStackPermissionArgs Empty = new TeamStackPermissionArgs();

    /**
     * The organization or the personal account name of the stack.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return The organization or the personal account name of the stack.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Sets the permission level that this team will be granted to the stack.
     * 
     */
    @Import(name="permission", required=true)
    private TeamStackPermissionScope permission;

    /**
     * @return Sets the permission level that this team will be granted to the stack.
     * 
     */
    public TeamStackPermissionScope permission() {
        return this.permission;
    }

    /**
     * The project name for this stack.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The project name for this stack.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The name of the stack that the team will be granted permissions to.
     * 
     */
    @Import(name="stack", required=true)
    private Output<String> stack;

    /**
     * @return The name of the stack that the team will be granted permissions to.
     * 
     */
    public Output<String> stack() {
        return this.stack;
    }

    /**
     * The name of the team to grant this stack permissions to. This is not the display name.
     * 
     */
    @Import(name="team", required=true)
    private Output<String> team;

    /**
     * @return The name of the team to grant this stack permissions to. This is not the display name.
     * 
     */
    public Output<String> team() {
        return this.team;
    }

    private TeamStackPermissionArgs() {}

    private TeamStackPermissionArgs(TeamStackPermissionArgs $) {
        this.organization = $.organization;
        this.permission = $.permission;
        this.project = $.project;
        this.stack = $.stack;
        this.team = $.team;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamStackPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamStackPermissionArgs $;

        public Builder() {
            $ = new TeamStackPermissionArgs();
        }

        public Builder(TeamStackPermissionArgs defaults) {
            $ = new TeamStackPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param organization The organization or the personal account name of the stack.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization The organization or the personal account name of the stack.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param permission Sets the permission level that this team will be granted to the stack.
         * 
         * @return builder
         * 
         */
        public Builder permission(TeamStackPermissionScope permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param project The project name for this stack.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project name for this stack.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param stack The name of the stack that the team will be granted permissions to.
         * 
         * @return builder
         * 
         */
        public Builder stack(Output<String> stack) {
            $.stack = stack;
            return this;
        }

        /**
         * @param stack The name of the stack that the team will be granted permissions to.
         * 
         * @return builder
         * 
         */
        public Builder stack(String stack) {
            return stack(Output.of(stack));
        }

        /**
         * @param team The name of the team to grant this stack permissions to. This is not the display name.
         * 
         * @return builder
         * 
         */
        public Builder team(Output<String> team) {
            $.team = team;
            return this;
        }

        /**
         * @param team The name of the team to grant this stack permissions to. This is not the display name.
         * 
         * @return builder
         * 
         */
        public Builder team(String team) {
            return team(Output.of(team));
        }

        public TeamStackPermissionArgs build() {
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("TeamStackPermissionArgs", "organization");
            }
            if ($.permission == null) {
                throw new MissingRequiredPropertyException("TeamStackPermissionArgs", "permission");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("TeamStackPermissionArgs", "project");
            }
            if ($.stack == null) {
                throw new MissingRequiredPropertyException("TeamStackPermissionArgs", "stack");
            }
            if ($.team == null) {
                throw new MissingRequiredPropertyException("TeamStackPermissionArgs", "team");
            }
            return $;
        }
    }

}
